//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CoreComponent.ReportDataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("LocwiseDistributorModifyList")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class LocwiseDistributorModifyList : global::System.Data.DataSet {
        
        private rptGetModifiedDistributorDataTable tablerptGetModifiedDistributor;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LocwiseDistributorModifyList() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected LocwiseDistributorModifyList(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["rptGetModifiedDistributor"] != null)) {
                    base.Tables.Add(new rptGetModifiedDistributorDataTable(ds.Tables["rptGetModifiedDistributor"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public rptGetModifiedDistributorDataTable rptGetModifiedDistributor {
            get {
                return this.tablerptGetModifiedDistributor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            LocwiseDistributorModifyList cln = ((LocwiseDistributorModifyList)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["rptGetModifiedDistributor"] != null)) {
                    base.Tables.Add(new rptGetModifiedDistributorDataTable(ds.Tables["rptGetModifiedDistributor"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablerptGetModifiedDistributor = ((rptGetModifiedDistributorDataTable)(base.Tables["rptGetModifiedDistributor"]));
            if ((initTable == true)) {
                if ((this.tablerptGetModifiedDistributor != null)) {
                    this.tablerptGetModifiedDistributor.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "LocwiseDistributorModifyList";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/LocwiseDistributorModifyList.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablerptGetModifiedDistributor = new rptGetModifiedDistributorDataTable();
            base.Tables.Add(this.tablerptGetModifiedDistributor);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerptGetModifiedDistributor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            LocwiseDistributorModifyList ds = new LocwiseDistributorModifyList();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void rptGetModifiedDistributorRowChangeEventHandler(object sender, rptGetModifiedDistributorRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class rptGetModifiedDistributorDataTable : global::System.Data.TypedTableBase<rptGetModifiedDistributorRow> {
            
            private global::System.Data.DataColumn columnDistributorId;
            
            private global::System.Data.DataColumn columnLocationId;
            
            private global::System.Data.DataColumn columnLocationCode;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnFullName;
            
            private global::System.Data.DataColumn columnDistributorPANNumber;
            
            private global::System.Data.DataColumn columnDistributorBankAccNumber;
            
            private global::System.Data.DataColumn columnDistributorBankBranch;
            
            private global::System.Data.DataColumn columnDistributorBankName;
            
            private global::System.Data.DataColumn columnModifiedDate;
            
            private global::System.Data.DataColumn columnBranchName;
            
            private global::System.Data.DataColumn columnHeaderAddress;
            
            private global::System.Data.DataColumn columnAddressText;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptGetModifiedDistributorDataTable() {
                this.TableName = "rptGetModifiedDistributor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptGetModifiedDistributorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected rptGetModifiedDistributorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributorIdColumn {
                get {
                    return this.columnDistributorId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationIdColumn {
                get {
                    return this.columnLocationId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationCodeColumn {
                get {
                    return this.columnLocationCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributorPANNumberColumn {
                get {
                    return this.columnDistributorPANNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributorBankAccNumberColumn {
                get {
                    return this.columnDistributorBankAccNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributorBankBranchColumn {
                get {
                    return this.columnDistributorBankBranch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributorBankNameColumn {
                get {
                    return this.columnDistributorBankName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedDateColumn {
                get {
                    return this.columnModifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BranchNameColumn {
                get {
                    return this.columnBranchName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeaderAddressColumn {
                get {
                    return this.columnHeaderAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressTextColumn {
                get {
                    return this.columnAddressText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptGetModifiedDistributorRow this[int index] {
                get {
                    return ((rptGetModifiedDistributorRow)(this.Rows[index]));
                }
            }
            
            public event rptGetModifiedDistributorRowChangeEventHandler rptGetModifiedDistributorRowChanging;
            
            public event rptGetModifiedDistributorRowChangeEventHandler rptGetModifiedDistributorRowChanged;
            
            public event rptGetModifiedDistributorRowChangeEventHandler rptGetModifiedDistributorRowDeleting;
            
            public event rptGetModifiedDistributorRowChangeEventHandler rptGetModifiedDistributorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrptGetModifiedDistributorRow(rptGetModifiedDistributorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptGetModifiedDistributorRow AddrptGetModifiedDistributorRow(string DistributorId, string LocationId, string LocationCode, string Name, string FullName, string DistributorPANNumber, string DistributorBankAccNumber, string DistributorBankBranch, string DistributorBankName, string ModifiedDate, string BranchName, string HeaderAddress, string AddressText) {
                rptGetModifiedDistributorRow rowrptGetModifiedDistributorRow = ((rptGetModifiedDistributorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DistributorId,
                        LocationId,
                        LocationCode,
                        Name,
                        FullName,
                        DistributorPANNumber,
                        DistributorBankAccNumber,
                        DistributorBankBranch,
                        DistributorBankName,
                        ModifiedDate,
                        BranchName,
                        HeaderAddress,
                        AddressText};
                rowrptGetModifiedDistributorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrptGetModifiedDistributorRow);
                return rowrptGetModifiedDistributorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                rptGetModifiedDistributorDataTable cln = ((rptGetModifiedDistributorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new rptGetModifiedDistributorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDistributorId = base.Columns["DistributorId"];
                this.columnLocationId = base.Columns["LocationId"];
                this.columnLocationCode = base.Columns["LocationCode"];
                this.columnName = base.Columns["Name"];
                this.columnFullName = base.Columns["FullName"];
                this.columnDistributorPANNumber = base.Columns["DistributorPANNumber"];
                this.columnDistributorBankAccNumber = base.Columns["DistributorBankAccNumber"];
                this.columnDistributorBankBranch = base.Columns["DistributorBankBranch"];
                this.columnDistributorBankName = base.Columns["DistributorBankName"];
                this.columnModifiedDate = base.Columns["ModifiedDate"];
                this.columnBranchName = base.Columns["BranchName"];
                this.columnHeaderAddress = base.Columns["HeaderAddress"];
                this.columnAddressText = base.Columns["AddressText"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDistributorId = new global::System.Data.DataColumn("DistributorId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributorId);
                this.columnLocationId = new global::System.Data.DataColumn("LocationId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationId);
                this.columnLocationCode = new global::System.Data.DataColumn("LocationCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationCode);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnFullName = new global::System.Data.DataColumn("FullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnDistributorPANNumber = new global::System.Data.DataColumn("DistributorPANNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributorPANNumber);
                this.columnDistributorBankAccNumber = new global::System.Data.DataColumn("DistributorBankAccNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributorBankAccNumber);
                this.columnDistributorBankBranch = new global::System.Data.DataColumn("DistributorBankBranch", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributorBankBranch);
                this.columnDistributorBankName = new global::System.Data.DataColumn("DistributorBankName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributorBankName);
                this.columnModifiedDate = new global::System.Data.DataColumn("ModifiedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDate);
                this.columnBranchName = new global::System.Data.DataColumn("BranchName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBranchName);
                this.columnHeaderAddress = new global::System.Data.DataColumn("HeaderAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeaderAddress);
                this.columnAddressText = new global::System.Data.DataColumn("AddressText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddressText);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptGetModifiedDistributorRow NewrptGetModifiedDistributorRow() {
                return ((rptGetModifiedDistributorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new rptGetModifiedDistributorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(rptGetModifiedDistributorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.rptGetModifiedDistributorRowChanged != null)) {
                    this.rptGetModifiedDistributorRowChanged(this, new rptGetModifiedDistributorRowChangeEvent(((rptGetModifiedDistributorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.rptGetModifiedDistributorRowChanging != null)) {
                    this.rptGetModifiedDistributorRowChanging(this, new rptGetModifiedDistributorRowChangeEvent(((rptGetModifiedDistributorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.rptGetModifiedDistributorRowDeleted != null)) {
                    this.rptGetModifiedDistributorRowDeleted(this, new rptGetModifiedDistributorRowChangeEvent(((rptGetModifiedDistributorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.rptGetModifiedDistributorRowDeleting != null)) {
                    this.rptGetModifiedDistributorRowDeleting(this, new rptGetModifiedDistributorRowChangeEvent(((rptGetModifiedDistributorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverptGetModifiedDistributorRow(rptGetModifiedDistributorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LocwiseDistributorModifyList ds = new LocwiseDistributorModifyList();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "rptGetModifiedDistributorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class rptGetModifiedDistributorRow : global::System.Data.DataRow {
            
            private rptGetModifiedDistributorDataTable tablerptGetModifiedDistributor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptGetModifiedDistributorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerptGetModifiedDistributor = ((rptGetModifiedDistributorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributorId {
                get {
                    try {
                        return ((string)(this[this.tablerptGetModifiedDistributor.DistributorIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributorId\' in table \'rptGetModifiedDistributor\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablerptGetModifiedDistributor.DistributorIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationId {
                get {
                    try {
                        return ((string)(this[this.tablerptGetModifiedDistributor.LocationIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationId\' in table \'rptGetModifiedDistributor\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablerptGetModifiedDistributor.LocationIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationCode {
                get {
                    try {
                        return ((string)(this[this.tablerptGetModifiedDistributor.LocationCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationCode\' in table \'rptGetModifiedDistributor\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablerptGetModifiedDistributor.LocationCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tablerptGetModifiedDistributor.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'rptGetModifiedDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptGetModifiedDistributor.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tablerptGetModifiedDistributor.FullNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FullName\' in table \'rptGetModifiedDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptGetModifiedDistributor.FullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributorPANNumber {
                get {
                    try {
                        return ((string)(this[this.tablerptGetModifiedDistributor.DistributorPANNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributorPANNumber\' in table \'rptGetModifiedDistributor\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptGetModifiedDistributor.DistributorPANNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributorBankAccNumber {
                get {
                    try {
                        return ((string)(this[this.tablerptGetModifiedDistributor.DistributorBankAccNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributorBankAccNumber\' in table \'rptGetModifiedDistribut" +
                                "or\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptGetModifiedDistributor.DistributorBankAccNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributorBankBranch {
                get {
                    try {
                        return ((string)(this[this.tablerptGetModifiedDistributor.DistributorBankBranchColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributorBankBranch\' in table \'rptGetModifiedDistributor\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptGetModifiedDistributor.DistributorBankBranchColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributorBankName {
                get {
                    try {
                        return ((string)(this[this.tablerptGetModifiedDistributor.DistributorBankNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributorBankName\' in table \'rptGetModifiedDistributor\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptGetModifiedDistributor.DistributorBankNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedDate {
                get {
                    try {
                        return ((string)(this[this.tablerptGetModifiedDistributor.ModifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedDate\' in table \'rptGetModifiedDistributor\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablerptGetModifiedDistributor.ModifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BranchName {
                get {
                    try {
                        return ((string)(this[this.tablerptGetModifiedDistributor.BranchNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BranchName\' in table \'rptGetModifiedDistributor\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablerptGetModifiedDistributor.BranchNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HeaderAddress {
                get {
                    try {
                        return ((string)(this[this.tablerptGetModifiedDistributor.HeaderAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeaderAddress\' in table \'rptGetModifiedDistributor\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablerptGetModifiedDistributor.HeaderAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddressText {
                get {
                    try {
                        return ((string)(this[this.tablerptGetModifiedDistributor.AddressTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AddressText\' in table \'rptGetModifiedDistributor\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablerptGetModifiedDistributor.AddressTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributorIdNull() {
                return this.IsNull(this.tablerptGetModifiedDistributor.DistributorIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributorIdNull() {
                this[this.tablerptGetModifiedDistributor.DistributorIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationIdNull() {
                return this.IsNull(this.tablerptGetModifiedDistributor.LocationIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationIdNull() {
                this[this.tablerptGetModifiedDistributor.LocationIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationCodeNull() {
                return this.IsNull(this.tablerptGetModifiedDistributor.LocationCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationCodeNull() {
                this[this.tablerptGetModifiedDistributor.LocationCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tablerptGetModifiedDistributor.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tablerptGetModifiedDistributor.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullNameNull() {
                return this.IsNull(this.tablerptGetModifiedDistributor.FullNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullNameNull() {
                this[this.tablerptGetModifiedDistributor.FullNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributorPANNumberNull() {
                return this.IsNull(this.tablerptGetModifiedDistributor.DistributorPANNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributorPANNumberNull() {
                this[this.tablerptGetModifiedDistributor.DistributorPANNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributorBankAccNumberNull() {
                return this.IsNull(this.tablerptGetModifiedDistributor.DistributorBankAccNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributorBankAccNumberNull() {
                this[this.tablerptGetModifiedDistributor.DistributorBankAccNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributorBankBranchNull() {
                return this.IsNull(this.tablerptGetModifiedDistributor.DistributorBankBranchColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributorBankBranchNull() {
                this[this.tablerptGetModifiedDistributor.DistributorBankBranchColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributorBankNameNull() {
                return this.IsNull(this.tablerptGetModifiedDistributor.DistributorBankNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributorBankNameNull() {
                this[this.tablerptGetModifiedDistributor.DistributorBankNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedDateNull() {
                return this.IsNull(this.tablerptGetModifiedDistributor.ModifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedDateNull() {
                this[this.tablerptGetModifiedDistributor.ModifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBranchNameNull() {
                return this.IsNull(this.tablerptGetModifiedDistributor.BranchNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBranchNameNull() {
                this[this.tablerptGetModifiedDistributor.BranchNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeaderAddressNull() {
                return this.IsNull(this.tablerptGetModifiedDistributor.HeaderAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeaderAddressNull() {
                this[this.tablerptGetModifiedDistributor.HeaderAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressTextNull() {
                return this.IsNull(this.tablerptGetModifiedDistributor.AddressTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressTextNull() {
                this[this.tablerptGetModifiedDistributor.AddressTextColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class rptGetModifiedDistributorRowChangeEvent : global::System.EventArgs {
            
            private rptGetModifiedDistributorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptGetModifiedDistributorRowChangeEvent(rptGetModifiedDistributorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptGetModifiedDistributorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591