//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CoreComponent.ReportDataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("OrderCollection")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class OrderCollection : global::System.Data.DataSet {
        
        private OrderCollectionDataTable tableOrderCollection;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrderCollection() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected OrderCollection(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["OrderCollection"] != null)) {
                    base.Tables.Add(new OrderCollectionDataTable(ds.Tables["OrderCollection"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrderCollectionDataTable _OrderCollection {
            get {
                return this.tableOrderCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            OrderCollection cln = ((OrderCollection)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["OrderCollection"] != null)) {
                    base.Tables.Add(new OrderCollectionDataTable(ds.Tables["OrderCollection"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableOrderCollection = ((OrderCollectionDataTable)(base.Tables["OrderCollection"]));
            if ((initTable == true)) {
                if ((this.tableOrderCollection != null)) {
                    this.tableOrderCollection.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "OrderCollection";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/OrderCollection.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableOrderCollection = new OrderCollectionDataTable();
            base.Tables.Add(this.tableOrderCollection);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_OrderCollection() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            OrderCollection ds = new OrderCollection();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void OrderCollectionRowChangeEventHandler(object sender, OrderCollectionRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OrderCollectionDataTable : global::System.Data.TypedTableBase<OrderCollectionRow> {
            
            private global::System.Data.DataColumn columnSerialNo;
            
            private global::System.Data.DataColumn columnCustomerOrderNo;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnDistributorId;
            
            private global::System.Data.DataColumn columnDistributorName;
            
            private global::System.Data.DataColumn columnCash;
            
            private global::System.Data.DataColumn columnCreditCard;
            
            private global::System.Data.DataColumn columnForex;
            
            private global::System.Data.DataColumn columnCheque;
            
            private global::System.Data.DataColumn columnBonusCheque;
            
            private global::System.Data.DataColumn columnBank;
            
            private global::System.Data.DataColumn columnCOD;
            
            private global::System.Data.DataColumn columnChangeAmt;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnLocType;
            
            private global::System.Data.DataColumn columnLocationId;
            
            private global::System.Data.DataColumn columnFromDate;
            
            private global::System.Data.DataColumn columnToDate;
            
            private global::System.Data.DataColumn columnAvailableBefore;
            
            private global::System.Data.DataColumn columnDepositinBetween;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnUserId;
            
            private global::System.Data.DataColumn columnHeaderAddress;
            
            private global::System.Data.DataColumn columnAddressText;
            
            private global::System.Data.DataColumn columnLocationName;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnStatus1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderCollectionDataTable() {
                this.TableName = "OrderCollection";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrderCollectionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OrderCollectionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SerialNoColumn {
                get {
                    return this.columnSerialNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerOrderNoColumn {
                get {
                    return this.columnCustomerOrderNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributorIdColumn {
                get {
                    return this.columnDistributorId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributorNameColumn {
                get {
                    return this.columnDistributorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CashColumn {
                get {
                    return this.columnCash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreditCardColumn {
                get {
                    return this.columnCreditCard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ForexColumn {
                get {
                    return this.columnForex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChequeColumn {
                get {
                    return this.columnCheque;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BonusChequeColumn {
                get {
                    return this.columnBonusCheque;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankColumn {
                get {
                    return this.columnBank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODColumn {
                get {
                    return this.columnCOD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChangeAmtColumn {
                get {
                    return this.columnChangeAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocTypeColumn {
                get {
                    return this.columnLocType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationIdColumn {
                get {
                    return this.columnLocationId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDateColumn {
                get {
                    return this.columnToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvailableBeforeColumn {
                get {
                    return this.columnAvailableBefore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepositinBetweenColumn {
                get {
                    return this.columnDepositinBetween;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeaderAddressColumn {
                get {
                    return this.columnHeaderAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressTextColumn {
                get {
                    return this.columnAddressText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationNameColumn {
                get {
                    return this.columnLocationName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Status1Column {
                get {
                    return this.columnStatus1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderCollectionRow this[int index] {
                get {
                    return ((OrderCollectionRow)(this.Rows[index]));
                }
            }
            
            public event OrderCollectionRowChangeEventHandler OrderCollectionRowChanging;
            
            public event OrderCollectionRowChangeEventHandler OrderCollectionRowChanged;
            
            public event OrderCollectionRowChangeEventHandler OrderCollectionRowDeleting;
            
            public event OrderCollectionRowChangeEventHandler OrderCollectionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOrderCollectionRow(OrderCollectionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderCollectionRow AddOrderCollectionRow(
                        string SerialNo, 
                        string CustomerOrderNo, 
                        string Date, 
                        string DistributorId, 
                        string DistributorName, 
                        string Cash, 
                        string CreditCard, 
                        string Forex, 
                        string Cheque, 
                        string BonusCheque, 
                        string Bank, 
                        string COD, 
                        string ChangeAmt, 
                        string City, 
                        string Location, 
                        string LocType, 
                        string LocationId, 
                        string FromDate, 
                        string ToDate, 
                        string AvailableBefore, 
                        string DepositinBetween, 
                        string UserName, 
                        string UserId, 
                        string HeaderAddress, 
                        string AddressText, 
                        string LocationName, 
                        string Status, 
                        string Status1) {
                OrderCollectionRow rowOrderCollectionRow = ((OrderCollectionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SerialNo,
                        CustomerOrderNo,
                        Date,
                        DistributorId,
                        DistributorName,
                        Cash,
                        CreditCard,
                        Forex,
                        Cheque,
                        BonusCheque,
                        Bank,
                        COD,
                        ChangeAmt,
                        City,
                        Location,
                        LocType,
                        LocationId,
                        FromDate,
                        ToDate,
                        AvailableBefore,
                        DepositinBetween,
                        UserName,
                        UserId,
                        HeaderAddress,
                        AddressText,
                        LocationName,
                        Status,
                        Status1};
                rowOrderCollectionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOrderCollectionRow);
                return rowOrderCollectionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OrderCollectionDataTable cln = ((OrderCollectionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OrderCollectionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSerialNo = base.Columns["SerialNo"];
                this.columnCustomerOrderNo = base.Columns["CustomerOrderNo"];
                this.columnDate = base.Columns["Date"];
                this.columnDistributorId = base.Columns["DistributorId"];
                this.columnDistributorName = base.Columns["DistributorName"];
                this.columnCash = base.Columns["Cash"];
                this.columnCreditCard = base.Columns["CreditCard"];
                this.columnForex = base.Columns["Forex"];
                this.columnCheque = base.Columns["Cheque"];
                this.columnBonusCheque = base.Columns["BonusCheque"];
                this.columnBank = base.Columns["Bank"];
                this.columnCOD = base.Columns["COD"];
                this.columnChangeAmt = base.Columns["ChangeAmt"];
                this.columnCity = base.Columns["City"];
                this.columnLocation = base.Columns["Location"];
                this.columnLocType = base.Columns["LocType"];
                this.columnLocationId = base.Columns["LocationId"];
                this.columnFromDate = base.Columns["FromDate"];
                this.columnToDate = base.Columns["ToDate"];
                this.columnAvailableBefore = base.Columns["AvailableBefore"];
                this.columnDepositinBetween = base.Columns["DepositinBetween"];
                this.columnUserName = base.Columns["UserName"];
                this.columnUserId = base.Columns["UserId"];
                this.columnHeaderAddress = base.Columns["HeaderAddress"];
                this.columnAddressText = base.Columns["AddressText"];
                this.columnLocationName = base.Columns["LocationName"];
                this.columnStatus = base.Columns["Status"];
                this.columnStatus1 = base.Columns["Status1"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSerialNo = new global::System.Data.DataColumn("SerialNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSerialNo);
                this.columnCustomerOrderNo = new global::System.Data.DataColumn("CustomerOrderNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerOrderNo);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnDistributorId = new global::System.Data.DataColumn("DistributorId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributorId);
                this.columnDistributorName = new global::System.Data.DataColumn("DistributorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributorName);
                this.columnCash = new global::System.Data.DataColumn("Cash", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCash);
                this.columnCreditCard = new global::System.Data.DataColumn("CreditCard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreditCard);
                this.columnForex = new global::System.Data.DataColumn("Forex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForex);
                this.columnCheque = new global::System.Data.DataColumn("Cheque", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheque);
                this.columnBonusCheque = new global::System.Data.DataColumn("BonusCheque", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBonusCheque);
                this.columnBank = new global::System.Data.DataColumn("Bank", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBank);
                this.columnCOD = new global::System.Data.DataColumn("COD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOD);
                this.columnChangeAmt = new global::System.Data.DataColumn("ChangeAmt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChangeAmt);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnLocType = new global::System.Data.DataColumn("LocType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocType);
                this.columnLocationId = new global::System.Data.DataColumn("LocationId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationId);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
                this.columnToDate = new global::System.Data.DataColumn("ToDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDate);
                this.columnAvailableBefore = new global::System.Data.DataColumn("AvailableBefore", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvailableBefore);
                this.columnDepositinBetween = new global::System.Data.DataColumn("DepositinBetween", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepositinBetween);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnHeaderAddress = new global::System.Data.DataColumn("HeaderAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeaderAddress);
                this.columnAddressText = new global::System.Data.DataColumn("AddressText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddressText);
                this.columnLocationName = new global::System.Data.DataColumn("LocationName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationName);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnStatus1 = new global::System.Data.DataColumn("Status1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus1);
                this.ExtendedProperties.Add("Generator_TablePropName", "_OrderCollection");
                this.ExtendedProperties.Add("Generator_UserTableName", "OrderCollection");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderCollectionRow NewOrderCollectionRow() {
                return ((OrderCollectionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OrderCollectionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OrderCollectionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrderCollectionRowChanged != null)) {
                    this.OrderCollectionRowChanged(this, new OrderCollectionRowChangeEvent(((OrderCollectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrderCollectionRowChanging != null)) {
                    this.OrderCollectionRowChanging(this, new OrderCollectionRowChangeEvent(((OrderCollectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrderCollectionRowDeleted != null)) {
                    this.OrderCollectionRowDeleted(this, new OrderCollectionRowChangeEvent(((OrderCollectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrderCollectionRowDeleting != null)) {
                    this.OrderCollectionRowDeleting(this, new OrderCollectionRowChangeEvent(((OrderCollectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOrderCollectionRow(OrderCollectionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OrderCollection ds = new OrderCollection();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrderCollectionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OrderCollectionRow : global::System.Data.DataRow {
            
            private OrderCollectionDataTable tableOrderCollection;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrderCollectionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrderCollection = ((OrderCollectionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SerialNo {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.SerialNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SerialNo\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.SerialNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerOrderNo {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.CustomerOrderNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerOrderNo\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.CustomerOrderNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Date {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributorId {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.DistributorIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributorId\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.DistributorIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributorName {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.DistributorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributorName\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.DistributorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cash {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.CashColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cash\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.CashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreditCard {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.CreditCardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreditCard\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.CreditCardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Forex {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.ForexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Forex\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.ForexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cheque {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.ChequeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cheque\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.ChequeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BonusCheque {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.BonusChequeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BonusCheque\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.BonusChequeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bank {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.BankColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bank\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.BankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COD {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.CODColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COD\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.CODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChangeAmt {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.ChangeAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChangeAmt\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.ChangeAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocType {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.LocTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocType\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.LocTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationId {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.LocationIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationId\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.LocationIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToDate {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.ToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToDate\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.ToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AvailableBefore {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.AvailableBeforeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AvailableBefore\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.AvailableBeforeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepositinBetween {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.DepositinBetweenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepositinBetween\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.DepositinBetweenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.UserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserName\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserId {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.UserIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserId\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.UserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HeaderAddress {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.HeaderAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeaderAddress\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.HeaderAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddressText {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.AddressTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AddressText\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.AddressTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationName {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.LocationNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationName\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.LocationNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status1 {
                get {
                    try {
                        return ((string)(this[this.tableOrderCollection.Status1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status1\' in table \'OrderCollection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrderCollection.Status1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSerialNoNull() {
                return this.IsNull(this.tableOrderCollection.SerialNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSerialNoNull() {
                this[this.tableOrderCollection.SerialNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerOrderNoNull() {
                return this.IsNull(this.tableOrderCollection.CustomerOrderNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerOrderNoNull() {
                this[this.tableOrderCollection.CustomerOrderNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableOrderCollection.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableOrderCollection.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributorIdNull() {
                return this.IsNull(this.tableOrderCollection.DistributorIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributorIdNull() {
                this[this.tableOrderCollection.DistributorIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributorNameNull() {
                return this.IsNull(this.tableOrderCollection.DistributorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributorNameNull() {
                this[this.tableOrderCollection.DistributorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCashNull() {
                return this.IsNull(this.tableOrderCollection.CashColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCashNull() {
                this[this.tableOrderCollection.CashColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditCardNull() {
                return this.IsNull(this.tableOrderCollection.CreditCardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreditCardNull() {
                this[this.tableOrderCollection.CreditCardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsForexNull() {
                return this.IsNull(this.tableOrderCollection.ForexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetForexNull() {
                this[this.tableOrderCollection.ForexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChequeNull() {
                return this.IsNull(this.tableOrderCollection.ChequeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChequeNull() {
                this[this.tableOrderCollection.ChequeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBonusChequeNull() {
                return this.IsNull(this.tableOrderCollection.BonusChequeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBonusChequeNull() {
                this[this.tableOrderCollection.BonusChequeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankNull() {
                return this.IsNull(this.tableOrderCollection.BankColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankNull() {
                this[this.tableOrderCollection.BankColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODNull() {
                return this.IsNull(this.tableOrderCollection.CODColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODNull() {
                this[this.tableOrderCollection.CODColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChangeAmtNull() {
                return this.IsNull(this.tableOrderCollection.ChangeAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChangeAmtNull() {
                this[this.tableOrderCollection.ChangeAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableOrderCollection.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableOrderCollection.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tableOrderCollection.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tableOrderCollection.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocTypeNull() {
                return this.IsNull(this.tableOrderCollection.LocTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocTypeNull() {
                this[this.tableOrderCollection.LocTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationIdNull() {
                return this.IsNull(this.tableOrderCollection.LocationIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationIdNull() {
                this[this.tableOrderCollection.LocationIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableOrderCollection.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableOrderCollection.FromDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToDateNull() {
                return this.IsNull(this.tableOrderCollection.ToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToDateNull() {
                this[this.tableOrderCollection.ToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvailableBeforeNull() {
                return this.IsNull(this.tableOrderCollection.AvailableBeforeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvailableBeforeNull() {
                this[this.tableOrderCollection.AvailableBeforeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepositinBetweenNull() {
                return this.IsNull(this.tableOrderCollection.DepositinBetweenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepositinBetweenNull() {
                this[this.tableOrderCollection.DepositinBetweenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableOrderCollection.UserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNameNull() {
                this[this.tableOrderCollection.UserNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIdNull() {
                return this.IsNull(this.tableOrderCollection.UserIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIdNull() {
                this[this.tableOrderCollection.UserIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeaderAddressNull() {
                return this.IsNull(this.tableOrderCollection.HeaderAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeaderAddressNull() {
                this[this.tableOrderCollection.HeaderAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressTextNull() {
                return this.IsNull(this.tableOrderCollection.AddressTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressTextNull() {
                this[this.tableOrderCollection.AddressTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNameNull() {
                return this.IsNull(this.tableOrderCollection.LocationNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNameNull() {
                this[this.tableOrderCollection.LocationNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableOrderCollection.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableOrderCollection.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatus1Null() {
                return this.IsNull(this.tableOrderCollection.Status1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatus1Null() {
                this[this.tableOrderCollection.Status1Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OrderCollectionRowChangeEvent : global::System.EventArgs {
            
            private OrderCollectionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderCollectionRowChangeEvent(OrderCollectionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderCollectionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591