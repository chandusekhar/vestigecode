//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CoreComponent.ReportDataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PUCAccountsDetails")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PUCAccountsDetails : global::System.Data.DataSet {
        
        private PUCAccountsDetails_DataTableDataTable tablePUCAccountsDetails_DataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PUCAccountsDetails() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PUCAccountsDetails(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PUCAccountsDetails_DataTable"] != null)) {
                    base.Tables.Add(new PUCAccountsDetails_DataTableDataTable(ds.Tables["PUCAccountsDetails_DataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PUCAccountsDetails_DataTableDataTable PUCAccountsDetails_DataTable {
            get {
                return this.tablePUCAccountsDetails_DataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PUCAccountsDetails cln = ((PUCAccountsDetails)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PUCAccountsDetails_DataTable"] != null)) {
                    base.Tables.Add(new PUCAccountsDetails_DataTableDataTable(ds.Tables["PUCAccountsDetails_DataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePUCAccountsDetails_DataTable = ((PUCAccountsDetails_DataTableDataTable)(base.Tables["PUCAccountsDetails_DataTable"]));
            if ((initTable == true)) {
                if ((this.tablePUCAccountsDetails_DataTable != null)) {
                    this.tablePUCAccountsDetails_DataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PUCAccountsDetails";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PUCAccountsDetails.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("en-GB");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePUCAccountsDetails_DataTable = new PUCAccountsDetails_DataTableDataTable();
            base.Tables.Add(this.tablePUCAccountsDetails_DataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePUCAccountsDetails_DataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PUCAccountsDetails ds = new PUCAccountsDetails();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PUCAccountsDetails_DataTableRowChangeEventHandler(object sender, PUCAccountsDetails_DataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PUCAccountsDetails_DataTableDataTable : global::System.Data.TypedTableBase<PUCAccountsDetails_DataTableRow> {
            
            private global::System.Data.DataColumn columnDistributorId;
            
            private global::System.Data.DataColumn columnDistributorName;
            
            private global::System.Data.DataColumn columnPCId;
            
            private global::System.Data.DataColumn columnPCName;
            
            private global::System.Data.DataColumn columnPayDate;
            
            private global::System.Data.DataColumn columnCash;
            
            private global::System.Data.DataColumn columnCreditCard;
            
            private global::System.Data.DataColumn columnBank;
            
            private global::System.Data.DataColumn columnCheque;
            
            private global::System.Data.DataColumn columnBonusCheque;
            
            private global::System.Data.DataColumn columnFromDateText;
            
            private global::System.Data.DataColumn columnToDateText;
            
            private global::System.Data.DataColumn columnHeaderAddress;
            
            private global::System.Data.DataColumn columnAddressText;
            
            private global::System.Data.DataColumn columnPayDateText;
            
            private global::System.Data.DataColumn columnAvailableBefore;
            
            private global::System.Data.DataColumn columnDepositInBetween;
            
            private global::System.Data.DataColumn columnUsedAmount;
            
            private global::System.Data.DataColumn columnOnAccount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PUCAccountsDetails_DataTableDataTable() {
                this.TableName = "PUCAccountsDetails_DataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PUCAccountsDetails_DataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PUCAccountsDetails_DataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributorIdColumn {
                get {
                    return this.columnDistributorId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributorNameColumn {
                get {
                    return this.columnDistributorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PCIdColumn {
                get {
                    return this.columnPCId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PCNameColumn {
                get {
                    return this.columnPCName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayDateColumn {
                get {
                    return this.columnPayDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CashColumn {
                get {
                    return this.columnCash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreditCardColumn {
                get {
                    return this.columnCreditCard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankColumn {
                get {
                    return this.columnBank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChequeColumn {
                get {
                    return this.columnCheque;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BonusChequeColumn {
                get {
                    return this.columnBonusCheque;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateTextColumn {
                get {
                    return this.columnFromDateText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDateTextColumn {
                get {
                    return this.columnToDateText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeaderAddressColumn {
                get {
                    return this.columnHeaderAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressTextColumn {
                get {
                    return this.columnAddressText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayDateTextColumn {
                get {
                    return this.columnPayDateText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvailableBeforeColumn {
                get {
                    return this.columnAvailableBefore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepositInBetweenColumn {
                get {
                    return this.columnDepositInBetween;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsedAmountColumn {
                get {
                    return this.columnUsedAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OnAccountColumn {
                get {
                    return this.columnOnAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PUCAccountsDetails_DataTableRow this[int index] {
                get {
                    return ((PUCAccountsDetails_DataTableRow)(this.Rows[index]));
                }
            }
            
            public event PUCAccountsDetails_DataTableRowChangeEventHandler PUCAccountsDetails_DataTableRowChanging;
            
            public event PUCAccountsDetails_DataTableRowChangeEventHandler PUCAccountsDetails_DataTableRowChanged;
            
            public event PUCAccountsDetails_DataTableRowChangeEventHandler PUCAccountsDetails_DataTableRowDeleting;
            
            public event PUCAccountsDetails_DataTableRowChangeEventHandler PUCAccountsDetails_DataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPUCAccountsDetails_DataTableRow(PUCAccountsDetails_DataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PUCAccountsDetails_DataTableRow AddPUCAccountsDetails_DataTableRow(
                        string DistributorId, 
                        string DistributorName, 
                        string PCId, 
                        string PCName, 
                        string PayDate, 
                        string Cash, 
                        string CreditCard, 
                        string Bank, 
                        string Cheque, 
                        string BonusCheque, 
                        string FromDateText, 
                        string ToDateText, 
                        string HeaderAddress, 
                        string AddressText, 
                        string PayDateText, 
                        string AvailableBefore, 
                        string DepositInBetween, 
                        string UsedAmount, 
                        string OnAccount) {
                PUCAccountsDetails_DataTableRow rowPUCAccountsDetails_DataTableRow = ((PUCAccountsDetails_DataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DistributorId,
                        DistributorName,
                        PCId,
                        PCName,
                        PayDate,
                        Cash,
                        CreditCard,
                        Bank,
                        Cheque,
                        BonusCheque,
                        FromDateText,
                        ToDateText,
                        HeaderAddress,
                        AddressText,
                        PayDateText,
                        AvailableBefore,
                        DepositInBetween,
                        UsedAmount,
                        OnAccount};
                rowPUCAccountsDetails_DataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPUCAccountsDetails_DataTableRow);
                return rowPUCAccountsDetails_DataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PUCAccountsDetails_DataTableDataTable cln = ((PUCAccountsDetails_DataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PUCAccountsDetails_DataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDistributorId = base.Columns["DistributorId"];
                this.columnDistributorName = base.Columns["DistributorName"];
                this.columnPCId = base.Columns["PCId"];
                this.columnPCName = base.Columns["PCName"];
                this.columnPayDate = base.Columns["PayDate"];
                this.columnCash = base.Columns["Cash"];
                this.columnCreditCard = base.Columns["CreditCard"];
                this.columnBank = base.Columns["Bank"];
                this.columnCheque = base.Columns["Cheque"];
                this.columnBonusCheque = base.Columns["BonusCheque"];
                this.columnFromDateText = base.Columns["FromDateText"];
                this.columnToDateText = base.Columns["ToDateText"];
                this.columnHeaderAddress = base.Columns["HeaderAddress"];
                this.columnAddressText = base.Columns["AddressText"];
                this.columnPayDateText = base.Columns["PayDateText"];
                this.columnAvailableBefore = base.Columns["AvailableBefore"];
                this.columnDepositInBetween = base.Columns["DepositInBetween"];
                this.columnUsedAmount = base.Columns["UsedAmount"];
                this.columnOnAccount = base.Columns["OnAccount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDistributorId = new global::System.Data.DataColumn("DistributorId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributorId);
                this.columnDistributorName = new global::System.Data.DataColumn("DistributorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributorName);
                this.columnPCId = new global::System.Data.DataColumn("PCId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPCId);
                this.columnPCName = new global::System.Data.DataColumn("PCName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPCName);
                this.columnPayDate = new global::System.Data.DataColumn("PayDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayDate);
                this.columnCash = new global::System.Data.DataColumn("Cash", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCash);
                this.columnCreditCard = new global::System.Data.DataColumn("CreditCard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreditCard);
                this.columnBank = new global::System.Data.DataColumn("Bank", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBank);
                this.columnCheque = new global::System.Data.DataColumn("Cheque", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheque);
                this.columnBonusCheque = new global::System.Data.DataColumn("BonusCheque", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBonusCheque);
                this.columnFromDateText = new global::System.Data.DataColumn("FromDateText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDateText);
                this.columnToDateText = new global::System.Data.DataColumn("ToDateText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDateText);
                this.columnHeaderAddress = new global::System.Data.DataColumn("HeaderAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeaderAddress);
                this.columnAddressText = new global::System.Data.DataColumn("AddressText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddressText);
                this.columnPayDateText = new global::System.Data.DataColumn("PayDateText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayDateText);
                this.columnAvailableBefore = new global::System.Data.DataColumn("AvailableBefore", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvailableBefore);
                this.columnDepositInBetween = new global::System.Data.DataColumn("DepositInBetween", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepositInBetween);
                this.columnUsedAmount = new global::System.Data.DataColumn("UsedAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsedAmount);
                this.columnOnAccount = new global::System.Data.DataColumn("OnAccount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOnAccount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PUCAccountsDetails_DataTableRow NewPUCAccountsDetails_DataTableRow() {
                return ((PUCAccountsDetails_DataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PUCAccountsDetails_DataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PUCAccountsDetails_DataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PUCAccountsDetails_DataTableRowChanged != null)) {
                    this.PUCAccountsDetails_DataTableRowChanged(this, new PUCAccountsDetails_DataTableRowChangeEvent(((PUCAccountsDetails_DataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PUCAccountsDetails_DataTableRowChanging != null)) {
                    this.PUCAccountsDetails_DataTableRowChanging(this, new PUCAccountsDetails_DataTableRowChangeEvent(((PUCAccountsDetails_DataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PUCAccountsDetails_DataTableRowDeleted != null)) {
                    this.PUCAccountsDetails_DataTableRowDeleted(this, new PUCAccountsDetails_DataTableRowChangeEvent(((PUCAccountsDetails_DataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PUCAccountsDetails_DataTableRowDeleting != null)) {
                    this.PUCAccountsDetails_DataTableRowDeleting(this, new PUCAccountsDetails_DataTableRowChangeEvent(((PUCAccountsDetails_DataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePUCAccountsDetails_DataTableRow(PUCAccountsDetails_DataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PUCAccountsDetails ds = new PUCAccountsDetails();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PUCAccountsDetails_DataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PUCAccountsDetails_DataTableRow : global::System.Data.DataRow {
            
            private PUCAccountsDetails_DataTableDataTable tablePUCAccountsDetails_DataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PUCAccountsDetails_DataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePUCAccountsDetails_DataTable = ((PUCAccountsDetails_DataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributorId {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.DistributorIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributorId\' in table \'PUCAccountsDetails_DataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.DistributorIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributorName {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.DistributorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributorName\' in table \'PUCAccountsDetails_DataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.DistributorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PCId {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.PCIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PCId\' in table \'PUCAccountsDetails_DataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.PCIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PCName {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.PCNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PCName\' in table \'PUCAccountsDetails_DataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.PCNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayDate {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.PayDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayDate\' in table \'PUCAccountsDetails_DataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.PayDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cash {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.CashColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cash\' in table \'PUCAccountsDetails_DataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.CashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreditCard {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.CreditCardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreditCard\' in table \'PUCAccountsDetails_DataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.CreditCardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bank {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.BankColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bank\' in table \'PUCAccountsDetails_DataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.BankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cheque {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.ChequeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cheque\' in table \'PUCAccountsDetails_DataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.ChequeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BonusCheque {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.BonusChequeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BonusCheque\' in table \'PUCAccountsDetails_DataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.BonusChequeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDateText {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.FromDateTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDateText\' in table \'PUCAccountsDetails_DataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.FromDateTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToDateText {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.ToDateTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToDateText\' in table \'PUCAccountsDetails_DataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.ToDateTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HeaderAddress {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.HeaderAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeaderAddress\' in table \'PUCAccountsDetails_DataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.HeaderAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddressText {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.AddressTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AddressText\' in table \'PUCAccountsDetails_DataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.AddressTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayDateText {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.PayDateTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayDateText\' in table \'PUCAccountsDetails_DataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.PayDateTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AvailableBefore {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.AvailableBeforeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AvailableBefore\' in table \'PUCAccountsDetails_DataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.AvailableBeforeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepositInBetween {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.DepositInBetweenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepositInBetween\' in table \'PUCAccountsDetails_DataTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.DepositInBetweenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UsedAmount {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.UsedAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UsedAmount\' in table \'PUCAccountsDetails_DataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.UsedAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OnAccount {
                get {
                    try {
                        return ((string)(this[this.tablePUCAccountsDetails_DataTable.OnAccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OnAccount\' in table \'PUCAccountsDetails_DataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePUCAccountsDetails_DataTable.OnAccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributorIdNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.DistributorIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributorIdNull() {
                this[this.tablePUCAccountsDetails_DataTable.DistributorIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributorNameNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.DistributorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributorNameNull() {
                this[this.tablePUCAccountsDetails_DataTable.DistributorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPCIdNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.PCIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPCIdNull() {
                this[this.tablePUCAccountsDetails_DataTable.PCIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPCNameNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.PCNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPCNameNull() {
                this[this.tablePUCAccountsDetails_DataTable.PCNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayDateNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.PayDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayDateNull() {
                this[this.tablePUCAccountsDetails_DataTable.PayDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCashNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.CashColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCashNull() {
                this[this.tablePUCAccountsDetails_DataTable.CashColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditCardNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.CreditCardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreditCardNull() {
                this[this.tablePUCAccountsDetails_DataTable.CreditCardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.BankColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankNull() {
                this[this.tablePUCAccountsDetails_DataTable.BankColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChequeNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.ChequeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChequeNull() {
                this[this.tablePUCAccountsDetails_DataTable.ChequeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBonusChequeNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.BonusChequeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBonusChequeNull() {
                this[this.tablePUCAccountsDetails_DataTable.BonusChequeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateTextNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.FromDateTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateTextNull() {
                this[this.tablePUCAccountsDetails_DataTable.FromDateTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToDateTextNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.ToDateTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToDateTextNull() {
                this[this.tablePUCAccountsDetails_DataTable.ToDateTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeaderAddressNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.HeaderAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeaderAddressNull() {
                this[this.tablePUCAccountsDetails_DataTable.HeaderAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressTextNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.AddressTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressTextNull() {
                this[this.tablePUCAccountsDetails_DataTable.AddressTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayDateTextNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.PayDateTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayDateTextNull() {
                this[this.tablePUCAccountsDetails_DataTable.PayDateTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvailableBeforeNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.AvailableBeforeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvailableBeforeNull() {
                this[this.tablePUCAccountsDetails_DataTable.AvailableBeforeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepositInBetweenNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.DepositInBetweenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepositInBetweenNull() {
                this[this.tablePUCAccountsDetails_DataTable.DepositInBetweenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsedAmountNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.UsedAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsedAmountNull() {
                this[this.tablePUCAccountsDetails_DataTable.UsedAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOnAccountNull() {
                return this.IsNull(this.tablePUCAccountsDetails_DataTable.OnAccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOnAccountNull() {
                this[this.tablePUCAccountsDetails_DataTable.OnAccountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PUCAccountsDetails_DataTableRowChangeEvent : global::System.EventArgs {
            
            private PUCAccountsDetails_DataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PUCAccountsDetails_DataTableRowChangeEvent(PUCAccountsDetails_DataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PUCAccountsDetails_DataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591