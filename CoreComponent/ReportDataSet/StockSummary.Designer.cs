//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CoreComponent.ReportDataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("StockSummary")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class StockSummary : global::System.Data.DataSet {
        
        private StockSummaryDataTableDataTable tableStockSummaryDataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StockSummary() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected StockSummary(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["StockSummaryDataTable"] != null)) {
                    base.Tables.Add(new StockSummaryDataTableDataTable(ds.Tables["StockSummaryDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StockSummaryDataTableDataTable StockSummaryDataTable {
            get {
                return this.tableStockSummaryDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            StockSummary cln = ((StockSummary)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["StockSummaryDataTable"] != null)) {
                    base.Tables.Add(new StockSummaryDataTableDataTable(ds.Tables["StockSummaryDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableStockSummaryDataTable = ((StockSummaryDataTableDataTable)(base.Tables["StockSummaryDataTable"]));
            if ((initTable == true)) {
                if ((this.tableStockSummaryDataTable != null)) {
                    this.tableStockSummaryDataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "StockSummary";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/StockSummary.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableStockSummaryDataTable = new StockSummaryDataTableDataTable();
            base.Tables.Add(this.tableStockSummaryDataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStockSummaryDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            StockSummary ds = new StockSummary();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void StockSummaryDataTableRowChangeEventHandler(object sender, StockSummaryDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StockSummaryDataTableDataTable : global::System.Data.TypedTableBase<StockSummaryDataTableRow> {
            
            private global::System.Data.DataColumn columnSerialNo;
            
            private global::System.Data.DataColumn columnItemCode;
            
            private global::System.Data.DataColumn columnItemName;
            
            private global::System.Data.DataColumn columnOpeningQty;
            
            private global::System.Data.DataColumn columnTIQty;
            
            private global::System.Data.DataColumn columnSoldQty;
            
            private global::System.Data.DataColumn columnComposite;
            
            private global::System.Data.DataColumn columnSTNQty;
            
            private global::System.Data.DataColumn columnAdjQty;
            
            private global::System.Data.DataColumn columnDamagedQty;
            
            private global::System.Data.DataColumn columnBalanceQty;
            
            private global::System.Data.DataColumn columnHeaderAddress;
            
            private global::System.Data.DataColumn columnAddressText;
            
            private global::System.Data.DataColumn columnFromDateText;
            
            private global::System.Data.DataColumn columnToDateText;
            
            private global::System.Data.DataColumn columnBucket;
            
            private global::System.Data.DataColumn columnLocationName;
            
            private global::System.Data.DataColumn columnPackHeaderQty;
            
            private global::System.Data.DataColumn columnUnPackHeaderQty;
            
            private global::System.Data.DataColumn columnPackChildQty;
            
            private global::System.Data.DataColumn columnUnPackChildQty;
            
            private global::System.Data.DataColumn columnGRNQty;
            
            private global::System.Data.DataColumn columnRTVQty;
            
            private global::System.Data.DataColumn columnCustomerReturnQty;
            
            private global::System.Data.DataColumn columnExportSub;
            
            private global::System.Data.DataColumn columnExportAdd;
            
            private global::System.Data.DataColumn columnTOEXP;
            
            private global::System.Data.DataColumn columnTIEXP;
            
            private global::System.Data.DataColumn columnReasonCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockSummaryDataTableDataTable() {
                this.TableName = "StockSummaryDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockSummaryDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StockSummaryDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SerialNoColumn {
                get {
                    return this.columnSerialNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemCodeColumn {
                get {
                    return this.columnItemCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemNameColumn {
                get {
                    return this.columnItemName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OpeningQtyColumn {
                get {
                    return this.columnOpeningQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIQtyColumn {
                get {
                    return this.columnTIQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SoldQtyColumn {
                get {
                    return this.columnSoldQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompositeColumn {
                get {
                    return this.columnComposite;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STNQtyColumn {
                get {
                    return this.columnSTNQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjQtyColumn {
                get {
                    return this.columnAdjQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DamagedQtyColumn {
                get {
                    return this.columnDamagedQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BalanceQtyColumn {
                get {
                    return this.columnBalanceQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeaderAddressColumn {
                get {
                    return this.columnHeaderAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressTextColumn {
                get {
                    return this.columnAddressText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateTextColumn {
                get {
                    return this.columnFromDateText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDateTextColumn {
                get {
                    return this.columnToDateText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BucketColumn {
                get {
                    return this.columnBucket;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationNameColumn {
                get {
                    return this.columnLocationName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PackHeaderQtyColumn {
                get {
                    return this.columnPackHeaderQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnPackHeaderQtyColumn {
                get {
                    return this.columnUnPackHeaderQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PackChildQtyColumn {
                get {
                    return this.columnPackChildQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnPackChildQtyColumn {
                get {
                    return this.columnUnPackChildQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GRNQtyColumn {
                get {
                    return this.columnGRNQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RTVQtyColumn {
                get {
                    return this.columnRTVQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerReturnQtyColumn {
                get {
                    return this.columnCustomerReturnQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExportSubColumn {
                get {
                    return this.columnExportSub;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExportAddColumn {
                get {
                    return this.columnExportAdd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOEXPColumn {
                get {
                    return this.columnTOEXP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIEXPColumn {
                get {
                    return this.columnTIEXP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReasonCodeColumn {
                get {
                    return this.columnReasonCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockSummaryDataTableRow this[int index] {
                get {
                    return ((StockSummaryDataTableRow)(this.Rows[index]));
                }
            }
            
            public event StockSummaryDataTableRowChangeEventHandler StockSummaryDataTableRowChanging;
            
            public event StockSummaryDataTableRowChangeEventHandler StockSummaryDataTableRowChanged;
            
            public event StockSummaryDataTableRowChangeEventHandler StockSummaryDataTableRowDeleting;
            
            public event StockSummaryDataTableRowChangeEventHandler StockSummaryDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStockSummaryDataTableRow(StockSummaryDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockSummaryDataTableRow AddStockSummaryDataTableRow(
                        string SerialNo, 
                        string ItemCode, 
                        string ItemName, 
                        string OpeningQty, 
                        string TIQty, 
                        string SoldQty, 
                        string Composite, 
                        string STNQty, 
                        string AdjQty, 
                        string DamagedQty, 
                        string BalanceQty, 
                        string HeaderAddress, 
                        string AddressText, 
                        string FromDateText, 
                        string ToDateText, 
                        string Bucket, 
                        string LocationName, 
                        string PackHeaderQty, 
                        string UnPackHeaderQty, 
                        string PackChildQty, 
                        string UnPackChildQty, 
                        string GRNQty, 
                        string RTVQty, 
                        string CustomerReturnQty, 
                        string ExportSub, 
                        string ExportAdd, 
                        string TOEXP, 
                        string TIEXP, 
                        string ReasonCode) {
                StockSummaryDataTableRow rowStockSummaryDataTableRow = ((StockSummaryDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SerialNo,
                        ItemCode,
                        ItemName,
                        OpeningQty,
                        TIQty,
                        SoldQty,
                        Composite,
                        STNQty,
                        AdjQty,
                        DamagedQty,
                        BalanceQty,
                        HeaderAddress,
                        AddressText,
                        FromDateText,
                        ToDateText,
                        Bucket,
                        LocationName,
                        PackHeaderQty,
                        UnPackHeaderQty,
                        PackChildQty,
                        UnPackChildQty,
                        GRNQty,
                        RTVQty,
                        CustomerReturnQty,
                        ExportSub,
                        ExportAdd,
                        TOEXP,
                        TIEXP,
                        ReasonCode};
                rowStockSummaryDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStockSummaryDataTableRow);
                return rowStockSummaryDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StockSummaryDataTableDataTable cln = ((StockSummaryDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StockSummaryDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSerialNo = base.Columns["SerialNo"];
                this.columnItemCode = base.Columns["ItemCode"];
                this.columnItemName = base.Columns["ItemName"];
                this.columnOpeningQty = base.Columns["OpeningQty"];
                this.columnTIQty = base.Columns["TIQty"];
                this.columnSoldQty = base.Columns["SoldQty"];
                this.columnComposite = base.Columns["Composite"];
                this.columnSTNQty = base.Columns["STNQty"];
                this.columnAdjQty = base.Columns["AdjQty"];
                this.columnDamagedQty = base.Columns["DamagedQty"];
                this.columnBalanceQty = base.Columns["BalanceQty"];
                this.columnHeaderAddress = base.Columns["HeaderAddress"];
                this.columnAddressText = base.Columns["AddressText"];
                this.columnFromDateText = base.Columns["FromDateText"];
                this.columnToDateText = base.Columns["ToDateText"];
                this.columnBucket = base.Columns["Bucket"];
                this.columnLocationName = base.Columns["LocationName"];
                this.columnPackHeaderQty = base.Columns["PackHeaderQty"];
                this.columnUnPackHeaderQty = base.Columns["UnPackHeaderQty"];
                this.columnPackChildQty = base.Columns["PackChildQty"];
                this.columnUnPackChildQty = base.Columns["UnPackChildQty"];
                this.columnGRNQty = base.Columns["GRNQty"];
                this.columnRTVQty = base.Columns["RTVQty"];
                this.columnCustomerReturnQty = base.Columns["CustomerReturnQty"];
                this.columnExportSub = base.Columns["ExportSub"];
                this.columnExportAdd = base.Columns["ExportAdd"];
                this.columnTOEXP = base.Columns["TOEXP"];
                this.columnTIEXP = base.Columns["TIEXP"];
                this.columnReasonCode = base.Columns["ReasonCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSerialNo = new global::System.Data.DataColumn("SerialNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSerialNo);
                this.columnItemCode = new global::System.Data.DataColumn("ItemCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemCode);
                this.columnItemName = new global::System.Data.DataColumn("ItemName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemName);
                this.columnOpeningQty = new global::System.Data.DataColumn("OpeningQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpeningQty);
                this.columnTIQty = new global::System.Data.DataColumn("TIQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIQty);
                this.columnSoldQty = new global::System.Data.DataColumn("SoldQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoldQty);
                this.columnComposite = new global::System.Data.DataColumn("Composite", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComposite);
                this.columnSTNQty = new global::System.Data.DataColumn("STNQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTNQty);
                this.columnAdjQty = new global::System.Data.DataColumn("AdjQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjQty);
                this.columnDamagedQty = new global::System.Data.DataColumn("DamagedQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDamagedQty);
                this.columnBalanceQty = new global::System.Data.DataColumn("BalanceQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalanceQty);
                this.columnHeaderAddress = new global::System.Data.DataColumn("HeaderAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeaderAddress);
                this.columnAddressText = new global::System.Data.DataColumn("AddressText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddressText);
                this.columnFromDateText = new global::System.Data.DataColumn("FromDateText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDateText);
                this.columnToDateText = new global::System.Data.DataColumn("ToDateText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDateText);
                this.columnBucket = new global::System.Data.DataColumn("Bucket", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBucket);
                this.columnLocationName = new global::System.Data.DataColumn("LocationName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationName);
                this.columnPackHeaderQty = new global::System.Data.DataColumn("PackHeaderQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackHeaderQty);
                this.columnUnPackHeaderQty = new global::System.Data.DataColumn("UnPackHeaderQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnPackHeaderQty);
                this.columnPackChildQty = new global::System.Data.DataColumn("PackChildQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackChildQty);
                this.columnUnPackChildQty = new global::System.Data.DataColumn("UnPackChildQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnPackChildQty);
                this.columnGRNQty = new global::System.Data.DataColumn("GRNQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGRNQty);
                this.columnRTVQty = new global::System.Data.DataColumn("RTVQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRTVQty);
                this.columnCustomerReturnQty = new global::System.Data.DataColumn("CustomerReturnQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerReturnQty);
                this.columnExportSub = new global::System.Data.DataColumn("ExportSub", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExportSub);
                this.columnExportAdd = new global::System.Data.DataColumn("ExportAdd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExportAdd);
                this.columnTOEXP = new global::System.Data.DataColumn("TOEXP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOEXP);
                this.columnTIEXP = new global::System.Data.DataColumn("TIEXP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIEXP);
                this.columnReasonCode = new global::System.Data.DataColumn("ReasonCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReasonCode);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockSummaryDataTableRow NewStockSummaryDataTableRow() {
                return ((StockSummaryDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StockSummaryDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StockSummaryDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StockSummaryDataTableRowChanged != null)) {
                    this.StockSummaryDataTableRowChanged(this, new StockSummaryDataTableRowChangeEvent(((StockSummaryDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StockSummaryDataTableRowChanging != null)) {
                    this.StockSummaryDataTableRowChanging(this, new StockSummaryDataTableRowChangeEvent(((StockSummaryDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StockSummaryDataTableRowDeleted != null)) {
                    this.StockSummaryDataTableRowDeleted(this, new StockSummaryDataTableRowChangeEvent(((StockSummaryDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StockSummaryDataTableRowDeleting != null)) {
                    this.StockSummaryDataTableRowDeleting(this, new StockSummaryDataTableRowChangeEvent(((StockSummaryDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStockSummaryDataTableRow(StockSummaryDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StockSummary ds = new StockSummary();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StockSummaryDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StockSummaryDataTableRow : global::System.Data.DataRow {
            
            private StockSummaryDataTableDataTable tableStockSummaryDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockSummaryDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStockSummaryDataTable = ((StockSummaryDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SerialNo {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.SerialNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SerialNo\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.SerialNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemCode {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.ItemCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemCode\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.ItemCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemName {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.ItemNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemName\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.ItemNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OpeningQty {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.OpeningQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OpeningQty\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.OpeningQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIQty {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.TIQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TIQty\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.TIQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SoldQty {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.SoldQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SoldQty\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.SoldQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Composite {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.CompositeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Composite\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.CompositeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STNQty {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.STNQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STNQty\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.STNQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjQty {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.AdjQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjQty\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.AdjQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DamagedQty {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.DamagedQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DamagedQty\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.DamagedQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BalanceQty {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.BalanceQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BalanceQty\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.BalanceQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HeaderAddress {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.HeaderAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeaderAddress\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.HeaderAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddressText {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.AddressTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AddressText\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.AddressTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDateText {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.FromDateTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDateText\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.FromDateTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToDateText {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.ToDateTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToDateText\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.ToDateTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bucket {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.BucketColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bucket\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.BucketColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationName {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.LocationNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationName\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.LocationNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PackHeaderQty {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.PackHeaderQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PackHeaderQty\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.PackHeaderQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnPackHeaderQty {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.UnPackHeaderQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnPackHeaderQty\' in table \'StockSummaryDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.UnPackHeaderQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PackChildQty {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.PackChildQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PackChildQty\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.PackChildQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnPackChildQty {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.UnPackChildQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnPackChildQty\' in table \'StockSummaryDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.UnPackChildQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GRNQty {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.GRNQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GRNQty\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.GRNQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RTVQty {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.RTVQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RTVQty\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.RTVQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerReturnQty {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.CustomerReturnQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerReturnQty\' in table \'StockSummaryDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.CustomerReturnQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExportSub {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.ExportSubColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExportSub\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.ExportSubColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExportAdd {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.ExportAddColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExportAdd\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.ExportAddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOEXP {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.TOEXPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOEXP\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.TOEXPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIEXP {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.TIEXPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TIEXP\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.TIEXPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReasonCode {
                get {
                    try {
                        return ((string)(this[this.tableStockSummaryDataTable.ReasonCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReasonCode\' in table \'StockSummaryDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStockSummaryDataTable.ReasonCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSerialNoNull() {
                return this.IsNull(this.tableStockSummaryDataTable.SerialNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSerialNoNull() {
                this[this.tableStockSummaryDataTable.SerialNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemCodeNull() {
                return this.IsNull(this.tableStockSummaryDataTable.ItemCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemCodeNull() {
                this[this.tableStockSummaryDataTable.ItemCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNameNull() {
                return this.IsNull(this.tableStockSummaryDataTable.ItemNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNameNull() {
                this[this.tableStockSummaryDataTable.ItemNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpeningQtyNull() {
                return this.IsNull(this.tableStockSummaryDataTable.OpeningQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOpeningQtyNull() {
                this[this.tableStockSummaryDataTable.OpeningQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIQtyNull() {
                return this.IsNull(this.tableStockSummaryDataTable.TIQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIQtyNull() {
                this[this.tableStockSummaryDataTable.TIQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSoldQtyNull() {
                return this.IsNull(this.tableStockSummaryDataTable.SoldQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSoldQtyNull() {
                this[this.tableStockSummaryDataTable.SoldQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompositeNull() {
                return this.IsNull(this.tableStockSummaryDataTable.CompositeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompositeNull() {
                this[this.tableStockSummaryDataTable.CompositeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTNQtyNull() {
                return this.IsNull(this.tableStockSummaryDataTable.STNQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTNQtyNull() {
                this[this.tableStockSummaryDataTable.STNQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjQtyNull() {
                return this.IsNull(this.tableStockSummaryDataTable.AdjQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjQtyNull() {
                this[this.tableStockSummaryDataTable.AdjQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDamagedQtyNull() {
                return this.IsNull(this.tableStockSummaryDataTable.DamagedQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDamagedQtyNull() {
                this[this.tableStockSummaryDataTable.DamagedQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBalanceQtyNull() {
                return this.IsNull(this.tableStockSummaryDataTable.BalanceQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBalanceQtyNull() {
                this[this.tableStockSummaryDataTable.BalanceQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeaderAddressNull() {
                return this.IsNull(this.tableStockSummaryDataTable.HeaderAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeaderAddressNull() {
                this[this.tableStockSummaryDataTable.HeaderAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressTextNull() {
                return this.IsNull(this.tableStockSummaryDataTable.AddressTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressTextNull() {
                this[this.tableStockSummaryDataTable.AddressTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateTextNull() {
                return this.IsNull(this.tableStockSummaryDataTable.FromDateTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateTextNull() {
                this[this.tableStockSummaryDataTable.FromDateTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToDateTextNull() {
                return this.IsNull(this.tableStockSummaryDataTable.ToDateTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToDateTextNull() {
                this[this.tableStockSummaryDataTable.ToDateTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBucketNull() {
                return this.IsNull(this.tableStockSummaryDataTable.BucketColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBucketNull() {
                this[this.tableStockSummaryDataTable.BucketColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNameNull() {
                return this.IsNull(this.tableStockSummaryDataTable.LocationNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNameNull() {
                this[this.tableStockSummaryDataTable.LocationNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPackHeaderQtyNull() {
                return this.IsNull(this.tableStockSummaryDataTable.PackHeaderQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPackHeaderQtyNull() {
                this[this.tableStockSummaryDataTable.PackHeaderQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnPackHeaderQtyNull() {
                return this.IsNull(this.tableStockSummaryDataTable.UnPackHeaderQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnPackHeaderQtyNull() {
                this[this.tableStockSummaryDataTable.UnPackHeaderQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPackChildQtyNull() {
                return this.IsNull(this.tableStockSummaryDataTable.PackChildQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPackChildQtyNull() {
                this[this.tableStockSummaryDataTable.PackChildQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnPackChildQtyNull() {
                return this.IsNull(this.tableStockSummaryDataTable.UnPackChildQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnPackChildQtyNull() {
                this[this.tableStockSummaryDataTable.UnPackChildQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGRNQtyNull() {
                return this.IsNull(this.tableStockSummaryDataTable.GRNQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGRNQtyNull() {
                this[this.tableStockSummaryDataTable.GRNQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRTVQtyNull() {
                return this.IsNull(this.tableStockSummaryDataTable.RTVQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRTVQtyNull() {
                this[this.tableStockSummaryDataTable.RTVQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerReturnQtyNull() {
                return this.IsNull(this.tableStockSummaryDataTable.CustomerReturnQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerReturnQtyNull() {
                this[this.tableStockSummaryDataTable.CustomerReturnQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExportSubNull() {
                return this.IsNull(this.tableStockSummaryDataTable.ExportSubColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExportSubNull() {
                this[this.tableStockSummaryDataTable.ExportSubColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExportAddNull() {
                return this.IsNull(this.tableStockSummaryDataTable.ExportAddColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExportAddNull() {
                this[this.tableStockSummaryDataTable.ExportAddColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOEXPNull() {
                return this.IsNull(this.tableStockSummaryDataTable.TOEXPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOEXPNull() {
                this[this.tableStockSummaryDataTable.TOEXPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIEXPNull() {
                return this.IsNull(this.tableStockSummaryDataTable.TIEXPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIEXPNull() {
                this[this.tableStockSummaryDataTable.TIEXPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReasonCodeNull() {
                return this.IsNull(this.tableStockSummaryDataTable.ReasonCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReasonCodeNull() {
                this[this.tableStockSummaryDataTable.ReasonCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StockSummaryDataTableRowChangeEvent : global::System.EventArgs {
            
            private StockSummaryDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockSummaryDataTableRowChangeEvent(StockSummaryDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockSummaryDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591