//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CoreComponent.ReportDataSet.ScreenReportDataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("TOExportInvoice")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TOExportInvoice : global::System.Data.DataSet {
        
        private TOExportScreenHeaderDataTableDataTable tableTOExportScreenHeaderDataTable;
        
        private TOExportScreenDetailDataTableDataTable tableTOExportScreenDetailDataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TOExportInvoice() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TOExportInvoice(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TOExportScreenHeaderDataTable"] != null)) {
                    base.Tables.Add(new TOExportScreenHeaderDataTableDataTable(ds.Tables["TOExportScreenHeaderDataTable"]));
                }
                if ((ds.Tables["TOExportScreenDetailDataTable"] != null)) {
                    base.Tables.Add(new TOExportScreenDetailDataTableDataTable(ds.Tables["TOExportScreenDetailDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TOExportScreenHeaderDataTableDataTable TOExportScreenHeaderDataTable {
            get {
                return this.tableTOExportScreenHeaderDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TOExportScreenDetailDataTableDataTable TOExportScreenDetailDataTable {
            get {
                return this.tableTOExportScreenDetailDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            TOExportInvoice cln = ((TOExportInvoice)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TOExportScreenHeaderDataTable"] != null)) {
                    base.Tables.Add(new TOExportScreenHeaderDataTableDataTable(ds.Tables["TOExportScreenHeaderDataTable"]));
                }
                if ((ds.Tables["TOExportScreenDetailDataTable"] != null)) {
                    base.Tables.Add(new TOExportScreenDetailDataTableDataTable(ds.Tables["TOExportScreenDetailDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTOExportScreenHeaderDataTable = ((TOExportScreenHeaderDataTableDataTable)(base.Tables["TOExportScreenHeaderDataTable"]));
            if ((initTable == true)) {
                if ((this.tableTOExportScreenHeaderDataTable != null)) {
                    this.tableTOExportScreenHeaderDataTable.InitVars();
                }
            }
            this.tableTOExportScreenDetailDataTable = ((TOExportScreenDetailDataTableDataTable)(base.Tables["TOExportScreenDetailDataTable"]));
            if ((initTable == true)) {
                if ((this.tableTOExportScreenDetailDataTable != null)) {
                    this.tableTOExportScreenDetailDataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TOExportInvoice";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TOExportInvoice.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTOExportScreenHeaderDataTable = new TOExportScreenHeaderDataTableDataTable();
            base.Tables.Add(this.tableTOExportScreenHeaderDataTable);
            this.tableTOExportScreenDetailDataTable = new TOExportScreenDetailDataTableDataTable();
            base.Tables.Add(this.tableTOExportScreenDetailDataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTOExportScreenHeaderDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTOExportScreenDetailDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            TOExportInvoice ds = new TOExportInvoice();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TOExportScreenHeaderDataTableRowChangeEventHandler(object sender, TOExportScreenHeaderDataTableRowChangeEvent e);
        
        public delegate void TOExportScreenDetailDataTableRowChangeEventHandler(object sender, TOExportScreenDetailDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TOExportScreenHeaderDataTableDataTable : global::System.Data.TypedTableBase<TOExportScreenHeaderDataTableRow> {
            
            private global::System.Data.DataColumn columnTONumber;
            
            private global::System.Data.DataColumn columnTOINumber;
            
            private global::System.Data.DataColumn columnSourceLocation;
            
            private global::System.Data.DataColumn columnDestinationLocation;
            
            private global::System.Data.DataColumn columnSourceAddress;
            
            private global::System.Data.DataColumn columnDestinationAddress;
            
            private global::System.Data.DataColumn columnSourceTINNo;
            
            private global::System.Data.DataColumn columnExporterRef;
            
            private global::System.Data.DataColumn columnOtherRef;
            
            private global::System.Data.DataColumn columnBuyerOtherthanConsignee;
            
            private global::System.Data.DataColumn columnPreCarriage;
            
            private global::System.Data.DataColumn columnPlaceofReceiptbyPreCarrier;
            
            private global::System.Data.DataColumn columnCountryOfOrigin;
            
            private global::System.Data.DataColumn columnCountryOfDestination;
            
            private global::System.Data.DataColumn columnVesselflightNo;
            
            private global::System.Data.DataColumn columnPortofLoading;
            
            private global::System.Data.DataColumn columnPortofDischarge;
            
            private global::System.Data.DataColumn columnPortofDestination;
            
            private global::System.Data.DataColumn columnTermsofDelivery;
            
            private global::System.Data.DataColumn columnDELIVERY;
            
            private global::System.Data.DataColumn columnPAYMENT;
            
            private global::System.Data.DataColumn columnIECCode;
            
            private global::System.Data.DataColumn columnTOCreationDate;
            
            private global::System.Data.DataColumn columnTOIDate;
            
            private global::System.Data.DataColumn columnBuyerOrderNo;
            
            private global::System.Data.DataColumn columnBuyerOrderDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOExportScreenHeaderDataTableDataTable() {
                this.TableName = "TOExportScreenHeaderDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TOExportScreenHeaderDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TOExportScreenHeaderDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TONumberColumn {
                get {
                    return this.columnTONumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOINumberColumn {
                get {
                    return this.columnTOINumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceLocationColumn {
                get {
                    return this.columnSourceLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationLocationColumn {
                get {
                    return this.columnDestinationLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceAddressColumn {
                get {
                    return this.columnSourceAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationAddressColumn {
                get {
                    return this.columnDestinationAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceTINNoColumn {
                get {
                    return this.columnSourceTINNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExporterRefColumn {
                get {
                    return this.columnExporterRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherRefColumn {
                get {
                    return this.columnOtherRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyerOtherthanConsigneeColumn {
                get {
                    return this.columnBuyerOtherthanConsignee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreCarriageColumn {
                get {
                    return this.columnPreCarriage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlaceofReceiptbyPreCarrierColumn {
                get {
                    return this.columnPlaceofReceiptbyPreCarrier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryOfOriginColumn {
                get {
                    return this.columnCountryOfOrigin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryOfDestinationColumn {
                get {
                    return this.columnCountryOfDestination;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VesselflightNoColumn {
                get {
                    return this.columnVesselflightNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortofLoadingColumn {
                get {
                    return this.columnPortofLoading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortofDischargeColumn {
                get {
                    return this.columnPortofDischarge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortofDestinationColumn {
                get {
                    return this.columnPortofDestination;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TermsofDeliveryColumn {
                get {
                    return this.columnTermsofDelivery;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DELIVERYColumn {
                get {
                    return this.columnDELIVERY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAYMENTColumn {
                get {
                    return this.columnPAYMENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IECCodeColumn {
                get {
                    return this.columnIECCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOCreationDateColumn {
                get {
                    return this.columnTOCreationDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOIDateColumn {
                get {
                    return this.columnTOIDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyerOrderNoColumn {
                get {
                    return this.columnBuyerOrderNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyerOrderDateColumn {
                get {
                    return this.columnBuyerOrderDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOExportScreenHeaderDataTableRow this[int index] {
                get {
                    return ((TOExportScreenHeaderDataTableRow)(this.Rows[index]));
                }
            }
            
            public event TOExportScreenHeaderDataTableRowChangeEventHandler TOExportScreenHeaderDataTableRowChanging;
            
            public event TOExportScreenHeaderDataTableRowChangeEventHandler TOExportScreenHeaderDataTableRowChanged;
            
            public event TOExportScreenHeaderDataTableRowChangeEventHandler TOExportScreenHeaderDataTableRowDeleting;
            
            public event TOExportScreenHeaderDataTableRowChangeEventHandler TOExportScreenHeaderDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTOExportScreenHeaderDataTableRow(TOExportScreenHeaderDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOExportScreenHeaderDataTableRow AddTOExportScreenHeaderDataTableRow(
                        string TONumber, 
                        string TOINumber, 
                        string SourceLocation, 
                        string DestinationLocation, 
                        string SourceAddress, 
                        string DestinationAddress, 
                        string SourceTINNo, 
                        string ExporterRef, 
                        string OtherRef, 
                        string BuyerOtherthanConsignee, 
                        string PreCarriage, 
                        string PlaceofReceiptbyPreCarrier, 
                        string CountryOfOrigin, 
                        string CountryOfDestination, 
                        string VesselflightNo, 
                        string PortofLoading, 
                        string PortofDischarge, 
                        string PortofDestination, 
                        string TermsofDelivery, 
                        string DELIVERY, 
                        string PAYMENT, 
                        string IECCode, 
                        string TOCreationDate, 
                        string TOIDate, 
                        string BuyerOrderNo, 
                        string BuyerOrderDate) {
                TOExportScreenHeaderDataTableRow rowTOExportScreenHeaderDataTableRow = ((TOExportScreenHeaderDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TONumber,
                        TOINumber,
                        SourceLocation,
                        DestinationLocation,
                        SourceAddress,
                        DestinationAddress,
                        SourceTINNo,
                        ExporterRef,
                        OtherRef,
                        BuyerOtherthanConsignee,
                        PreCarriage,
                        PlaceofReceiptbyPreCarrier,
                        CountryOfOrigin,
                        CountryOfDestination,
                        VesselflightNo,
                        PortofLoading,
                        PortofDischarge,
                        PortofDestination,
                        TermsofDelivery,
                        DELIVERY,
                        PAYMENT,
                        IECCode,
                        TOCreationDate,
                        TOIDate,
                        BuyerOrderNo,
                        BuyerOrderDate};
                rowTOExportScreenHeaderDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTOExportScreenHeaderDataTableRow);
                return rowTOExportScreenHeaderDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TOExportScreenHeaderDataTableDataTable cln = ((TOExportScreenHeaderDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TOExportScreenHeaderDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTONumber = base.Columns["TONumber"];
                this.columnTOINumber = base.Columns["TOINumber"];
                this.columnSourceLocation = base.Columns["SourceLocation"];
                this.columnDestinationLocation = base.Columns["DestinationLocation"];
                this.columnSourceAddress = base.Columns["SourceAddress"];
                this.columnDestinationAddress = base.Columns["DestinationAddress"];
                this.columnSourceTINNo = base.Columns["SourceTINNo"];
                this.columnExporterRef = base.Columns["ExporterRef"];
                this.columnOtherRef = base.Columns["OtherRef"];
                this.columnBuyerOtherthanConsignee = base.Columns["BuyerOtherthanConsignee"];
                this.columnPreCarriage = base.Columns["PreCarriage"];
                this.columnPlaceofReceiptbyPreCarrier = base.Columns["PlaceofReceiptbyPreCarrier"];
                this.columnCountryOfOrigin = base.Columns["CountryOfOrigin"];
                this.columnCountryOfDestination = base.Columns["CountryOfDestination"];
                this.columnVesselflightNo = base.Columns["VesselflightNo"];
                this.columnPortofLoading = base.Columns["PortofLoading"];
                this.columnPortofDischarge = base.Columns["PortofDischarge"];
                this.columnPortofDestination = base.Columns["PortofDestination"];
                this.columnTermsofDelivery = base.Columns["TermsofDelivery"];
                this.columnDELIVERY = base.Columns["DELIVERY"];
                this.columnPAYMENT = base.Columns["PAYMENT"];
                this.columnIECCode = base.Columns["IECCode"];
                this.columnTOCreationDate = base.Columns["TOCreationDate"];
                this.columnTOIDate = base.Columns["TOIDate"];
                this.columnBuyerOrderNo = base.Columns["BuyerOrderNo"];
                this.columnBuyerOrderDate = base.Columns["BuyerOrderDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTONumber = new global::System.Data.DataColumn("TONumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTONumber);
                this.columnTOINumber = new global::System.Data.DataColumn("TOINumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOINumber);
                this.columnSourceLocation = new global::System.Data.DataColumn("SourceLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceLocation);
                this.columnDestinationLocation = new global::System.Data.DataColumn("DestinationLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationLocation);
                this.columnSourceAddress = new global::System.Data.DataColumn("SourceAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceAddress);
                this.columnDestinationAddress = new global::System.Data.DataColumn("DestinationAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationAddress);
                this.columnSourceTINNo = new global::System.Data.DataColumn("SourceTINNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceTINNo);
                this.columnExporterRef = new global::System.Data.DataColumn("ExporterRef", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExporterRef);
                this.columnOtherRef = new global::System.Data.DataColumn("OtherRef", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherRef);
                this.columnBuyerOtherthanConsignee = new global::System.Data.DataColumn("BuyerOtherthanConsignee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyerOtherthanConsignee);
                this.columnPreCarriage = new global::System.Data.DataColumn("PreCarriage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreCarriage);
                this.columnPlaceofReceiptbyPreCarrier = new global::System.Data.DataColumn("PlaceofReceiptbyPreCarrier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlaceofReceiptbyPreCarrier);
                this.columnCountryOfOrigin = new global::System.Data.DataColumn("CountryOfOrigin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryOfOrigin);
                this.columnCountryOfDestination = new global::System.Data.DataColumn("CountryOfDestination", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryOfDestination);
                this.columnVesselflightNo = new global::System.Data.DataColumn("VesselflightNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVesselflightNo);
                this.columnPortofLoading = new global::System.Data.DataColumn("PortofLoading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortofLoading);
                this.columnPortofDischarge = new global::System.Data.DataColumn("PortofDischarge", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortofDischarge);
                this.columnPortofDestination = new global::System.Data.DataColumn("PortofDestination", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortofDestination);
                this.columnTermsofDelivery = new global::System.Data.DataColumn("TermsofDelivery", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTermsofDelivery);
                this.columnDELIVERY = new global::System.Data.DataColumn("DELIVERY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDELIVERY);
                this.columnPAYMENT = new global::System.Data.DataColumn("PAYMENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAYMENT);
                this.columnIECCode = new global::System.Data.DataColumn("IECCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIECCode);
                this.columnTOCreationDate = new global::System.Data.DataColumn("TOCreationDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOCreationDate);
                this.columnTOIDate = new global::System.Data.DataColumn("TOIDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOIDate);
                this.columnBuyerOrderNo = new global::System.Data.DataColumn("BuyerOrderNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyerOrderNo);
                this.columnBuyerOrderDate = new global::System.Data.DataColumn("BuyerOrderDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyerOrderDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOExportScreenHeaderDataTableRow NewTOExportScreenHeaderDataTableRow() {
                return ((TOExportScreenHeaderDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TOExportScreenHeaderDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TOExportScreenHeaderDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TOExportScreenHeaderDataTableRowChanged != null)) {
                    this.TOExportScreenHeaderDataTableRowChanged(this, new TOExportScreenHeaderDataTableRowChangeEvent(((TOExportScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TOExportScreenHeaderDataTableRowChanging != null)) {
                    this.TOExportScreenHeaderDataTableRowChanging(this, new TOExportScreenHeaderDataTableRowChangeEvent(((TOExportScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TOExportScreenHeaderDataTableRowDeleted != null)) {
                    this.TOExportScreenHeaderDataTableRowDeleted(this, new TOExportScreenHeaderDataTableRowChangeEvent(((TOExportScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TOExportScreenHeaderDataTableRowDeleting != null)) {
                    this.TOExportScreenHeaderDataTableRowDeleting(this, new TOExportScreenHeaderDataTableRowChangeEvent(((TOExportScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTOExportScreenHeaderDataTableRow(TOExportScreenHeaderDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TOExportInvoice ds = new TOExportInvoice();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TOExportScreenHeaderDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TOExportScreenDetailDataTableDataTable : global::System.Data.TypedTableBase<TOExportScreenDetailDataTableRow> {
            
            private global::System.Data.DataColumn columnRowNo;
            
            private global::System.Data.DataColumn columnItemId;
            
            private global::System.Data.DataColumn columnItemCode;
            
            private global::System.Data.DataColumn columnItemDescription;
            
            private global::System.Data.DataColumn columnRequestQty;
            
            private global::System.Data.DataColumn columnUOMId;
            
            private global::System.Data.DataColumn columnTransferPrice;
            
            private global::System.Data.DataColumn columnBucketId;
            
            private global::System.Data.DataColumn columnTotalAmount;
            
            private global::System.Data.DataColumn columnTOINumber;
            
            private global::System.Data.DataColumn columnUOMName;
            
            private global::System.Data.DataColumn columnBucketName;
            
            private global::System.Data.DataColumn columnAfterAdjustQty;
            
            private global::System.Data.DataColumn columnBatchNo;
            
            private global::System.Data.DataColumn columnMfgDate;
            
            private global::System.Data.DataColumn columnExpDate;
            
            private global::System.Data.DataColumn columnManufactureBatchNo;
            
            private global::System.Data.DataColumn columnMRP;
            
            private global::System.Data.DataColumn columnAvailableQty;
            
            private global::System.Data.DataColumn columnWeight;
            
            private global::System.Data.DataColumn columnEachCartonQty;
            
            private global::System.Data.DataColumn columnContainerNOFromTo;
            
            private global::System.Data.DataColumn columnGrossWeightItem;
            
            private global::System.Data.DataColumn columnItemPackSize;
            
            private global::System.Data.DataColumn columnItemDesc;
            
            private global::System.Data.DataColumn columnDateFormatDesc;
            
            private global::System.Data.DataColumn columnExpDuration;
            
            private global::System.Data.DataColumn columnMerchHierarchyDetailId;
            
            private global::System.Data.DataColumn columnSumGrossWeight;
            
            private global::System.Data.DataColumn columnPackSize;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOExportScreenDetailDataTableDataTable() {
                this.TableName = "TOExportScreenDetailDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TOExportScreenDetailDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TOExportScreenDetailDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowNoColumn {
                get {
                    return this.columnRowNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemIdColumn {
                get {
                    return this.columnItemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemCodeColumn {
                get {
                    return this.columnItemCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemDescriptionColumn {
                get {
                    return this.columnItemDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestQtyColumn {
                get {
                    return this.columnRequestQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UOMIdColumn {
                get {
                    return this.columnUOMId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransferPriceColumn {
                get {
                    return this.columnTransferPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BucketIdColumn {
                get {
                    return this.columnBucketId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAmountColumn {
                get {
                    return this.columnTotalAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOINumberColumn {
                get {
                    return this.columnTOINumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UOMNameColumn {
                get {
                    return this.columnUOMName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BucketNameColumn {
                get {
                    return this.columnBucketName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AfterAdjustQtyColumn {
                get {
                    return this.columnAfterAdjustQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatchNoColumn {
                get {
                    return this.columnBatchNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MfgDateColumn {
                get {
                    return this.columnMfgDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpDateColumn {
                get {
                    return this.columnExpDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufactureBatchNoColumn {
                get {
                    return this.columnManufactureBatchNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MRPColumn {
                get {
                    return this.columnMRP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvailableQtyColumn {
                get {
                    return this.columnAvailableQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EachCartonQtyColumn {
                get {
                    return this.columnEachCartonQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContainerNOFromToColumn {
                get {
                    return this.columnContainerNOFromTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossWeightItemColumn {
                get {
                    return this.columnGrossWeightItem;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemPackSizeColumn {
                get {
                    return this.columnItemPackSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemDescColumn {
                get {
                    return this.columnItemDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateFormatDescColumn {
                get {
                    return this.columnDateFormatDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpDurationColumn {
                get {
                    return this.columnExpDuration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MerchHierarchyDetailIdColumn {
                get {
                    return this.columnMerchHierarchyDetailId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumGrossWeightColumn {
                get {
                    return this.columnSumGrossWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PackSizeColumn {
                get {
                    return this.columnPackSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOExportScreenDetailDataTableRow this[int index] {
                get {
                    return ((TOExportScreenDetailDataTableRow)(this.Rows[index]));
                }
            }
            
            public event TOExportScreenDetailDataTableRowChangeEventHandler TOExportScreenDetailDataTableRowChanging;
            
            public event TOExportScreenDetailDataTableRowChangeEventHandler TOExportScreenDetailDataTableRowChanged;
            
            public event TOExportScreenDetailDataTableRowChangeEventHandler TOExportScreenDetailDataTableRowDeleting;
            
            public event TOExportScreenDetailDataTableRowChangeEventHandler TOExportScreenDetailDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTOExportScreenDetailDataTableRow(TOExportScreenDetailDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOExportScreenDetailDataTableRow AddTOExportScreenDetailDataTableRow(
                        string RowNo, 
                        string ItemId, 
                        string ItemCode, 
                        string ItemDescription, 
                        string RequestQty, 
                        string UOMId, 
                        string TransferPrice, 
                        string BucketId, 
                        string TotalAmount, 
                        string TOINumber, 
                        string UOMName, 
                        string BucketName, 
                        string AfterAdjustQty, 
                        string BatchNo, 
                        string MfgDate, 
                        string ExpDate, 
                        string ManufactureBatchNo, 
                        string MRP, 
                        string AvailableQty, 
                        string Weight, 
                        string EachCartonQty, 
                        string ContainerNOFromTo, 
                        string GrossWeightItem, 
                        string ItemPackSize, 
                        string ItemDesc, 
                        string DateFormatDesc, 
                        string ExpDuration, 
                        string MerchHierarchyDetailId, 
                        string SumGrossWeight, 
                        string PackSize) {
                TOExportScreenDetailDataTableRow rowTOExportScreenDetailDataTableRow = ((TOExportScreenDetailDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RowNo,
                        ItemId,
                        ItemCode,
                        ItemDescription,
                        RequestQty,
                        UOMId,
                        TransferPrice,
                        BucketId,
                        TotalAmount,
                        TOINumber,
                        UOMName,
                        BucketName,
                        AfterAdjustQty,
                        BatchNo,
                        MfgDate,
                        ExpDate,
                        ManufactureBatchNo,
                        MRP,
                        AvailableQty,
                        Weight,
                        EachCartonQty,
                        ContainerNOFromTo,
                        GrossWeightItem,
                        ItemPackSize,
                        ItemDesc,
                        DateFormatDesc,
                        ExpDuration,
                        MerchHierarchyDetailId,
                        SumGrossWeight,
                        PackSize};
                rowTOExportScreenDetailDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTOExportScreenDetailDataTableRow);
                return rowTOExportScreenDetailDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TOExportScreenDetailDataTableDataTable cln = ((TOExportScreenDetailDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TOExportScreenDetailDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRowNo = base.Columns["RowNo"];
                this.columnItemId = base.Columns["ItemId"];
                this.columnItemCode = base.Columns["ItemCode"];
                this.columnItemDescription = base.Columns["ItemDescription"];
                this.columnRequestQty = base.Columns["RequestQty"];
                this.columnUOMId = base.Columns["UOMId"];
                this.columnTransferPrice = base.Columns["TransferPrice"];
                this.columnBucketId = base.Columns["BucketId"];
                this.columnTotalAmount = base.Columns["TotalAmount"];
                this.columnTOINumber = base.Columns["TOINumber"];
                this.columnUOMName = base.Columns["UOMName"];
                this.columnBucketName = base.Columns["BucketName"];
                this.columnAfterAdjustQty = base.Columns["AfterAdjustQty"];
                this.columnBatchNo = base.Columns["BatchNo"];
                this.columnMfgDate = base.Columns["MfgDate"];
                this.columnExpDate = base.Columns["ExpDate"];
                this.columnManufactureBatchNo = base.Columns["ManufactureBatchNo"];
                this.columnMRP = base.Columns["MRP"];
                this.columnAvailableQty = base.Columns["AvailableQty"];
                this.columnWeight = base.Columns["Weight"];
                this.columnEachCartonQty = base.Columns["EachCartonQty"];
                this.columnContainerNOFromTo = base.Columns["ContainerNOFromTo"];
                this.columnGrossWeightItem = base.Columns["GrossWeightItem"];
                this.columnItemPackSize = base.Columns["ItemPackSize"];
                this.columnItemDesc = base.Columns["ItemDesc"];
                this.columnDateFormatDesc = base.Columns["DateFormatDesc"];
                this.columnExpDuration = base.Columns["ExpDuration"];
                this.columnMerchHierarchyDetailId = base.Columns["MerchHierarchyDetailId"];
                this.columnSumGrossWeight = base.Columns["SumGrossWeight"];
                this.columnPackSize = base.Columns["PackSize"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRowNo = new global::System.Data.DataColumn("RowNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowNo);
                this.columnItemId = new global::System.Data.DataColumn("ItemId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemId);
                this.columnItemCode = new global::System.Data.DataColumn("ItemCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemCode);
                this.columnItemDescription = new global::System.Data.DataColumn("ItemDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemDescription);
                this.columnRequestQty = new global::System.Data.DataColumn("RequestQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestQty);
                this.columnUOMId = new global::System.Data.DataColumn("UOMId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUOMId);
                this.columnTransferPrice = new global::System.Data.DataColumn("TransferPrice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferPrice);
                this.columnBucketId = new global::System.Data.DataColumn("BucketId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBucketId);
                this.columnTotalAmount = new global::System.Data.DataColumn("TotalAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmount);
                this.columnTOINumber = new global::System.Data.DataColumn("TOINumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOINumber);
                this.columnUOMName = new global::System.Data.DataColumn("UOMName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUOMName);
                this.columnBucketName = new global::System.Data.DataColumn("BucketName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBucketName);
                this.columnAfterAdjustQty = new global::System.Data.DataColumn("AfterAdjustQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAfterAdjustQty);
                this.columnBatchNo = new global::System.Data.DataColumn("BatchNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchNo);
                this.columnMfgDate = new global::System.Data.DataColumn("MfgDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMfgDate);
                this.columnExpDate = new global::System.Data.DataColumn("ExpDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpDate);
                this.columnManufactureBatchNo = new global::System.Data.DataColumn("ManufactureBatchNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufactureBatchNo);
                this.columnMRP = new global::System.Data.DataColumn("MRP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMRP);
                this.columnAvailableQty = new global::System.Data.DataColumn("AvailableQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvailableQty);
                this.columnWeight = new global::System.Data.DataColumn("Weight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeight);
                this.columnEachCartonQty = new global::System.Data.DataColumn("EachCartonQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEachCartonQty);
                this.columnContainerNOFromTo = new global::System.Data.DataColumn("ContainerNOFromTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContainerNOFromTo);
                this.columnGrossWeightItem = new global::System.Data.DataColumn("GrossWeightItem", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossWeightItem);
                this.columnItemPackSize = new global::System.Data.DataColumn("ItemPackSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemPackSize);
                this.columnItemDesc = new global::System.Data.DataColumn("ItemDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemDesc);
                this.columnDateFormatDesc = new global::System.Data.DataColumn("DateFormatDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateFormatDesc);
                this.columnExpDuration = new global::System.Data.DataColumn("ExpDuration", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpDuration);
                this.columnMerchHierarchyDetailId = new global::System.Data.DataColumn("MerchHierarchyDetailId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMerchHierarchyDetailId);
                this.columnSumGrossWeight = new global::System.Data.DataColumn("SumGrossWeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumGrossWeight);
                this.columnPackSize = new global::System.Data.DataColumn("PackSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackSize);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOExportScreenDetailDataTableRow NewTOExportScreenDetailDataTableRow() {
                return ((TOExportScreenDetailDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TOExportScreenDetailDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TOExportScreenDetailDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TOExportScreenDetailDataTableRowChanged != null)) {
                    this.TOExportScreenDetailDataTableRowChanged(this, new TOExportScreenDetailDataTableRowChangeEvent(((TOExportScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TOExportScreenDetailDataTableRowChanging != null)) {
                    this.TOExportScreenDetailDataTableRowChanging(this, new TOExportScreenDetailDataTableRowChangeEvent(((TOExportScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TOExportScreenDetailDataTableRowDeleted != null)) {
                    this.TOExportScreenDetailDataTableRowDeleted(this, new TOExportScreenDetailDataTableRowChangeEvent(((TOExportScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TOExportScreenDetailDataTableRowDeleting != null)) {
                    this.TOExportScreenDetailDataTableRowDeleting(this, new TOExportScreenDetailDataTableRowChangeEvent(((TOExportScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTOExportScreenDetailDataTableRow(TOExportScreenDetailDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TOExportInvoice ds = new TOExportInvoice();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TOExportScreenDetailDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TOExportScreenHeaderDataTableRow : global::System.Data.DataRow {
            
            private TOExportScreenHeaderDataTableDataTable tableTOExportScreenHeaderDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TOExportScreenHeaderDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTOExportScreenHeaderDataTable = ((TOExportScreenHeaderDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TONumber {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.TONumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TONumber\' in table \'TOExportScreenHeaderDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.TONumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOINumber {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.TOINumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOINumber\' in table \'TOExportScreenHeaderDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.TOINumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceLocation {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.SourceLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceLocation\' in table \'TOExportScreenHeaderDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.SourceLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationLocation {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.DestinationLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationLocation\' in table \'TOExportScreenHeaderDataTabl" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.DestinationLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceAddress {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.SourceAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceAddress\' in table \'TOExportScreenHeaderDataTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.SourceAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationAddress {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.DestinationAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationAddress\' in table \'TOExportScreenHeaderDataTable" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.DestinationAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceTINNo {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.SourceTINNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceTINNo\' in table \'TOExportScreenHeaderDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.SourceTINNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExporterRef {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.ExporterRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExporterRef\' in table \'TOExportScreenHeaderDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.ExporterRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OtherRef {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.OtherRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherRef\' in table \'TOExportScreenHeaderDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.OtherRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyerOtherthanConsignee {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.BuyerOtherthanConsigneeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyerOtherthanConsignee\' in table \'TOExportScreenHeaderData" +
                                "Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.BuyerOtherthanConsigneeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreCarriage {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.PreCarriageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreCarriage\' in table \'TOExportScreenHeaderDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.PreCarriageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlaceofReceiptbyPreCarrier {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.PlaceofReceiptbyPreCarrierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlaceofReceiptbyPreCarrier\' in table \'TOExportScreenHeaderD" +
                                "ataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.PlaceofReceiptbyPreCarrierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryOfOrigin {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.CountryOfOriginColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountryOfOrigin\' in table \'TOExportScreenHeaderDataTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.CountryOfOriginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryOfDestination {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.CountryOfDestinationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountryOfDestination\' in table \'TOExportScreenHeaderDataTab" +
                                "le\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.CountryOfDestinationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VesselflightNo {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.VesselflightNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VesselflightNo\' in table \'TOExportScreenHeaderDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.VesselflightNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortofLoading {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.PortofLoadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortofLoading\' in table \'TOExportScreenHeaderDataTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.PortofLoadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortofDischarge {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.PortofDischargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortofDischarge\' in table \'TOExportScreenHeaderDataTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.PortofDischargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortofDestination {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.PortofDestinationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortofDestination\' in table \'TOExportScreenHeaderDataTable\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.PortofDestinationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TermsofDelivery {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.TermsofDeliveryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TermsofDelivery\' in table \'TOExportScreenHeaderDataTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.TermsofDeliveryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DELIVERY {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.DELIVERYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DELIVERY\' in table \'TOExportScreenHeaderDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.DELIVERYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAYMENT {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.PAYMENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAYMENT\' in table \'TOExportScreenHeaderDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.PAYMENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IECCode {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.IECCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IECCode\' in table \'TOExportScreenHeaderDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.IECCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOCreationDate {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.TOCreationDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOCreationDate\' in table \'TOExportScreenHeaderDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.TOCreationDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOIDate {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.TOIDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOIDate\' in table \'TOExportScreenHeaderDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.TOIDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyerOrderNo {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.BuyerOrderNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyerOrderNo\' in table \'TOExportScreenHeaderDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.BuyerOrderNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyerOrderDate {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenHeaderDataTable.BuyerOrderDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyerOrderDate\' in table \'TOExportScreenHeaderDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenHeaderDataTable.BuyerOrderDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTONumberNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.TONumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTONumberNull() {
                this[this.tableTOExportScreenHeaderDataTable.TONumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOINumberNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.TOINumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOINumberNull() {
                this[this.tableTOExportScreenHeaderDataTable.TOINumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceLocationNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.SourceLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceLocationNull() {
                this[this.tableTOExportScreenHeaderDataTable.SourceLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationLocationNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.DestinationLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationLocationNull() {
                this[this.tableTOExportScreenHeaderDataTable.DestinationLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceAddressNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.SourceAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceAddressNull() {
                this[this.tableTOExportScreenHeaderDataTable.SourceAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationAddressNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.DestinationAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationAddressNull() {
                this[this.tableTOExportScreenHeaderDataTable.DestinationAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceTINNoNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.SourceTINNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceTINNoNull() {
                this[this.tableTOExportScreenHeaderDataTable.SourceTINNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExporterRefNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.ExporterRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExporterRefNull() {
                this[this.tableTOExportScreenHeaderDataTable.ExporterRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherRefNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.OtherRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherRefNull() {
                this[this.tableTOExportScreenHeaderDataTable.OtherRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyerOtherthanConsigneeNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.BuyerOtherthanConsigneeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyerOtherthanConsigneeNull() {
                this[this.tableTOExportScreenHeaderDataTable.BuyerOtherthanConsigneeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreCarriageNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.PreCarriageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreCarriageNull() {
                this[this.tableTOExportScreenHeaderDataTable.PreCarriageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlaceofReceiptbyPreCarrierNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.PlaceofReceiptbyPreCarrierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlaceofReceiptbyPreCarrierNull() {
                this[this.tableTOExportScreenHeaderDataTable.PlaceofReceiptbyPreCarrierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryOfOriginNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.CountryOfOriginColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryOfOriginNull() {
                this[this.tableTOExportScreenHeaderDataTable.CountryOfOriginColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryOfDestinationNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.CountryOfDestinationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryOfDestinationNull() {
                this[this.tableTOExportScreenHeaderDataTable.CountryOfDestinationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVesselflightNoNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.VesselflightNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVesselflightNoNull() {
                this[this.tableTOExportScreenHeaderDataTable.VesselflightNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortofLoadingNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.PortofLoadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortofLoadingNull() {
                this[this.tableTOExportScreenHeaderDataTable.PortofLoadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortofDischargeNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.PortofDischargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortofDischargeNull() {
                this[this.tableTOExportScreenHeaderDataTable.PortofDischargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortofDestinationNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.PortofDestinationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortofDestinationNull() {
                this[this.tableTOExportScreenHeaderDataTable.PortofDestinationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTermsofDeliveryNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.TermsofDeliveryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTermsofDeliveryNull() {
                this[this.tableTOExportScreenHeaderDataTable.TermsofDeliveryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDELIVERYNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.DELIVERYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDELIVERYNull() {
                this[this.tableTOExportScreenHeaderDataTable.DELIVERYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAYMENTNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.PAYMENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAYMENTNull() {
                this[this.tableTOExportScreenHeaderDataTable.PAYMENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIECCodeNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.IECCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIECCodeNull() {
                this[this.tableTOExportScreenHeaderDataTable.IECCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOCreationDateNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.TOCreationDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOCreationDateNull() {
                this[this.tableTOExportScreenHeaderDataTable.TOCreationDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOIDateNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.TOIDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOIDateNull() {
                this[this.tableTOExportScreenHeaderDataTable.TOIDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyerOrderNoNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.BuyerOrderNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyerOrderNoNull() {
                this[this.tableTOExportScreenHeaderDataTable.BuyerOrderNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyerOrderDateNull() {
                return this.IsNull(this.tableTOExportScreenHeaderDataTable.BuyerOrderDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyerOrderDateNull() {
                this[this.tableTOExportScreenHeaderDataTable.BuyerOrderDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TOExportScreenDetailDataTableRow : global::System.Data.DataRow {
            
            private TOExportScreenDetailDataTableDataTable tableTOExportScreenDetailDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TOExportScreenDetailDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTOExportScreenDetailDataTable = ((TOExportScreenDetailDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RowNo {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.RowNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RowNo\' in table \'TOExportScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.RowNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemId {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.ItemIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemId\' in table \'TOExportScreenDetailDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.ItemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemCode {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.ItemCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemCode\' in table \'TOExportScreenDetailDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.ItemCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemDescription {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.ItemDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemDescription\' in table \'TOExportScreenDetailDataTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.ItemDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RequestQty {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.RequestQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestQty\' in table \'TOExportScreenDetailDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.RequestQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UOMId {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.UOMIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UOMId\' in table \'TOExportScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.UOMIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransferPrice {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.TransferPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransferPrice\' in table \'TOExportScreenDetailDataTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.TransferPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BucketId {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.BucketIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BucketId\' in table \'TOExportScreenDetailDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.BucketIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalAmount {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.TotalAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmount\' in table \'TOExportScreenDetailDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.TotalAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOINumber {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.TOINumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOINumber\' in table \'TOExportScreenDetailDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.TOINumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UOMName {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.UOMNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UOMName\' in table \'TOExportScreenDetailDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.UOMNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BucketName {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.BucketNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BucketName\' in table \'TOExportScreenDetailDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.BucketNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AfterAdjustQty {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.AfterAdjustQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AfterAdjustQty\' in table \'TOExportScreenDetailDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.AfterAdjustQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BatchNo {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.BatchNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BatchNo\' in table \'TOExportScreenDetailDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.BatchNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MfgDate {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.MfgDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MfgDate\' in table \'TOExportScreenDetailDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.MfgDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExpDate {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.ExpDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpDate\' in table \'TOExportScreenDetailDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.ExpDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufactureBatchNo {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.ManufactureBatchNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManufactureBatchNo\' in table \'TOExportScreenDetailDataTable" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.ManufactureBatchNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MRP {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.MRPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MRP\' in table \'TOExportScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.MRPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AvailableQty {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.AvailableQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AvailableQty\' in table \'TOExportScreenDetailDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.AvailableQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Weight {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.WeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Weight\' in table \'TOExportScreenDetailDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.WeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EachCartonQty {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.EachCartonQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EachCartonQty\' in table \'TOExportScreenDetailDataTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.EachCartonQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContainerNOFromTo {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.ContainerNOFromToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContainerNOFromTo\' in table \'TOExportScreenDetailDataTable\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.ContainerNOFromToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrossWeightItem {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.GrossWeightItemColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossWeightItem\' in table \'TOExportScreenDetailDataTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.GrossWeightItemColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemPackSize {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.ItemPackSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemPackSize\' in table \'TOExportScreenDetailDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.ItemPackSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemDesc {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.ItemDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemDesc\' in table \'TOExportScreenDetailDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.ItemDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateFormatDesc {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.DateFormatDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateFormatDesc\' in table \'TOExportScreenDetailDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.DateFormatDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExpDuration {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.ExpDurationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpDuration\' in table \'TOExportScreenDetailDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.ExpDurationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MerchHierarchyDetailId {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.MerchHierarchyDetailIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MerchHierarchyDetailId\' in table \'TOExportScreenDetailDataT" +
                                "able\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.MerchHierarchyDetailIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SumGrossWeight {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.SumGrossWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumGrossWeight\' in table \'TOExportScreenDetailDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.SumGrossWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PackSize {
                get {
                    try {
                        return ((string)(this[this.tableTOExportScreenDetailDataTable.PackSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PackSize\' in table \'TOExportScreenDetailDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTOExportScreenDetailDataTable.PackSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowNoNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.RowNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowNoNull() {
                this[this.tableTOExportScreenDetailDataTable.RowNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemIdNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.ItemIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemIdNull() {
                this[this.tableTOExportScreenDetailDataTable.ItemIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemCodeNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.ItemCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemCodeNull() {
                this[this.tableTOExportScreenDetailDataTable.ItemCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemDescriptionNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.ItemDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemDescriptionNull() {
                this[this.tableTOExportScreenDetailDataTable.ItemDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestQtyNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.RequestQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestQtyNull() {
                this[this.tableTOExportScreenDetailDataTable.RequestQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUOMIdNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.UOMIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUOMIdNull() {
                this[this.tableTOExportScreenDetailDataTable.UOMIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransferPriceNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.TransferPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransferPriceNull() {
                this[this.tableTOExportScreenDetailDataTable.TransferPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBucketIdNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.BucketIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBucketIdNull() {
                this[this.tableTOExportScreenDetailDataTable.BucketIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.TotalAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountNull() {
                this[this.tableTOExportScreenDetailDataTable.TotalAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOINumberNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.TOINumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOINumberNull() {
                this[this.tableTOExportScreenDetailDataTable.TOINumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUOMNameNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.UOMNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUOMNameNull() {
                this[this.tableTOExportScreenDetailDataTable.UOMNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBucketNameNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.BucketNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBucketNameNull() {
                this[this.tableTOExportScreenDetailDataTable.BucketNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAfterAdjustQtyNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.AfterAdjustQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAfterAdjustQtyNull() {
                this[this.tableTOExportScreenDetailDataTable.AfterAdjustQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchNoNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.BatchNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchNoNull() {
                this[this.tableTOExportScreenDetailDataTable.BatchNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMfgDateNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.MfgDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMfgDateNull() {
                this[this.tableTOExportScreenDetailDataTable.MfgDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpDateNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.ExpDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpDateNull() {
                this[this.tableTOExportScreenDetailDataTable.ExpDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufactureBatchNoNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.ManufactureBatchNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufactureBatchNoNull() {
                this[this.tableTOExportScreenDetailDataTable.ManufactureBatchNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMRPNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.MRPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMRPNull() {
                this[this.tableTOExportScreenDetailDataTable.MRPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvailableQtyNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.AvailableQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvailableQtyNull() {
                this[this.tableTOExportScreenDetailDataTable.AvailableQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.WeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightNull() {
                this[this.tableTOExportScreenDetailDataTable.WeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEachCartonQtyNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.EachCartonQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEachCartonQtyNull() {
                this[this.tableTOExportScreenDetailDataTable.EachCartonQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContainerNOFromToNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.ContainerNOFromToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContainerNOFromToNull() {
                this[this.tableTOExportScreenDetailDataTable.ContainerNOFromToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossWeightItemNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.GrossWeightItemColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossWeightItemNull() {
                this[this.tableTOExportScreenDetailDataTable.GrossWeightItemColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemPackSizeNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.ItemPackSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemPackSizeNull() {
                this[this.tableTOExportScreenDetailDataTable.ItemPackSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemDescNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.ItemDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemDescNull() {
                this[this.tableTOExportScreenDetailDataTable.ItemDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateFormatDescNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.DateFormatDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateFormatDescNull() {
                this[this.tableTOExportScreenDetailDataTable.DateFormatDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpDurationNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.ExpDurationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpDurationNull() {
                this[this.tableTOExportScreenDetailDataTable.ExpDurationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMerchHierarchyDetailIdNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.MerchHierarchyDetailIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMerchHierarchyDetailIdNull() {
                this[this.tableTOExportScreenDetailDataTable.MerchHierarchyDetailIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumGrossWeightNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.SumGrossWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumGrossWeightNull() {
                this[this.tableTOExportScreenDetailDataTable.SumGrossWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPackSizeNull() {
                return this.IsNull(this.tableTOExportScreenDetailDataTable.PackSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPackSizeNull() {
                this[this.tableTOExportScreenDetailDataTable.PackSizeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TOExportScreenHeaderDataTableRowChangeEvent : global::System.EventArgs {
            
            private TOExportScreenHeaderDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOExportScreenHeaderDataTableRowChangeEvent(TOExportScreenHeaderDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOExportScreenHeaderDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TOExportScreenDetailDataTableRowChangeEvent : global::System.EventArgs {
            
            private TOExportScreenDetailDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOExportScreenDetailDataTableRowChangeEvent(TOExportScreenDetailDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOExportScreenDetailDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591