//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CoreComponent.ReportDataSet.ScreenReportDataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("GRNScreen")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class GRNScreen : global::System.Data.DataSet {
        
        private GRNScreenHeaderDataTableDataTable tableGRNScreenHeaderDataTable;
        
        private GRNScreenDetailDataTableDataTable tableGRNScreenDetailDataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GRNScreen() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected GRNScreen(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GRNScreenHeaderDataTable"] != null)) {
                    base.Tables.Add(new GRNScreenHeaderDataTableDataTable(ds.Tables["GRNScreenHeaderDataTable"]));
                }
                if ((ds.Tables["GRNScreenDetailDataTable"] != null)) {
                    base.Tables.Add(new GRNScreenDetailDataTableDataTable(ds.Tables["GRNScreenDetailDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GRNScreenHeaderDataTableDataTable GRNScreenHeaderDataTable {
            get {
                return this.tableGRNScreenHeaderDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GRNScreenDetailDataTableDataTable GRNScreenDetailDataTable {
            get {
                return this.tableGRNScreenDetailDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            GRNScreen cln = ((GRNScreen)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GRNScreenHeaderDataTable"] != null)) {
                    base.Tables.Add(new GRNScreenHeaderDataTableDataTable(ds.Tables["GRNScreenHeaderDataTable"]));
                }
                if ((ds.Tables["GRNScreenDetailDataTable"] != null)) {
                    base.Tables.Add(new GRNScreenDetailDataTableDataTable(ds.Tables["GRNScreenDetailDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGRNScreenHeaderDataTable = ((GRNScreenHeaderDataTableDataTable)(base.Tables["GRNScreenHeaderDataTable"]));
            if ((initTable == true)) {
                if ((this.tableGRNScreenHeaderDataTable != null)) {
                    this.tableGRNScreenHeaderDataTable.InitVars();
                }
            }
            this.tableGRNScreenDetailDataTable = ((GRNScreenDetailDataTableDataTable)(base.Tables["GRNScreenDetailDataTable"]));
            if ((initTable == true)) {
                if ((this.tableGRNScreenDetailDataTable != null)) {
                    this.tableGRNScreenDetailDataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "GRNScreen";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/GRNScreen.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGRNScreenHeaderDataTable = new GRNScreenHeaderDataTableDataTable();
            base.Tables.Add(this.tableGRNScreenHeaderDataTable);
            this.tableGRNScreenDetailDataTable = new GRNScreenDetailDataTableDataTable();
            base.Tables.Add(this.tableGRNScreenDetailDataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGRNScreenHeaderDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGRNScreenDetailDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            GRNScreen ds = new GRNScreen();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GRNScreenHeaderDataTableRowChangeEventHandler(object sender, GRNScreenHeaderDataTableRowChangeEvent e);
        
        public delegate void GRNScreenDetailDataTableRowChangeEventHandler(object sender, GRNScreenDetailDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GRNScreenHeaderDataTableDataTable : global::System.Data.TypedTableBase<GRNScreenHeaderDataTableRow> {
            
            private global::System.Data.DataColumn columnGRNNo;
            
            private global::System.Data.DataColumn columnPONumber;
            
            private global::System.Data.DataColumn columnAmendmentNo;
            
            private global::System.Data.DataColumn columnPODateText;
            
            private global::System.Data.DataColumn columnGRNDateText;
            
            private global::System.Data.DataColumn columnStatusName;
            
            private global::System.Data.DataColumn columnChallanNo;
            
            private global::System.Data.DataColumn columnChallanDateText;
            
            private global::System.Data.DataColumn columnVendorCode;
            
            private global::System.Data.DataColumn columnInvoiceNo;
            
            private global::System.Data.DataColumn columnInvoiceDateText;
            
            private global::System.Data.DataColumn columnVendorName;
            
            private global::System.Data.DataColumn columnInvoiceTaxAmount;
            
            private global::System.Data.DataColumn columnShippingDetails;
            
            private global::System.Data.DataColumn columnDestinationLocation;
            
            private global::System.Data.DataColumn columnInvoiceAmount;
            
            private global::System.Data.DataColumn columnGrossWeight;
            
            private global::System.Data.DataColumn columnVehicleNo;
            
            private global::System.Data.DataColumn columnReceivedBy;
            
            private global::System.Data.DataColumn columnNoOfBoxes;
            
            private global::System.Data.DataColumn columnD_Address1;
            
            private global::System.Data.DataColumn columnD_Address2;
            
            private global::System.Data.DataColumn columnD_Address3;
            
            private global::System.Data.DataColumn columnD_Address4;
            
            private global::System.Data.DataColumn columnD_City;
            
            private global::System.Data.DataColumn columnD_State;
            
            private global::System.Data.DataColumn columnD_Country;
            
            private global::System.Data.DataColumn columnD_Phone1;
            
            private global::System.Data.DataColumn columnVendorAddress;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GRNScreenHeaderDataTableDataTable() {
                this.TableName = "GRNScreenHeaderDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GRNScreenHeaderDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GRNScreenHeaderDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GRNNoColumn {
                get {
                    return this.columnGRNNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PONumberColumn {
                get {
                    return this.columnPONumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmendmentNoColumn {
                get {
                    return this.columnAmendmentNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PODateTextColumn {
                get {
                    return this.columnPODateText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GRNDateTextColumn {
                get {
                    return this.columnGRNDateText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusNameColumn {
                get {
                    return this.columnStatusName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChallanNoColumn {
                get {
                    return this.columnChallanNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChallanDateTextColumn {
                get {
                    return this.columnChallanDateText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VendorCodeColumn {
                get {
                    return this.columnVendorCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceNoColumn {
                get {
                    return this.columnInvoiceNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceDateTextColumn {
                get {
                    return this.columnInvoiceDateText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VendorNameColumn {
                get {
                    return this.columnVendorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceTaxAmountColumn {
                get {
                    return this.columnInvoiceTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShippingDetailsColumn {
                get {
                    return this.columnShippingDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationLocationColumn {
                get {
                    return this.columnDestinationLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceAmountColumn {
                get {
                    return this.columnInvoiceAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossWeightColumn {
                get {
                    return this.columnGrossWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VehicleNoColumn {
                get {
                    return this.columnVehicleNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceivedByColumn {
                get {
                    return this.columnReceivedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoOfBoxesColumn {
                get {
                    return this.columnNoOfBoxes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_Address1Column {
                get {
                    return this.columnD_Address1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_Address2Column {
                get {
                    return this.columnD_Address2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_Address3Column {
                get {
                    return this.columnD_Address3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_Address4Column {
                get {
                    return this.columnD_Address4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_CityColumn {
                get {
                    return this.columnD_City;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_StateColumn {
                get {
                    return this.columnD_State;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_CountryColumn {
                get {
                    return this.columnD_Country;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_Phone1Column {
                get {
                    return this.columnD_Phone1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VendorAddressColumn {
                get {
                    return this.columnVendorAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GRNScreenHeaderDataTableRow this[int index] {
                get {
                    return ((GRNScreenHeaderDataTableRow)(this.Rows[index]));
                }
            }
            
            public event GRNScreenHeaderDataTableRowChangeEventHandler GRNScreenHeaderDataTableRowChanging;
            
            public event GRNScreenHeaderDataTableRowChangeEventHandler GRNScreenHeaderDataTableRowChanged;
            
            public event GRNScreenHeaderDataTableRowChangeEventHandler GRNScreenHeaderDataTableRowDeleting;
            
            public event GRNScreenHeaderDataTableRowChangeEventHandler GRNScreenHeaderDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGRNScreenHeaderDataTableRow(GRNScreenHeaderDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GRNScreenHeaderDataTableRow AddGRNScreenHeaderDataTableRow(
                        string GRNNo, 
                        string PONumber, 
                        string AmendmentNo, 
                        string PODateText, 
                        string GRNDateText, 
                        string StatusName, 
                        string ChallanNo, 
                        string ChallanDateText, 
                        string VendorCode, 
                        string InvoiceNo, 
                        string InvoiceDateText, 
                        string VendorName, 
                        string InvoiceTaxAmount, 
                        string ShippingDetails, 
                        string DestinationLocation, 
                        string InvoiceAmount, 
                        string GrossWeight, 
                        string VehicleNo, 
                        string ReceivedBy, 
                        string NoOfBoxes, 
                        string D_Address1, 
                        string D_Address2, 
                        string D_Address3, 
                        string D_Address4, 
                        string D_City, 
                        string D_State, 
                        string D_Country, 
                        string D_Phone1, 
                        string VendorAddress) {
                GRNScreenHeaderDataTableRow rowGRNScreenHeaderDataTableRow = ((GRNScreenHeaderDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GRNNo,
                        PONumber,
                        AmendmentNo,
                        PODateText,
                        GRNDateText,
                        StatusName,
                        ChallanNo,
                        ChallanDateText,
                        VendorCode,
                        InvoiceNo,
                        InvoiceDateText,
                        VendorName,
                        InvoiceTaxAmount,
                        ShippingDetails,
                        DestinationLocation,
                        InvoiceAmount,
                        GrossWeight,
                        VehicleNo,
                        ReceivedBy,
                        NoOfBoxes,
                        D_Address1,
                        D_Address2,
                        D_Address3,
                        D_Address4,
                        D_City,
                        D_State,
                        D_Country,
                        D_Phone1,
                        VendorAddress};
                rowGRNScreenHeaderDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGRNScreenHeaderDataTableRow);
                return rowGRNScreenHeaderDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GRNScreenHeaderDataTableDataTable cln = ((GRNScreenHeaderDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GRNScreenHeaderDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGRNNo = base.Columns["GRNNo"];
                this.columnPONumber = base.Columns["PONumber"];
                this.columnAmendmentNo = base.Columns["AmendmentNo"];
                this.columnPODateText = base.Columns["PODateText"];
                this.columnGRNDateText = base.Columns["GRNDateText"];
                this.columnStatusName = base.Columns["StatusName"];
                this.columnChallanNo = base.Columns["ChallanNo"];
                this.columnChallanDateText = base.Columns["ChallanDateText"];
                this.columnVendorCode = base.Columns["VendorCode"];
                this.columnInvoiceNo = base.Columns["InvoiceNo"];
                this.columnInvoiceDateText = base.Columns["InvoiceDateText"];
                this.columnVendorName = base.Columns["VendorName"];
                this.columnInvoiceTaxAmount = base.Columns["InvoiceTaxAmount"];
                this.columnShippingDetails = base.Columns["ShippingDetails"];
                this.columnDestinationLocation = base.Columns["DestinationLocation"];
                this.columnInvoiceAmount = base.Columns["InvoiceAmount"];
                this.columnGrossWeight = base.Columns["GrossWeight"];
                this.columnVehicleNo = base.Columns["VehicleNo"];
                this.columnReceivedBy = base.Columns["ReceivedBy"];
                this.columnNoOfBoxes = base.Columns["NoOfBoxes"];
                this.columnD_Address1 = base.Columns["D_Address1"];
                this.columnD_Address2 = base.Columns["D_Address2"];
                this.columnD_Address3 = base.Columns["D_Address3"];
                this.columnD_Address4 = base.Columns["D_Address4"];
                this.columnD_City = base.Columns["D_City"];
                this.columnD_State = base.Columns["D_State"];
                this.columnD_Country = base.Columns["D_Country"];
                this.columnD_Phone1 = base.Columns["D_Phone1"];
                this.columnVendorAddress = base.Columns["VendorAddress"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGRNNo = new global::System.Data.DataColumn("GRNNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGRNNo);
                this.columnPONumber = new global::System.Data.DataColumn("PONumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPONumber);
                this.columnAmendmentNo = new global::System.Data.DataColumn("AmendmentNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmendmentNo);
                this.columnPODateText = new global::System.Data.DataColumn("PODateText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPODateText);
                this.columnGRNDateText = new global::System.Data.DataColumn("GRNDateText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGRNDateText);
                this.columnStatusName = new global::System.Data.DataColumn("StatusName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatusName);
                this.columnChallanNo = new global::System.Data.DataColumn("ChallanNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChallanNo);
                this.columnChallanDateText = new global::System.Data.DataColumn("ChallanDateText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChallanDateText);
                this.columnVendorCode = new global::System.Data.DataColumn("VendorCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorCode);
                this.columnInvoiceNo = new global::System.Data.DataColumn("InvoiceNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceNo);
                this.columnInvoiceDateText = new global::System.Data.DataColumn("InvoiceDateText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceDateText);
                this.columnVendorName = new global::System.Data.DataColumn("VendorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorName);
                this.columnInvoiceTaxAmount = new global::System.Data.DataColumn("InvoiceTaxAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceTaxAmount);
                this.columnShippingDetails = new global::System.Data.DataColumn("ShippingDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShippingDetails);
                this.columnDestinationLocation = new global::System.Data.DataColumn("DestinationLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationLocation);
                this.columnInvoiceAmount = new global::System.Data.DataColumn("InvoiceAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceAmount);
                this.columnGrossWeight = new global::System.Data.DataColumn("GrossWeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossWeight);
                this.columnVehicleNo = new global::System.Data.DataColumn("VehicleNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVehicleNo);
                this.columnReceivedBy = new global::System.Data.DataColumn("ReceivedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceivedBy);
                this.columnNoOfBoxes = new global::System.Data.DataColumn("NoOfBoxes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoOfBoxes);
                this.columnD_Address1 = new global::System.Data.DataColumn("D_Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_Address1);
                this.columnD_Address2 = new global::System.Data.DataColumn("D_Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_Address2);
                this.columnD_Address3 = new global::System.Data.DataColumn("D_Address3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_Address3);
                this.columnD_Address4 = new global::System.Data.DataColumn("D_Address4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_Address4);
                this.columnD_City = new global::System.Data.DataColumn("D_City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_City);
                this.columnD_State = new global::System.Data.DataColumn("D_State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_State);
                this.columnD_Country = new global::System.Data.DataColumn("D_Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_Country);
                this.columnD_Phone1 = new global::System.Data.DataColumn("D_Phone1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_Phone1);
                this.columnVendorAddress = new global::System.Data.DataColumn("VendorAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorAddress);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GRNScreenHeaderDataTableRow NewGRNScreenHeaderDataTableRow() {
                return ((GRNScreenHeaderDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GRNScreenHeaderDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GRNScreenHeaderDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GRNScreenHeaderDataTableRowChanged != null)) {
                    this.GRNScreenHeaderDataTableRowChanged(this, new GRNScreenHeaderDataTableRowChangeEvent(((GRNScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GRNScreenHeaderDataTableRowChanging != null)) {
                    this.GRNScreenHeaderDataTableRowChanging(this, new GRNScreenHeaderDataTableRowChangeEvent(((GRNScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GRNScreenHeaderDataTableRowDeleted != null)) {
                    this.GRNScreenHeaderDataTableRowDeleted(this, new GRNScreenHeaderDataTableRowChangeEvent(((GRNScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GRNScreenHeaderDataTableRowDeleting != null)) {
                    this.GRNScreenHeaderDataTableRowDeleting(this, new GRNScreenHeaderDataTableRowChangeEvent(((GRNScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGRNScreenHeaderDataTableRow(GRNScreenHeaderDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GRNScreen ds = new GRNScreen();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GRNScreenHeaderDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GRNScreenDetailDataTableDataTable : global::System.Data.TypedTableBase<GRNScreenDetailDataTableRow> {
            
            private global::System.Data.DataColumn columnSerialNo;
            
            private global::System.Data.DataColumn columnItemId;
            
            private global::System.Data.DataColumn columnItemCode;
            
            private global::System.Data.DataColumn columnItemDescription;
            
            private global::System.Data.DataColumn columnPurchaseUOM;
            
            private global::System.Data.DataColumn columnPOQty;
            
            private global::System.Data.DataColumn columnAlreadyReceivedQty;
            
            private global::System.Data.DataColumn columnBalanceQty;
            
            private global::System.Data.DataColumn columnReceivedQty;
            
            private global::System.Data.DataColumn columnChallanQty;
            
            private global::System.Data.DataColumn columnInvoiceQty;
            
            private global::System.Data.DataColumn columnMaxQty;
            
            private global::System.Data.DataColumn columnItemWeight;
            
            private global::System.Data.DataColumn columnBatchSerialNo;
            
            private global::System.Data.DataColumn columnBatchNumber;
            
            private global::System.Data.DataColumn columnManufacturerBatchNo;
            
            private global::System.Data.DataColumn columnMfgDate;
            
            private global::System.Data.DataColumn columnExpDate;
            
            private global::System.Data.DataColumn columnMRP;
            
            private global::System.Data.DataColumn columnBatchQty;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GRNScreenDetailDataTableDataTable() {
                this.TableName = "GRNScreenDetailDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GRNScreenDetailDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GRNScreenDetailDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SerialNoColumn {
                get {
                    return this.columnSerialNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemIdColumn {
                get {
                    return this.columnItemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemCodeColumn {
                get {
                    return this.columnItemCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemDescriptionColumn {
                get {
                    return this.columnItemDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PurchaseUOMColumn {
                get {
                    return this.columnPurchaseUOM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POQtyColumn {
                get {
                    return this.columnPOQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AlreadyReceivedQtyColumn {
                get {
                    return this.columnAlreadyReceivedQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BalanceQtyColumn {
                get {
                    return this.columnBalanceQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceivedQtyColumn {
                get {
                    return this.columnReceivedQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChallanQtyColumn {
                get {
                    return this.columnChallanQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceQtyColumn {
                get {
                    return this.columnInvoiceQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxQtyColumn {
                get {
                    return this.columnMaxQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemWeightColumn {
                get {
                    return this.columnItemWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatchSerialNoColumn {
                get {
                    return this.columnBatchSerialNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatchNumberColumn {
                get {
                    return this.columnBatchNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufacturerBatchNoColumn {
                get {
                    return this.columnManufacturerBatchNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MfgDateColumn {
                get {
                    return this.columnMfgDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpDateColumn {
                get {
                    return this.columnExpDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MRPColumn {
                get {
                    return this.columnMRP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatchQtyColumn {
                get {
                    return this.columnBatchQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GRNScreenDetailDataTableRow this[int index] {
                get {
                    return ((GRNScreenDetailDataTableRow)(this.Rows[index]));
                }
            }
            
            public event GRNScreenDetailDataTableRowChangeEventHandler GRNScreenDetailDataTableRowChanging;
            
            public event GRNScreenDetailDataTableRowChangeEventHandler GRNScreenDetailDataTableRowChanged;
            
            public event GRNScreenDetailDataTableRowChangeEventHandler GRNScreenDetailDataTableRowDeleting;
            
            public event GRNScreenDetailDataTableRowChangeEventHandler GRNScreenDetailDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGRNScreenDetailDataTableRow(GRNScreenDetailDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GRNScreenDetailDataTableRow AddGRNScreenDetailDataTableRow(
                        string SerialNo, 
                        string ItemId, 
                        string ItemCode, 
                        string ItemDescription, 
                        string PurchaseUOM, 
                        string POQty, 
                        string AlreadyReceivedQty, 
                        string BalanceQty, 
                        string ReceivedQty, 
                        string ChallanQty, 
                        string InvoiceQty, 
                        string MaxQty, 
                        string ItemWeight, 
                        string BatchSerialNo, 
                        string BatchNumber, 
                        string ManufacturerBatchNo, 
                        string MfgDate, 
                        string ExpDate, 
                        string MRP, 
                        string BatchQty) {
                GRNScreenDetailDataTableRow rowGRNScreenDetailDataTableRow = ((GRNScreenDetailDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SerialNo,
                        ItemId,
                        ItemCode,
                        ItemDescription,
                        PurchaseUOM,
                        POQty,
                        AlreadyReceivedQty,
                        BalanceQty,
                        ReceivedQty,
                        ChallanQty,
                        InvoiceQty,
                        MaxQty,
                        ItemWeight,
                        BatchSerialNo,
                        BatchNumber,
                        ManufacturerBatchNo,
                        MfgDate,
                        ExpDate,
                        MRP,
                        BatchQty};
                rowGRNScreenDetailDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGRNScreenDetailDataTableRow);
                return rowGRNScreenDetailDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GRNScreenDetailDataTableDataTable cln = ((GRNScreenDetailDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GRNScreenDetailDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSerialNo = base.Columns["SerialNo"];
                this.columnItemId = base.Columns["ItemId"];
                this.columnItemCode = base.Columns["ItemCode"];
                this.columnItemDescription = base.Columns["ItemDescription"];
                this.columnPurchaseUOM = base.Columns["PurchaseUOM"];
                this.columnPOQty = base.Columns["POQty"];
                this.columnAlreadyReceivedQty = base.Columns["AlreadyReceivedQty"];
                this.columnBalanceQty = base.Columns["BalanceQty"];
                this.columnReceivedQty = base.Columns["ReceivedQty"];
                this.columnChallanQty = base.Columns["ChallanQty"];
                this.columnInvoiceQty = base.Columns["InvoiceQty"];
                this.columnMaxQty = base.Columns["MaxQty"];
                this.columnItemWeight = base.Columns["ItemWeight"];
                this.columnBatchSerialNo = base.Columns["BatchSerialNo"];
                this.columnBatchNumber = base.Columns["BatchNumber"];
                this.columnManufacturerBatchNo = base.Columns["ManufacturerBatchNo"];
                this.columnMfgDate = base.Columns["MfgDate"];
                this.columnExpDate = base.Columns["ExpDate"];
                this.columnMRP = base.Columns["MRP"];
                this.columnBatchQty = base.Columns["BatchQty"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSerialNo = new global::System.Data.DataColumn("SerialNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSerialNo);
                this.columnItemId = new global::System.Data.DataColumn("ItemId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemId);
                this.columnItemCode = new global::System.Data.DataColumn("ItemCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemCode);
                this.columnItemDescription = new global::System.Data.DataColumn("ItemDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemDescription);
                this.columnPurchaseUOM = new global::System.Data.DataColumn("PurchaseUOM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchaseUOM);
                this.columnPOQty = new global::System.Data.DataColumn("POQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOQty);
                this.columnAlreadyReceivedQty = new global::System.Data.DataColumn("AlreadyReceivedQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlreadyReceivedQty);
                this.columnBalanceQty = new global::System.Data.DataColumn("BalanceQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalanceQty);
                this.columnReceivedQty = new global::System.Data.DataColumn("ReceivedQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceivedQty);
                this.columnChallanQty = new global::System.Data.DataColumn("ChallanQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChallanQty);
                this.columnInvoiceQty = new global::System.Data.DataColumn("InvoiceQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceQty);
                this.columnMaxQty = new global::System.Data.DataColumn("MaxQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxQty);
                this.columnItemWeight = new global::System.Data.DataColumn("ItemWeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemWeight);
                this.columnBatchSerialNo = new global::System.Data.DataColumn("BatchSerialNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchSerialNo);
                this.columnBatchNumber = new global::System.Data.DataColumn("BatchNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchNumber);
                this.columnManufacturerBatchNo = new global::System.Data.DataColumn("ManufacturerBatchNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerBatchNo);
                this.columnMfgDate = new global::System.Data.DataColumn("MfgDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMfgDate);
                this.columnExpDate = new global::System.Data.DataColumn("ExpDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpDate);
                this.columnMRP = new global::System.Data.DataColumn("MRP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMRP);
                this.columnBatchQty = new global::System.Data.DataColumn("BatchQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchQty);
                this.columnManufacturerBatchNo.Caption = "DataColumn1";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GRNScreenDetailDataTableRow NewGRNScreenDetailDataTableRow() {
                return ((GRNScreenDetailDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GRNScreenDetailDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GRNScreenDetailDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GRNScreenDetailDataTableRowChanged != null)) {
                    this.GRNScreenDetailDataTableRowChanged(this, new GRNScreenDetailDataTableRowChangeEvent(((GRNScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GRNScreenDetailDataTableRowChanging != null)) {
                    this.GRNScreenDetailDataTableRowChanging(this, new GRNScreenDetailDataTableRowChangeEvent(((GRNScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GRNScreenDetailDataTableRowDeleted != null)) {
                    this.GRNScreenDetailDataTableRowDeleted(this, new GRNScreenDetailDataTableRowChangeEvent(((GRNScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GRNScreenDetailDataTableRowDeleting != null)) {
                    this.GRNScreenDetailDataTableRowDeleting(this, new GRNScreenDetailDataTableRowChangeEvent(((GRNScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGRNScreenDetailDataTableRow(GRNScreenDetailDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GRNScreen ds = new GRNScreen();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GRNScreenDetailDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GRNScreenHeaderDataTableRow : global::System.Data.DataRow {
            
            private GRNScreenHeaderDataTableDataTable tableGRNScreenHeaderDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GRNScreenHeaderDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGRNScreenHeaderDataTable = ((GRNScreenHeaderDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GRNNo {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.GRNNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GRNNo\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.GRNNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PONumber {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.PONumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PONumber\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.PONumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AmendmentNo {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.AmendmentNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AmendmentNo\' in table \'GRNScreenHeaderDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.AmendmentNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PODateText {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.PODateTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PODateText\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.PODateTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GRNDateText {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.GRNDateTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GRNDateText\' in table \'GRNScreenHeaderDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.GRNDateTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatusName {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.StatusNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatusName\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.StatusNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChallanNo {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.ChallanNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChallanNo\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.ChallanNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChallanDateText {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.ChallanDateTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChallanDateText\' in table \'GRNScreenHeaderDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.ChallanDateTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VendorCode {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.VendorCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VendorCode\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.VendorCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvoiceNo {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.InvoiceNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceNo\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.InvoiceNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvoiceDateText {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.InvoiceDateTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceDateText\' in table \'GRNScreenHeaderDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.InvoiceDateTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VendorName {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.VendorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VendorName\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.VendorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvoiceTaxAmount {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.InvoiceTaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceTaxAmount\' in table \'GRNScreenHeaderDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.InvoiceTaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShippingDetails {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.ShippingDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShippingDetails\' in table \'GRNScreenHeaderDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.ShippingDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationLocation {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.DestinationLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationLocation\' in table \'GRNScreenHeaderDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.DestinationLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvoiceAmount {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.InvoiceAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceAmount\' in table \'GRNScreenHeaderDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.InvoiceAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrossWeight {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.GrossWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossWeight\' in table \'GRNScreenHeaderDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.GrossWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VehicleNo {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.VehicleNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VehicleNo\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.VehicleNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceivedBy {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.ReceivedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceivedBy\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.ReceivedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoOfBoxes {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.NoOfBoxesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NoOfBoxes\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.NoOfBoxesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_Address1 {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.D_Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D_Address1\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.D_Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_Address2 {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.D_Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D_Address2\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.D_Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_Address3 {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.D_Address3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D_Address3\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.D_Address3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_Address4 {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.D_Address4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D_Address4\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.D_Address4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_City {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.D_CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D_City\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.D_CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_State {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.D_StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D_State\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.D_StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_Country {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.D_CountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D_Country\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.D_CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_Phone1 {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.D_Phone1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D_Phone1\' in table \'GRNScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.D_Phone1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VendorAddress {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenHeaderDataTable.VendorAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VendorAddress\' in table \'GRNScreenHeaderDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenHeaderDataTable.VendorAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGRNNoNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.GRNNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGRNNoNull() {
                this[this.tableGRNScreenHeaderDataTable.GRNNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPONumberNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.PONumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPONumberNull() {
                this[this.tableGRNScreenHeaderDataTable.PONumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmendmentNoNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.AmendmentNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmendmentNoNull() {
                this[this.tableGRNScreenHeaderDataTable.AmendmentNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPODateTextNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.PODateTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPODateTextNull() {
                this[this.tableGRNScreenHeaderDataTable.PODateTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGRNDateTextNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.GRNDateTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGRNDateTextNull() {
                this[this.tableGRNScreenHeaderDataTable.GRNDateTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNameNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.StatusNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNameNull() {
                this[this.tableGRNScreenHeaderDataTable.StatusNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChallanNoNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.ChallanNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChallanNoNull() {
                this[this.tableGRNScreenHeaderDataTable.ChallanNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChallanDateTextNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.ChallanDateTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChallanDateTextNull() {
                this[this.tableGRNScreenHeaderDataTable.ChallanDateTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVendorCodeNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.VendorCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVendorCodeNull() {
                this[this.tableGRNScreenHeaderDataTable.VendorCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceNoNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.InvoiceNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceNoNull() {
                this[this.tableGRNScreenHeaderDataTable.InvoiceNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceDateTextNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.InvoiceDateTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceDateTextNull() {
                this[this.tableGRNScreenHeaderDataTable.InvoiceDateTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVendorNameNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.VendorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVendorNameNull() {
                this[this.tableGRNScreenHeaderDataTable.VendorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceTaxAmountNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.InvoiceTaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceTaxAmountNull() {
                this[this.tableGRNScreenHeaderDataTable.InvoiceTaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShippingDetailsNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.ShippingDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShippingDetailsNull() {
                this[this.tableGRNScreenHeaderDataTable.ShippingDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationLocationNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.DestinationLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationLocationNull() {
                this[this.tableGRNScreenHeaderDataTable.DestinationLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceAmountNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.InvoiceAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceAmountNull() {
                this[this.tableGRNScreenHeaderDataTable.InvoiceAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossWeightNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.GrossWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossWeightNull() {
                this[this.tableGRNScreenHeaderDataTable.GrossWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVehicleNoNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.VehicleNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVehicleNoNull() {
                this[this.tableGRNScreenHeaderDataTable.VehicleNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceivedByNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.ReceivedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceivedByNull() {
                this[this.tableGRNScreenHeaderDataTable.ReceivedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoOfBoxesNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.NoOfBoxesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoOfBoxesNull() {
                this[this.tableGRNScreenHeaderDataTable.NoOfBoxesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_Address1Null() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.D_Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_Address1Null() {
                this[this.tableGRNScreenHeaderDataTable.D_Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_Address2Null() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.D_Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_Address2Null() {
                this[this.tableGRNScreenHeaderDataTable.D_Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_Address3Null() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.D_Address3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_Address3Null() {
                this[this.tableGRNScreenHeaderDataTable.D_Address3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_Address4Null() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.D_Address4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_Address4Null() {
                this[this.tableGRNScreenHeaderDataTable.D_Address4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_CityNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.D_CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_CityNull() {
                this[this.tableGRNScreenHeaderDataTable.D_CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_StateNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.D_StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_StateNull() {
                this[this.tableGRNScreenHeaderDataTable.D_StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_CountryNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.D_CountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_CountryNull() {
                this[this.tableGRNScreenHeaderDataTable.D_CountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_Phone1Null() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.D_Phone1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_Phone1Null() {
                this[this.tableGRNScreenHeaderDataTable.D_Phone1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVendorAddressNull() {
                return this.IsNull(this.tableGRNScreenHeaderDataTable.VendorAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVendorAddressNull() {
                this[this.tableGRNScreenHeaderDataTable.VendorAddressColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GRNScreenDetailDataTableRow : global::System.Data.DataRow {
            
            private GRNScreenDetailDataTableDataTable tableGRNScreenDetailDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GRNScreenDetailDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGRNScreenDetailDataTable = ((GRNScreenDetailDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SerialNo {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.SerialNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SerialNo\' in table \'GRNScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.SerialNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemId {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.ItemIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemId\' in table \'GRNScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.ItemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemCode {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.ItemCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemCode\' in table \'GRNScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.ItemCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemDescription {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.ItemDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemDescription\' in table \'GRNScreenDetailDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.ItemDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PurchaseUOM {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.PurchaseUOMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PurchaseUOM\' in table \'GRNScreenDetailDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.PurchaseUOMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POQty {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.POQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'POQty\' in table \'GRNScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.POQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AlreadyReceivedQty {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.AlreadyReceivedQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AlreadyReceivedQty\' in table \'GRNScreenDetailDataTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.AlreadyReceivedQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BalanceQty {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.BalanceQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BalanceQty\' in table \'GRNScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.BalanceQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceivedQty {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.ReceivedQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceivedQty\' in table \'GRNScreenDetailDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.ReceivedQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChallanQty {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.ChallanQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChallanQty\' in table \'GRNScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.ChallanQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvoiceQty {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.InvoiceQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceQty\' in table \'GRNScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.InvoiceQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaxQty {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.MaxQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxQty\' in table \'GRNScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.MaxQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemWeight {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.ItemWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemWeight\' in table \'GRNScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.ItemWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BatchSerialNo {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.BatchSerialNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BatchSerialNo\' in table \'GRNScreenDetailDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.BatchSerialNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BatchNumber {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.BatchNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BatchNumber\' in table \'GRNScreenDetailDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.BatchNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufacturerBatchNo {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.ManufacturerBatchNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManufacturerBatchNo\' in table \'GRNScreenDetailDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.ManufacturerBatchNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MfgDate {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.MfgDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MfgDate\' in table \'GRNScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.MfgDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExpDate {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.ExpDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpDate\' in table \'GRNScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.ExpDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MRP {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.MRPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MRP\' in table \'GRNScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.MRPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BatchQty {
                get {
                    try {
                        return ((string)(this[this.tableGRNScreenDetailDataTable.BatchQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BatchQty\' in table \'GRNScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGRNScreenDetailDataTable.BatchQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSerialNoNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.SerialNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSerialNoNull() {
                this[this.tableGRNScreenDetailDataTable.SerialNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemIdNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.ItemIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemIdNull() {
                this[this.tableGRNScreenDetailDataTable.ItemIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemCodeNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.ItemCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemCodeNull() {
                this[this.tableGRNScreenDetailDataTable.ItemCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemDescriptionNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.ItemDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemDescriptionNull() {
                this[this.tableGRNScreenDetailDataTable.ItemDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPurchaseUOMNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.PurchaseUOMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPurchaseUOMNull() {
                this[this.tableGRNScreenDetailDataTable.PurchaseUOMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOQtyNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.POQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOQtyNull() {
                this[this.tableGRNScreenDetailDataTable.POQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAlreadyReceivedQtyNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.AlreadyReceivedQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAlreadyReceivedQtyNull() {
                this[this.tableGRNScreenDetailDataTable.AlreadyReceivedQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBalanceQtyNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.BalanceQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBalanceQtyNull() {
                this[this.tableGRNScreenDetailDataTable.BalanceQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceivedQtyNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.ReceivedQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceivedQtyNull() {
                this[this.tableGRNScreenDetailDataTable.ReceivedQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChallanQtyNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.ChallanQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChallanQtyNull() {
                this[this.tableGRNScreenDetailDataTable.ChallanQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceQtyNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.InvoiceQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceQtyNull() {
                this[this.tableGRNScreenDetailDataTable.InvoiceQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxQtyNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.MaxQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxQtyNull() {
                this[this.tableGRNScreenDetailDataTable.MaxQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemWeightNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.ItemWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemWeightNull() {
                this[this.tableGRNScreenDetailDataTable.ItemWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchSerialNoNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.BatchSerialNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchSerialNoNull() {
                this[this.tableGRNScreenDetailDataTable.BatchSerialNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchNumberNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.BatchNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchNumberNull() {
                this[this.tableGRNScreenDetailDataTable.BatchNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerBatchNoNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.ManufacturerBatchNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerBatchNoNull() {
                this[this.tableGRNScreenDetailDataTable.ManufacturerBatchNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMfgDateNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.MfgDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMfgDateNull() {
                this[this.tableGRNScreenDetailDataTable.MfgDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpDateNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.ExpDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpDateNull() {
                this[this.tableGRNScreenDetailDataTable.ExpDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMRPNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.MRPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMRPNull() {
                this[this.tableGRNScreenDetailDataTable.MRPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchQtyNull() {
                return this.IsNull(this.tableGRNScreenDetailDataTable.BatchQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchQtyNull() {
                this[this.tableGRNScreenDetailDataTable.BatchQtyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GRNScreenHeaderDataTableRowChangeEvent : global::System.EventArgs {
            
            private GRNScreenHeaderDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GRNScreenHeaderDataTableRowChangeEvent(GRNScreenHeaderDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GRNScreenHeaderDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GRNScreenDetailDataTableRowChangeEvent : global::System.EventArgs {
            
            private GRNScreenDetailDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GRNScreenDetailDataTableRowChangeEvent(GRNScreenDetailDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GRNScreenDetailDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591