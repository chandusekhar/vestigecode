//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CoreComponent.ReportDataSet.ScreenReportDataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("IndentScreen")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class IndentScreen : global::System.Data.DataSet {
        
        private IndentScreenHeaderDataTableDataTable tableIndentScreenHeaderDataTable;
        
        private IndentScreenDetailDataTableDataTable tableIndentScreenDetailDataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IndentScreen() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected IndentScreen(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["IndentScreenHeaderDataTable"] != null)) {
                    base.Tables.Add(new IndentScreenHeaderDataTableDataTable(ds.Tables["IndentScreenHeaderDataTable"]));
                }
                if ((ds.Tables["IndentScreenDetailDataTable"] != null)) {
                    base.Tables.Add(new IndentScreenDetailDataTableDataTable(ds.Tables["IndentScreenDetailDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IndentScreenHeaderDataTableDataTable IndentScreenHeaderDataTable {
            get {
                return this.tableIndentScreenHeaderDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IndentScreenDetailDataTableDataTable IndentScreenDetailDataTable {
            get {
                return this.tableIndentScreenDetailDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            IndentScreen cln = ((IndentScreen)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["IndentScreenHeaderDataTable"] != null)) {
                    base.Tables.Add(new IndentScreenHeaderDataTableDataTable(ds.Tables["IndentScreenHeaderDataTable"]));
                }
                if ((ds.Tables["IndentScreenDetailDataTable"] != null)) {
                    base.Tables.Add(new IndentScreenDetailDataTableDataTable(ds.Tables["IndentScreenDetailDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableIndentScreenHeaderDataTable = ((IndentScreenHeaderDataTableDataTable)(base.Tables["IndentScreenHeaderDataTable"]));
            if ((initTable == true)) {
                if ((this.tableIndentScreenHeaderDataTable != null)) {
                    this.tableIndentScreenHeaderDataTable.InitVars();
                }
            }
            this.tableIndentScreenDetailDataTable = ((IndentScreenDetailDataTableDataTable)(base.Tables["IndentScreenDetailDataTable"]));
            if ((initTable == true)) {
                if ((this.tableIndentScreenDetailDataTable != null)) {
                    this.tableIndentScreenDetailDataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "IndentScreen";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/IndentScreen.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableIndentScreenHeaderDataTable = new IndentScreenHeaderDataTableDataTable();
            base.Tables.Add(this.tableIndentScreenHeaderDataTable);
            this.tableIndentScreenDetailDataTable = new IndentScreenDetailDataTableDataTable();
            base.Tables.Add(this.tableIndentScreenDetailDataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIndentScreenHeaderDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIndentScreenDetailDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            IndentScreen ds = new IndentScreen();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void IndentScreenHeaderDataTableRowChangeEventHandler(object sender, IndentScreenHeaderDataTableRowChangeEvent e);
        
        public delegate void IndentScreenDetailDataTableRowChangeEventHandler(object sender, IndentScreenDetailDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IndentScreenHeaderDataTableDataTable : global::System.Data.TypedTableBase<IndentScreenHeaderDataTableRow> {
            
            private global::System.Data.DataColumn columnCreate;
            
            private global::System.Data.DataColumn columnLocationCode;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnIndentNo;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnIndentDate;
            
            private global::System.Data.DataColumn columnApprovedDate;
            
            private global::System.Data.DataColumn columnCityName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndentScreenHeaderDataTableDataTable() {
                this.TableName = "IndentScreenHeaderDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IndentScreenHeaderDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IndentScreenHeaderDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateColumn {
                get {
                    return this.columnCreate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationCodeColumn {
                get {
                    return this.columnLocationCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndentNoColumn {
                get {
                    return this.columnIndentNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndentDateColumn {
                get {
                    return this.columnIndentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedDateColumn {
                get {
                    return this.columnApprovedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityNameColumn {
                get {
                    return this.columnCityName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndentScreenHeaderDataTableRow this[int index] {
                get {
                    return ((IndentScreenHeaderDataTableRow)(this.Rows[index]));
                }
            }
            
            public event IndentScreenHeaderDataTableRowChangeEventHandler IndentScreenHeaderDataTableRowChanging;
            
            public event IndentScreenHeaderDataTableRowChangeEventHandler IndentScreenHeaderDataTableRowChanged;
            
            public event IndentScreenHeaderDataTableRowChangeEventHandler IndentScreenHeaderDataTableRowDeleting;
            
            public event IndentScreenHeaderDataTableRowChangeEventHandler IndentScreenHeaderDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIndentScreenHeaderDataTableRow(IndentScreenHeaderDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndentScreenHeaderDataTableRow AddIndentScreenHeaderDataTableRow(string Create, string LocationCode, string Location, string IndentNo, string Status, string Remark, string IndentDate, string ApprovedDate, string CityName) {
                IndentScreenHeaderDataTableRow rowIndentScreenHeaderDataTableRow = ((IndentScreenHeaderDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Create,
                        LocationCode,
                        Location,
                        IndentNo,
                        Status,
                        Remark,
                        IndentDate,
                        ApprovedDate,
                        CityName};
                rowIndentScreenHeaderDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowIndentScreenHeaderDataTableRow);
                return rowIndentScreenHeaderDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                IndentScreenHeaderDataTableDataTable cln = ((IndentScreenHeaderDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new IndentScreenHeaderDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCreate = base.Columns["Create"];
                this.columnLocationCode = base.Columns["LocationCode"];
                this.columnLocation = base.Columns["Location"];
                this.columnIndentNo = base.Columns["IndentNo"];
                this.columnStatus = base.Columns["Status"];
                this.columnRemark = base.Columns["Remark"];
                this.columnIndentDate = base.Columns["IndentDate"];
                this.columnApprovedDate = base.Columns["ApprovedDate"];
                this.columnCityName = base.Columns["CityName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCreate = new global::System.Data.DataColumn("Create", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreate);
                this.columnLocationCode = new global::System.Data.DataColumn("LocationCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationCode);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnIndentNo = new global::System.Data.DataColumn("IndentNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndentNo);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnIndentDate = new global::System.Data.DataColumn("IndentDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndentDate);
                this.columnApprovedDate = new global::System.Data.DataColumn("ApprovedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedDate);
                this.columnCityName = new global::System.Data.DataColumn("CityName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCityName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndentScreenHeaderDataTableRow NewIndentScreenHeaderDataTableRow() {
                return ((IndentScreenHeaderDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new IndentScreenHeaderDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(IndentScreenHeaderDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IndentScreenHeaderDataTableRowChanged != null)) {
                    this.IndentScreenHeaderDataTableRowChanged(this, new IndentScreenHeaderDataTableRowChangeEvent(((IndentScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IndentScreenHeaderDataTableRowChanging != null)) {
                    this.IndentScreenHeaderDataTableRowChanging(this, new IndentScreenHeaderDataTableRowChangeEvent(((IndentScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IndentScreenHeaderDataTableRowDeleted != null)) {
                    this.IndentScreenHeaderDataTableRowDeleted(this, new IndentScreenHeaderDataTableRowChangeEvent(((IndentScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IndentScreenHeaderDataTableRowDeleting != null)) {
                    this.IndentScreenHeaderDataTableRowDeleting(this, new IndentScreenHeaderDataTableRowChangeEvent(((IndentScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIndentScreenHeaderDataTableRow(IndentScreenHeaderDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndentScreen ds = new IndentScreen();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IndentScreenHeaderDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IndentScreenDetailDataTableDataTable : global::System.Data.TypedTableBase<IndentScreenDetailDataTableRow> {
            
            private global::System.Data.DataColumn columnItemCode;
            
            private global::System.Data.DataColumn columnItemName;
            
            private global::System.Data.DataColumn columnRequestedQty;
            
            private global::System.Data.DataColumn columnSuggestedQty;
            
            private global::System.Data.DataColumn columnApprovedHOQty;
            
            private global::System.Data.DataColumn columnApprovedTOQty;
            
            private global::System.Data.DataColumn columnApprovedPOQty;
            
            private global::System.Data.DataColumn columnLocationName;
            
            private global::System.Data.DataColumn columnAvgSaleFactor;
            
            private global::System.Data.DataColumn columnStockInHand;
            
            private global::System.Data.DataColumn columnStockInTransit;
            
            private global::System.Data.DataColumn columnAvgStockTransfer;
            
            private global::System.Data.DataColumn columnTotalStock;
            
            private global::System.Data.DataColumn columnTotalSaleTransfer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndentScreenDetailDataTableDataTable() {
                this.TableName = "IndentScreenDetailDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IndentScreenDetailDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IndentScreenDetailDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemCodeColumn {
                get {
                    return this.columnItemCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemNameColumn {
                get {
                    return this.columnItemName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestedQtyColumn {
                get {
                    return this.columnRequestedQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SuggestedQtyColumn {
                get {
                    return this.columnSuggestedQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedHOQtyColumn {
                get {
                    return this.columnApprovedHOQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedTOQtyColumn {
                get {
                    return this.columnApprovedTOQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedPOQtyColumn {
                get {
                    return this.columnApprovedPOQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationNameColumn {
                get {
                    return this.columnLocationName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvgSaleFactorColumn {
                get {
                    return this.columnAvgSaleFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockInHandColumn {
                get {
                    return this.columnStockInHand;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockInTransitColumn {
                get {
                    return this.columnStockInTransit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvgStockTransferColumn {
                get {
                    return this.columnAvgStockTransfer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalStockColumn {
                get {
                    return this.columnTotalStock;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalSaleTransferColumn {
                get {
                    return this.columnTotalSaleTransfer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndentScreenDetailDataTableRow this[int index] {
                get {
                    return ((IndentScreenDetailDataTableRow)(this.Rows[index]));
                }
            }
            
            public event IndentScreenDetailDataTableRowChangeEventHandler IndentScreenDetailDataTableRowChanging;
            
            public event IndentScreenDetailDataTableRowChangeEventHandler IndentScreenDetailDataTableRowChanged;
            
            public event IndentScreenDetailDataTableRowChangeEventHandler IndentScreenDetailDataTableRowDeleting;
            
            public event IndentScreenDetailDataTableRowChangeEventHandler IndentScreenDetailDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIndentScreenDetailDataTableRow(IndentScreenDetailDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndentScreenDetailDataTableRow AddIndentScreenDetailDataTableRow(string ItemCode, string ItemName, string RequestedQty, string SuggestedQty, string ApprovedHOQty, string ApprovedTOQty, string ApprovedPOQty, string LocationName, string AvgSaleFactor, string StockInHand, string StockInTransit, string AvgStockTransfer, string TotalStock, string TotalSaleTransfer) {
                IndentScreenDetailDataTableRow rowIndentScreenDetailDataTableRow = ((IndentScreenDetailDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ItemCode,
                        ItemName,
                        RequestedQty,
                        SuggestedQty,
                        ApprovedHOQty,
                        ApprovedTOQty,
                        ApprovedPOQty,
                        LocationName,
                        AvgSaleFactor,
                        StockInHand,
                        StockInTransit,
                        AvgStockTransfer,
                        TotalStock,
                        TotalSaleTransfer};
                rowIndentScreenDetailDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowIndentScreenDetailDataTableRow);
                return rowIndentScreenDetailDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                IndentScreenDetailDataTableDataTable cln = ((IndentScreenDetailDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new IndentScreenDetailDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItemCode = base.Columns["ItemCode"];
                this.columnItemName = base.Columns["ItemName"];
                this.columnRequestedQty = base.Columns["RequestedQty"];
                this.columnSuggestedQty = base.Columns["SuggestedQty"];
                this.columnApprovedHOQty = base.Columns["ApprovedHOQty"];
                this.columnApprovedTOQty = base.Columns["ApprovedTOQty"];
                this.columnApprovedPOQty = base.Columns["ApprovedPOQty"];
                this.columnLocationName = base.Columns["LocationName"];
                this.columnAvgSaleFactor = base.Columns["AvgSaleFactor"];
                this.columnStockInHand = base.Columns["StockInHand"];
                this.columnStockInTransit = base.Columns["StockInTransit"];
                this.columnAvgStockTransfer = base.Columns["AvgStockTransfer"];
                this.columnTotalStock = base.Columns["TotalStock"];
                this.columnTotalSaleTransfer = base.Columns["TotalSaleTransfer"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItemCode = new global::System.Data.DataColumn("ItemCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemCode);
                this.columnItemName = new global::System.Data.DataColumn("ItemName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemName);
                this.columnRequestedQty = new global::System.Data.DataColumn("RequestedQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestedQty);
                this.columnSuggestedQty = new global::System.Data.DataColumn("SuggestedQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSuggestedQty);
                this.columnApprovedHOQty = new global::System.Data.DataColumn("ApprovedHOQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedHOQty);
                this.columnApprovedTOQty = new global::System.Data.DataColumn("ApprovedTOQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedTOQty);
                this.columnApprovedPOQty = new global::System.Data.DataColumn("ApprovedPOQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedPOQty);
                this.columnLocationName = new global::System.Data.DataColumn("LocationName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationName);
                this.columnAvgSaleFactor = new global::System.Data.DataColumn("AvgSaleFactor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvgSaleFactor);
                this.columnStockInHand = new global::System.Data.DataColumn("StockInHand", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockInHand);
                this.columnStockInTransit = new global::System.Data.DataColumn("StockInTransit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockInTransit);
                this.columnAvgStockTransfer = new global::System.Data.DataColumn("AvgStockTransfer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvgStockTransfer);
                this.columnTotalStock = new global::System.Data.DataColumn("TotalStock", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalStock);
                this.columnTotalSaleTransfer = new global::System.Data.DataColumn("TotalSaleTransfer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSaleTransfer);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndentScreenDetailDataTableRow NewIndentScreenDetailDataTableRow() {
                return ((IndentScreenDetailDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new IndentScreenDetailDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(IndentScreenDetailDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IndentScreenDetailDataTableRowChanged != null)) {
                    this.IndentScreenDetailDataTableRowChanged(this, new IndentScreenDetailDataTableRowChangeEvent(((IndentScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IndentScreenDetailDataTableRowChanging != null)) {
                    this.IndentScreenDetailDataTableRowChanging(this, new IndentScreenDetailDataTableRowChangeEvent(((IndentScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IndentScreenDetailDataTableRowDeleted != null)) {
                    this.IndentScreenDetailDataTableRowDeleted(this, new IndentScreenDetailDataTableRowChangeEvent(((IndentScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IndentScreenDetailDataTableRowDeleting != null)) {
                    this.IndentScreenDetailDataTableRowDeleting(this, new IndentScreenDetailDataTableRowChangeEvent(((IndentScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIndentScreenDetailDataTableRow(IndentScreenDetailDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndentScreen ds = new IndentScreen();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IndentScreenDetailDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IndentScreenHeaderDataTableRow : global::System.Data.DataRow {
            
            private IndentScreenHeaderDataTableDataTable tableIndentScreenHeaderDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IndentScreenHeaderDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIndentScreenHeaderDataTable = ((IndentScreenHeaderDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Create {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenHeaderDataTable.CreateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Create\' in table \'IndentScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenHeaderDataTable.CreateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationCode {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenHeaderDataTable.LocationCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationCode\' in table \'IndentScreenHeaderDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenHeaderDataTable.LocationCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenHeaderDataTable.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'IndentScreenHeaderDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableIndentScreenHeaderDataTable.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IndentNo {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenHeaderDataTable.IndentNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IndentNo\' in table \'IndentScreenHeaderDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableIndentScreenHeaderDataTable.IndentNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenHeaderDataTable.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'IndentScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenHeaderDataTable.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenHeaderDataTable.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark\' in table \'IndentScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenHeaderDataTable.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IndentDate {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenHeaderDataTable.IndentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IndentDate\' in table \'IndentScreenHeaderDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenHeaderDataTable.IndentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApprovedDate {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenHeaderDataTable.ApprovedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedDate\' in table \'IndentScreenHeaderDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenHeaderDataTable.ApprovedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CityName {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenHeaderDataTable.CityNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CityName\' in table \'IndentScreenHeaderDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableIndentScreenHeaderDataTable.CityNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreateNull() {
                return this.IsNull(this.tableIndentScreenHeaderDataTable.CreateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreateNull() {
                this[this.tableIndentScreenHeaderDataTable.CreateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationCodeNull() {
                return this.IsNull(this.tableIndentScreenHeaderDataTable.LocationCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationCodeNull() {
                this[this.tableIndentScreenHeaderDataTable.LocationCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tableIndentScreenHeaderDataTable.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tableIndentScreenHeaderDataTable.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndentNoNull() {
                return this.IsNull(this.tableIndentScreenHeaderDataTable.IndentNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndentNoNull() {
                this[this.tableIndentScreenHeaderDataTable.IndentNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableIndentScreenHeaderDataTable.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableIndentScreenHeaderDataTable.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tableIndentScreenHeaderDataTable.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tableIndentScreenHeaderDataTable.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndentDateNull() {
                return this.IsNull(this.tableIndentScreenHeaderDataTable.IndentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndentDateNull() {
                this[this.tableIndentScreenHeaderDataTable.IndentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedDateNull() {
                return this.IsNull(this.tableIndentScreenHeaderDataTable.ApprovedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedDateNull() {
                this[this.tableIndentScreenHeaderDataTable.ApprovedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNameNull() {
                return this.IsNull(this.tableIndentScreenHeaderDataTable.CityNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNameNull() {
                this[this.tableIndentScreenHeaderDataTable.CityNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IndentScreenDetailDataTableRow : global::System.Data.DataRow {
            
            private IndentScreenDetailDataTableDataTable tableIndentScreenDetailDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IndentScreenDetailDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIndentScreenDetailDataTable = ((IndentScreenDetailDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemCode {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenDetailDataTable.ItemCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemCode\' in table \'IndentScreenDetailDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableIndentScreenDetailDataTable.ItemCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemName {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenDetailDataTable.ItemNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemName\' in table \'IndentScreenDetailDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableIndentScreenDetailDataTable.ItemNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RequestedQty {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenDetailDataTable.RequestedQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestedQty\' in table \'IndentScreenDetailDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenDetailDataTable.RequestedQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SuggestedQty {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenDetailDataTable.SuggestedQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SuggestedQty\' in table \'IndentScreenDetailDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenDetailDataTable.SuggestedQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApprovedHOQty {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenDetailDataTable.ApprovedHOQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedHOQty\' in table \'IndentScreenDetailDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenDetailDataTable.ApprovedHOQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApprovedTOQty {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenDetailDataTable.ApprovedTOQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedTOQty\' in table \'IndentScreenDetailDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenDetailDataTable.ApprovedTOQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApprovedPOQty {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenDetailDataTable.ApprovedPOQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedPOQty\' in table \'IndentScreenDetailDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenDetailDataTable.ApprovedPOQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationName {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenDetailDataTable.LocationNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationName\' in table \'IndentScreenDetailDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenDetailDataTable.LocationNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AvgSaleFactor {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenDetailDataTable.AvgSaleFactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AvgSaleFactor\' in table \'IndentScreenDetailDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenDetailDataTable.AvgSaleFactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockInHand {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenDetailDataTable.StockInHandColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StockInHand\' in table \'IndentScreenDetailDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenDetailDataTable.StockInHandColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockInTransit {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenDetailDataTable.StockInTransitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StockInTransit\' in table \'IndentScreenDetailDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenDetailDataTable.StockInTransitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AvgStockTransfer {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenDetailDataTable.AvgStockTransferColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AvgStockTransfer\' in table \'IndentScreenDetailDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenDetailDataTable.AvgStockTransferColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalStock {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenDetailDataTable.TotalStockColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalStock\' in table \'IndentScreenDetailDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenDetailDataTable.TotalStockColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalSaleTransfer {
                get {
                    try {
                        return ((string)(this[this.tableIndentScreenDetailDataTable.TotalSaleTransferColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalSaleTransfer\' in table \'IndentScreenDetailDataTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableIndentScreenDetailDataTable.TotalSaleTransferColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemCodeNull() {
                return this.IsNull(this.tableIndentScreenDetailDataTable.ItemCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemCodeNull() {
                this[this.tableIndentScreenDetailDataTable.ItemCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNameNull() {
                return this.IsNull(this.tableIndentScreenDetailDataTable.ItemNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNameNull() {
                this[this.tableIndentScreenDetailDataTable.ItemNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestedQtyNull() {
                return this.IsNull(this.tableIndentScreenDetailDataTable.RequestedQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestedQtyNull() {
                this[this.tableIndentScreenDetailDataTable.RequestedQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSuggestedQtyNull() {
                return this.IsNull(this.tableIndentScreenDetailDataTable.SuggestedQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSuggestedQtyNull() {
                this[this.tableIndentScreenDetailDataTable.SuggestedQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedHOQtyNull() {
                return this.IsNull(this.tableIndentScreenDetailDataTable.ApprovedHOQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedHOQtyNull() {
                this[this.tableIndentScreenDetailDataTable.ApprovedHOQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedTOQtyNull() {
                return this.IsNull(this.tableIndentScreenDetailDataTable.ApprovedTOQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedTOQtyNull() {
                this[this.tableIndentScreenDetailDataTable.ApprovedTOQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedPOQtyNull() {
                return this.IsNull(this.tableIndentScreenDetailDataTable.ApprovedPOQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedPOQtyNull() {
                this[this.tableIndentScreenDetailDataTable.ApprovedPOQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNameNull() {
                return this.IsNull(this.tableIndentScreenDetailDataTable.LocationNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNameNull() {
                this[this.tableIndentScreenDetailDataTable.LocationNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvgSaleFactorNull() {
                return this.IsNull(this.tableIndentScreenDetailDataTable.AvgSaleFactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvgSaleFactorNull() {
                this[this.tableIndentScreenDetailDataTable.AvgSaleFactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockInHandNull() {
                return this.IsNull(this.tableIndentScreenDetailDataTable.StockInHandColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockInHandNull() {
                this[this.tableIndentScreenDetailDataTable.StockInHandColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockInTransitNull() {
                return this.IsNull(this.tableIndentScreenDetailDataTable.StockInTransitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockInTransitNull() {
                this[this.tableIndentScreenDetailDataTable.StockInTransitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvgStockTransferNull() {
                return this.IsNull(this.tableIndentScreenDetailDataTable.AvgStockTransferColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvgStockTransferNull() {
                this[this.tableIndentScreenDetailDataTable.AvgStockTransferColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalStockNull() {
                return this.IsNull(this.tableIndentScreenDetailDataTable.TotalStockColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalStockNull() {
                this[this.tableIndentScreenDetailDataTable.TotalStockColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalSaleTransferNull() {
                return this.IsNull(this.tableIndentScreenDetailDataTable.TotalSaleTransferColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalSaleTransferNull() {
                this[this.tableIndentScreenDetailDataTable.TotalSaleTransferColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IndentScreenHeaderDataTableRowChangeEvent : global::System.EventArgs {
            
            private IndentScreenHeaderDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndentScreenHeaderDataTableRowChangeEvent(IndentScreenHeaderDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndentScreenHeaderDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IndentScreenDetailDataTableRowChangeEvent : global::System.EventArgs {
            
            private IndentScreenDetailDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndentScreenDetailDataTableRowChangeEvent(IndentScreenDetailDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IndentScreenDetailDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591