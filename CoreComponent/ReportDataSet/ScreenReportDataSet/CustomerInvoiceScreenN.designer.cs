//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CoreComponent.ReportDataSet.ScreenReportDataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("CustomerInvoiceScreenN")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class CustomerInvoiceScreenN : global::System.Data.DataSet {
        
        private CustomerOrderDataTable tableCustomerOrder;
        
        private PaymentDetailDataTable tablePaymentDetail;
        
        private TaxDetailDataTable tableTaxDetail;
        
        private CustomerOrderDetailDataTable tableCustomerOrderDetail;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CustomerInvoiceScreenN() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CustomerInvoiceScreenN(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["CustomerOrder"] != null)) {
                    base.Tables.Add(new CustomerOrderDataTable(ds.Tables["CustomerOrder"]));
                }
                if ((ds.Tables["PaymentDetail"] != null)) {
                    base.Tables.Add(new PaymentDetailDataTable(ds.Tables["PaymentDetail"]));
                }
                if ((ds.Tables["TaxDetail"] != null)) {
                    base.Tables.Add(new TaxDetailDataTable(ds.Tables["TaxDetail"]));
                }
                if ((ds.Tables["CustomerOrderDetail"] != null)) {
                    base.Tables.Add(new CustomerOrderDetailDataTable(ds.Tables["CustomerOrderDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomerOrderDataTable CustomerOrder {
            get {
                return this.tableCustomerOrder;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaymentDetailDataTable PaymentDetail {
            get {
                return this.tablePaymentDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TaxDetailDataTable TaxDetail {
            get {
                return this.tableTaxDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomerOrderDetailDataTable CustomerOrderDetail {
            get {
                return this.tableCustomerOrderDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            CustomerInvoiceScreenN cln = ((CustomerInvoiceScreenN)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CustomerOrder"] != null)) {
                    base.Tables.Add(new CustomerOrderDataTable(ds.Tables["CustomerOrder"]));
                }
                if ((ds.Tables["PaymentDetail"] != null)) {
                    base.Tables.Add(new PaymentDetailDataTable(ds.Tables["PaymentDetail"]));
                }
                if ((ds.Tables["TaxDetail"] != null)) {
                    base.Tables.Add(new TaxDetailDataTable(ds.Tables["TaxDetail"]));
                }
                if ((ds.Tables["CustomerOrderDetail"] != null)) {
                    base.Tables.Add(new CustomerOrderDetailDataTable(ds.Tables["CustomerOrderDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCustomerOrder = ((CustomerOrderDataTable)(base.Tables["CustomerOrder"]));
            if ((initTable == true)) {
                if ((this.tableCustomerOrder != null)) {
                    this.tableCustomerOrder.InitVars();
                }
            }
            this.tablePaymentDetail = ((PaymentDetailDataTable)(base.Tables["PaymentDetail"]));
            if ((initTable == true)) {
                if ((this.tablePaymentDetail != null)) {
                    this.tablePaymentDetail.InitVars();
                }
            }
            this.tableTaxDetail = ((TaxDetailDataTable)(base.Tables["TaxDetail"]));
            if ((initTable == true)) {
                if ((this.tableTaxDetail != null)) {
                    this.tableTaxDetail.InitVars();
                }
            }
            this.tableCustomerOrderDetail = ((CustomerOrderDetailDataTable)(base.Tables["CustomerOrderDetail"]));
            if ((initTable == true)) {
                if ((this.tableCustomerOrderDetail != null)) {
                    this.tableCustomerOrderDetail.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "CustomerInvoiceScreenN";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/CustomerInvoiceScreenN.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCustomerOrder = new CustomerOrderDataTable();
            base.Tables.Add(this.tableCustomerOrder);
            this.tablePaymentDetail = new PaymentDetailDataTable();
            base.Tables.Add(this.tablePaymentDetail);
            this.tableTaxDetail = new TaxDetailDataTable();
            base.Tables.Add(this.tableTaxDetail);
            this.tableCustomerOrderDetail = new CustomerOrderDetailDataTable();
            base.Tables.Add(this.tableCustomerOrderDetail);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomerOrder() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePaymentDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTaxDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomerOrderDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            CustomerInvoiceScreenN ds = new CustomerInvoiceScreenN();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void CustomerOrderRowChangeEventHandler(object sender, CustomerOrderRowChangeEvent e);
        
        public delegate void PaymentDetailRowChangeEventHandler(object sender, PaymentDetailRowChangeEvent e);
        
        public delegate void TaxDetailRowChangeEventHandler(object sender, TaxDetailRowChangeEvent e);
        
        public delegate void CustomerOrderDetailRowChangeEventHandler(object sender, CustomerOrderDetailRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomerOrderDataTable : global::System.Data.TypedTableBase<CustomerOrderRow> {
            
            private global::System.Data.DataColumn columnCustomerOrderNo;
            
            private global::System.Data.DataColumn columnDateText;
            
            private global::System.Data.DataColumn columnDistributorId;
            
            private global::System.Data.DataColumn columnDeliverToAddressLine1;
            
            private global::System.Data.DataColumn columnDeliverToAddressLine2;
            
            private global::System.Data.DataColumn columnDeliverToAddressLine3;
            
            private global::System.Data.DataColumn columnDeliverToAddressLine4;
            
            private global::System.Data.DataColumn columnToCity;
            
            private global::System.Data.DataColumn columnToState;
            
            private global::System.Data.DataColumn columnToCountry;
            
            private global::System.Data.DataColumn columnDeliverToTelephone;
            
            private global::System.Data.DataColumn columnDeliverToMobile;
            
            private global::System.Data.DataColumn columnTotalUnits;
            
            private global::System.Data.DataColumn columnTotalWeight;
            
            private global::System.Data.DataColumn columnOrderAmount;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            private global::System.Data.DataColumn columnDeliverFromAddress1;
            
            private global::System.Data.DataColumn columnDeliverFromAddress2;
            
            private global::System.Data.DataColumn columnDeliverFromAddress3;
            
            private global::System.Data.DataColumn columnDeliverFromAddress4;
            
            private global::System.Data.DataColumn columnFromCity;
            
            private global::System.Data.DataColumn columnFromState;
            
            private global::System.Data.DataColumn columnFromCountry;
            
            private global::System.Data.DataColumn columnDeliverFromTelephone;
            
            private global::System.Data.DataColumn columnDeliverFromMobile;
            
            private global::System.Data.DataColumn columnDistributorAddress;
            
            private global::System.Data.DataColumn columnTotalBV;
            
            private global::System.Data.DataColumn columnTotalPV;
            
            private global::System.Data.DataColumn columnDeliverToPincode;
            
            private global::System.Data.DataColumn columnHeaderAddress;
            
            private global::System.Data.DataColumn columnAddressText;
            
            private global::System.Data.DataColumn columnPaymentAmount;
            
            private global::System.Data.DataColumn columnChangeAmount;
            
            private global::System.Data.DataColumn columnTINNo;
            
            private global::System.Data.DataColumn columnDistributorName;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnDeliverFromPincode;
            
            private global::System.Data.DataColumn columnOrderAmountWords;
            
            private global::System.Data.DataColumn columnPassword;
            
            private global::System.Data.DataColumn columnLogNo;
            
            private global::System.Data.DataColumn columnOrderType;
            
            private global::System.Data.DataColumn columnPCContactName;
            
            private global::System.Data.DataColumn columnUplineDistributorId;
            
            private global::System.Data.DataColumn columnUplineName;
            
            private global::System.Data.DataColumn columnKitType;
            
            private global::System.Data.DataColumn columnOrderMode;
            
            private global::System.Data.DataColumn columnDiscountAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerOrderDataTable() {
                this.TableName = "CustomerOrder";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerOrderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomerOrderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerOrderNoColumn {
                get {
                    return this.columnCustomerOrderNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTextColumn {
                get {
                    return this.columnDateText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributorIdColumn {
                get {
                    return this.columnDistributorId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliverToAddressLine1Column {
                get {
                    return this.columnDeliverToAddressLine1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliverToAddressLine2Column {
                get {
                    return this.columnDeliverToAddressLine2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliverToAddressLine3Column {
                get {
                    return this.columnDeliverToAddressLine3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliverToAddressLine4Column {
                get {
                    return this.columnDeliverToAddressLine4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToCityColumn {
                get {
                    return this.columnToCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToStateColumn {
                get {
                    return this.columnToState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToCountryColumn {
                get {
                    return this.columnToCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliverToTelephoneColumn {
                get {
                    return this.columnDeliverToTelephone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliverToMobileColumn {
                get {
                    return this.columnDeliverToMobile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsColumn {
                get {
                    return this.columnTotalUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalWeightColumn {
                get {
                    return this.columnTotalWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderAmountColumn {
                get {
                    return this.columnOrderAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliverFromAddress1Column {
                get {
                    return this.columnDeliverFromAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliverFromAddress2Column {
                get {
                    return this.columnDeliverFromAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliverFromAddress3Column {
                get {
                    return this.columnDeliverFromAddress3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliverFromAddress4Column {
                get {
                    return this.columnDeliverFromAddress4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromCityColumn {
                get {
                    return this.columnFromCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromStateColumn {
                get {
                    return this.columnFromState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromCountryColumn {
                get {
                    return this.columnFromCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliverFromTelephoneColumn {
                get {
                    return this.columnDeliverFromTelephone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliverFromMobileColumn {
                get {
                    return this.columnDeliverFromMobile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributorAddressColumn {
                get {
                    return this.columnDistributorAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalBVColumn {
                get {
                    return this.columnTotalBV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPVColumn {
                get {
                    return this.columnTotalPV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliverToPincodeColumn {
                get {
                    return this.columnDeliverToPincode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeaderAddressColumn {
                get {
                    return this.columnHeaderAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressTextColumn {
                get {
                    return this.columnAddressText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentAmountColumn {
                get {
                    return this.columnPaymentAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChangeAmountColumn {
                get {
                    return this.columnChangeAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TINNoColumn {
                get {
                    return this.columnTINNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributorNameColumn {
                get {
                    return this.columnDistributorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliverFromPincodeColumn {
                get {
                    return this.columnDeliverFromPincode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderAmountWordsColumn {
                get {
                    return this.columnOrderAmountWords;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogNoColumn {
                get {
                    return this.columnLogNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderTypeColumn {
                get {
                    return this.columnOrderType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PCContactNameColumn {
                get {
                    return this.columnPCContactName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UplineDistributorIdColumn {
                get {
                    return this.columnUplineDistributorId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UplineNameColumn {
                get {
                    return this.columnUplineName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KitTypeColumn {
                get {
                    return this.columnKitType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderModeColumn {
                get {
                    return this.columnOrderMode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiscountAmountColumn {
                get {
                    return this.columnDiscountAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerOrderRow this[int index] {
                get {
                    return ((CustomerOrderRow)(this.Rows[index]));
                }
            }
            
            public event CustomerOrderRowChangeEventHandler CustomerOrderRowChanging;
            
            public event CustomerOrderRowChangeEventHandler CustomerOrderRowChanged;
            
            public event CustomerOrderRowChangeEventHandler CustomerOrderRowDeleting;
            
            public event CustomerOrderRowChangeEventHandler CustomerOrderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomerOrderRow(CustomerOrderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerOrderRow AddCustomerOrderRow(
                        string CustomerOrderNo, 
                        string DateText, 
                        string DistributorId, 
                        string DeliverToAddressLine1, 
                        string DeliverToAddressLine2, 
                        string DeliverToAddressLine3, 
                        string DeliverToAddressLine4, 
                        string ToCity, 
                        string ToState, 
                        string ToCountry, 
                        string DeliverToTelephone, 
                        string DeliverToMobile, 
                        string TotalUnits, 
                        string TotalWeight, 
                        string OrderAmount, 
                        string TaxAmount, 
                        string DeliverFromAddress1, 
                        string DeliverFromAddress2, 
                        string DeliverFromAddress3, 
                        string DeliverFromAddress4, 
                        string FromCity, 
                        string FromState, 
                        string FromCountry, 
                        string DeliverFromTelephone, 
                        string DeliverFromMobile, 
                        string DistributorAddress, 
                        string TotalBV, 
                        string TotalPV, 
                        string DeliverToPincode, 
                        string HeaderAddress, 
                        string AddressText, 
                        string PaymentAmount, 
                        string ChangeAmount, 
                        string TINNo, 
                        string DistributorName, 
                        string UserName, 
                        string DeliverFromPincode, 
                        string OrderAmountWords, 
                        string Password, 
                        string LogNo, 
                        string OrderType, 
                        string PCContactName, 
                        string UplineDistributorId, 
                        string UplineName, 
                        string KitType, 
                        string OrderMode, 
                        string DiscountAmount) {
                CustomerOrderRow rowCustomerOrderRow = ((CustomerOrderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerOrderNo,
                        DateText,
                        DistributorId,
                        DeliverToAddressLine1,
                        DeliverToAddressLine2,
                        DeliverToAddressLine3,
                        DeliverToAddressLine4,
                        ToCity,
                        ToState,
                        ToCountry,
                        DeliverToTelephone,
                        DeliverToMobile,
                        TotalUnits,
                        TotalWeight,
                        OrderAmount,
                        TaxAmount,
                        DeliverFromAddress1,
                        DeliverFromAddress2,
                        DeliverFromAddress3,
                        DeliverFromAddress4,
                        FromCity,
                        FromState,
                        FromCountry,
                        DeliverFromTelephone,
                        DeliverFromMobile,
                        DistributorAddress,
                        TotalBV,
                        TotalPV,
                        DeliverToPincode,
                        HeaderAddress,
                        AddressText,
                        PaymentAmount,
                        ChangeAmount,
                        TINNo,
                        DistributorName,
                        UserName,
                        DeliverFromPincode,
                        OrderAmountWords,
                        Password,
                        LogNo,
                        OrderType,
                        PCContactName,
                        UplineDistributorId,
                        UplineName,
                        KitType,
                        OrderMode,
                        DiscountAmount};
                rowCustomerOrderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCustomerOrderRow);
                return rowCustomerOrderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CustomerOrderDataTable cln = ((CustomerOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CustomerOrderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerOrderNo = base.Columns["CustomerOrderNo"];
                this.columnDateText = base.Columns["DateText"];
                this.columnDistributorId = base.Columns["DistributorId"];
                this.columnDeliverToAddressLine1 = base.Columns["DeliverToAddressLine1"];
                this.columnDeliverToAddressLine2 = base.Columns["DeliverToAddressLine2"];
                this.columnDeliverToAddressLine3 = base.Columns["DeliverToAddressLine3"];
                this.columnDeliverToAddressLine4 = base.Columns["DeliverToAddressLine4"];
                this.columnToCity = base.Columns["ToCity"];
                this.columnToState = base.Columns["ToState"];
                this.columnToCountry = base.Columns["ToCountry"];
                this.columnDeliverToTelephone = base.Columns["DeliverToTelephone"];
                this.columnDeliverToMobile = base.Columns["DeliverToMobile"];
                this.columnTotalUnits = base.Columns["TotalUnits"];
                this.columnTotalWeight = base.Columns["TotalWeight"];
                this.columnOrderAmount = base.Columns["OrderAmount"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnDeliverFromAddress1 = base.Columns["DeliverFromAddress1"];
                this.columnDeliverFromAddress2 = base.Columns["DeliverFromAddress2"];
                this.columnDeliverFromAddress3 = base.Columns["DeliverFromAddress3"];
                this.columnDeliverFromAddress4 = base.Columns["DeliverFromAddress4"];
                this.columnFromCity = base.Columns["FromCity"];
                this.columnFromState = base.Columns["FromState"];
                this.columnFromCountry = base.Columns["FromCountry"];
                this.columnDeliverFromTelephone = base.Columns["DeliverFromTelephone"];
                this.columnDeliverFromMobile = base.Columns["DeliverFromMobile"];
                this.columnDistributorAddress = base.Columns["DistributorAddress"];
                this.columnTotalBV = base.Columns["TotalBV"];
                this.columnTotalPV = base.Columns["TotalPV"];
                this.columnDeliverToPincode = base.Columns["DeliverToPincode"];
                this.columnHeaderAddress = base.Columns["HeaderAddress"];
                this.columnAddressText = base.Columns["AddressText"];
                this.columnPaymentAmount = base.Columns["PaymentAmount"];
                this.columnChangeAmount = base.Columns["ChangeAmount"];
                this.columnTINNo = base.Columns["TINNo"];
                this.columnDistributorName = base.Columns["DistributorName"];
                this.columnUserName = base.Columns["UserName"];
                this.columnDeliverFromPincode = base.Columns["DeliverFromPincode"];
                this.columnOrderAmountWords = base.Columns["OrderAmountWords"];
                this.columnPassword = base.Columns["Password"];
                this.columnLogNo = base.Columns["LogNo"];
                this.columnOrderType = base.Columns["OrderType"];
                this.columnPCContactName = base.Columns["PCContactName"];
                this.columnUplineDistributorId = base.Columns["UplineDistributorId"];
                this.columnUplineName = base.Columns["UplineName"];
                this.columnKitType = base.Columns["KitType"];
                this.columnOrderMode = base.Columns["OrderMode"];
                this.columnDiscountAmount = base.Columns["DiscountAmount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerOrderNo = new global::System.Data.DataColumn("CustomerOrderNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerOrderNo);
                this.columnDateText = new global::System.Data.DataColumn("DateText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateText);
                this.columnDistributorId = new global::System.Data.DataColumn("DistributorId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributorId);
                this.columnDeliverToAddressLine1 = new global::System.Data.DataColumn("DeliverToAddressLine1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliverToAddressLine1);
                this.columnDeliverToAddressLine2 = new global::System.Data.DataColumn("DeliverToAddressLine2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliverToAddressLine2);
                this.columnDeliverToAddressLine3 = new global::System.Data.DataColumn("DeliverToAddressLine3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliverToAddressLine3);
                this.columnDeliverToAddressLine4 = new global::System.Data.DataColumn("DeliverToAddressLine4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliverToAddressLine4);
                this.columnToCity = new global::System.Data.DataColumn("ToCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToCity);
                this.columnToState = new global::System.Data.DataColumn("ToState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToState);
                this.columnToCountry = new global::System.Data.DataColumn("ToCountry", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToCountry);
                this.columnDeliverToTelephone = new global::System.Data.DataColumn("DeliverToTelephone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliverToTelephone);
                this.columnDeliverToMobile = new global::System.Data.DataColumn("DeliverToMobile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliverToMobile);
                this.columnTotalUnits = new global::System.Data.DataColumn("TotalUnits", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnits);
                this.columnTotalWeight = new global::System.Data.DataColumn("TotalWeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalWeight);
                this.columnOrderAmount = new global::System.Data.DataColumn("OrderAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderAmount);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnDeliverFromAddress1 = new global::System.Data.DataColumn("DeliverFromAddress1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliverFromAddress1);
                this.columnDeliverFromAddress2 = new global::System.Data.DataColumn("DeliverFromAddress2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliverFromAddress2);
                this.columnDeliverFromAddress3 = new global::System.Data.DataColumn("DeliverFromAddress3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliverFromAddress3);
                this.columnDeliverFromAddress4 = new global::System.Data.DataColumn("DeliverFromAddress4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliverFromAddress4);
                this.columnFromCity = new global::System.Data.DataColumn("FromCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromCity);
                this.columnFromState = new global::System.Data.DataColumn("FromState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromState);
                this.columnFromCountry = new global::System.Data.DataColumn("FromCountry", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromCountry);
                this.columnDeliverFromTelephone = new global::System.Data.DataColumn("DeliverFromTelephone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliverFromTelephone);
                this.columnDeliverFromMobile = new global::System.Data.DataColumn("DeliverFromMobile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliverFromMobile);
                this.columnDistributorAddress = new global::System.Data.DataColumn("DistributorAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributorAddress);
                this.columnTotalBV = new global::System.Data.DataColumn("TotalBV", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalBV);
                this.columnTotalPV = new global::System.Data.DataColumn("TotalPV", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPV);
                this.columnDeliverToPincode = new global::System.Data.DataColumn("DeliverToPincode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliverToPincode);
                this.columnHeaderAddress = new global::System.Data.DataColumn("HeaderAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeaderAddress);
                this.columnAddressText = new global::System.Data.DataColumn("AddressText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddressText);
                this.columnPaymentAmount = new global::System.Data.DataColumn("PaymentAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentAmount);
                this.columnChangeAmount = new global::System.Data.DataColumn("ChangeAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChangeAmount);
                this.columnTINNo = new global::System.Data.DataColumn("TINNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTINNo);
                this.columnDistributorName = new global::System.Data.DataColumn("DistributorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributorName);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnDeliverFromPincode = new global::System.Data.DataColumn("DeliverFromPincode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliverFromPincode);
                this.columnOrderAmountWords = new global::System.Data.DataColumn("OrderAmountWords", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderAmountWords);
                this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnLogNo = new global::System.Data.DataColumn("LogNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogNo);
                this.columnOrderType = new global::System.Data.DataColumn("OrderType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderType);
                this.columnPCContactName = new global::System.Data.DataColumn("PCContactName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPCContactName);
                this.columnUplineDistributorId = new global::System.Data.DataColumn("UplineDistributorId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUplineDistributorId);
                this.columnUplineName = new global::System.Data.DataColumn("UplineName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUplineName);
                this.columnKitType = new global::System.Data.DataColumn("KitType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKitType);
                this.columnOrderMode = new global::System.Data.DataColumn("OrderMode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderMode);
                this.columnDiscountAmount = new global::System.Data.DataColumn("DiscountAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscountAmount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerOrderRow NewCustomerOrderRow() {
                return ((CustomerOrderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CustomerOrderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CustomerOrderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomerOrderRowChanged != null)) {
                    this.CustomerOrderRowChanged(this, new CustomerOrderRowChangeEvent(((CustomerOrderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomerOrderRowChanging != null)) {
                    this.CustomerOrderRowChanging(this, new CustomerOrderRowChangeEvent(((CustomerOrderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomerOrderRowDeleted != null)) {
                    this.CustomerOrderRowDeleted(this, new CustomerOrderRowChangeEvent(((CustomerOrderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomerOrderRowDeleting != null)) {
                    this.CustomerOrderRowDeleting(this, new CustomerOrderRowChangeEvent(((CustomerOrderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomerOrderRow(CustomerOrderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CustomerInvoiceScreenN ds = new CustomerInvoiceScreenN();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomerOrderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PaymentDetailDataTable : global::System.Data.TypedTableBase<PaymentDetailRow> {
            
            private global::System.Data.DataColumn columnRecordNo;
            
            private global::System.Data.DataColumn columnReceiptDisplay;
            
            private global::System.Data.DataColumn columnPaymentAmount;
            
            private global::System.Data.DataColumn columnCurrencyCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentDetailDataTable() {
                this.TableName = "PaymentDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaymentDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PaymentDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordNoColumn {
                get {
                    return this.columnRecordNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptDisplayColumn {
                get {
                    return this.columnReceiptDisplay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentAmountColumn {
                get {
                    return this.columnPaymentAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrencyCodeColumn {
                get {
                    return this.columnCurrencyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentDetailRow this[int index] {
                get {
                    return ((PaymentDetailRow)(this.Rows[index]));
                }
            }
            
            public event PaymentDetailRowChangeEventHandler PaymentDetailRowChanging;
            
            public event PaymentDetailRowChangeEventHandler PaymentDetailRowChanged;
            
            public event PaymentDetailRowChangeEventHandler PaymentDetailRowDeleting;
            
            public event PaymentDetailRowChangeEventHandler PaymentDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPaymentDetailRow(PaymentDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentDetailRow AddPaymentDetailRow(string RecordNo, string ReceiptDisplay, string PaymentAmount, string CurrencyCode) {
                PaymentDetailRow rowPaymentDetailRow = ((PaymentDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RecordNo,
                        ReceiptDisplay,
                        PaymentAmount,
                        CurrencyCode};
                rowPaymentDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPaymentDetailRow);
                return rowPaymentDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PaymentDetailDataTable cln = ((PaymentDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PaymentDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRecordNo = base.Columns["RecordNo"];
                this.columnReceiptDisplay = base.Columns["ReceiptDisplay"];
                this.columnPaymentAmount = base.Columns["PaymentAmount"];
                this.columnCurrencyCode = base.Columns["CurrencyCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRecordNo = new global::System.Data.DataColumn("RecordNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordNo);
                this.columnReceiptDisplay = new global::System.Data.DataColumn("ReceiptDisplay", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptDisplay);
                this.columnPaymentAmount = new global::System.Data.DataColumn("PaymentAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentAmount);
                this.columnCurrencyCode = new global::System.Data.DataColumn("CurrencyCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrencyCode);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentDetailRow NewPaymentDetailRow() {
                return ((PaymentDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PaymentDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PaymentDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaymentDetailRowChanged != null)) {
                    this.PaymentDetailRowChanged(this, new PaymentDetailRowChangeEvent(((PaymentDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaymentDetailRowChanging != null)) {
                    this.PaymentDetailRowChanging(this, new PaymentDetailRowChangeEvent(((PaymentDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaymentDetailRowDeleted != null)) {
                    this.PaymentDetailRowDeleted(this, new PaymentDetailRowChangeEvent(((PaymentDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaymentDetailRowDeleting != null)) {
                    this.PaymentDetailRowDeleting(this, new PaymentDetailRowChangeEvent(((PaymentDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePaymentDetailRow(PaymentDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CustomerInvoiceScreenN ds = new CustomerInvoiceScreenN();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaymentDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TaxDetailDataTable : global::System.Data.TypedTableBase<TaxDetailRow> {
            
            private global::System.Data.DataColumn columnTaxCode;
            
            private global::System.Data.DataColumn columnTaxPercent;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxDetailDataTable() {
                this.TableName = "TaxDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TaxDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TaxDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxCodeColumn {
                get {
                    return this.columnTaxCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxPercentColumn {
                get {
                    return this.columnTaxPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxDetailRow this[int index] {
                get {
                    return ((TaxDetailRow)(this.Rows[index]));
                }
            }
            
            public event TaxDetailRowChangeEventHandler TaxDetailRowChanging;
            
            public event TaxDetailRowChangeEventHandler TaxDetailRowChanged;
            
            public event TaxDetailRowChangeEventHandler TaxDetailRowDeleting;
            
            public event TaxDetailRowChangeEventHandler TaxDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTaxDetailRow(TaxDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxDetailRow AddTaxDetailRow(string TaxCode, string TaxPercent, string TaxAmount) {
                TaxDetailRow rowTaxDetailRow = ((TaxDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TaxCode,
                        TaxPercent,
                        TaxAmount};
                rowTaxDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTaxDetailRow);
                return rowTaxDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TaxDetailDataTable cln = ((TaxDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TaxDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTaxCode = base.Columns["TaxCode"];
                this.columnTaxPercent = base.Columns["TaxPercent"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTaxCode = new global::System.Data.DataColumn("TaxCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxCode);
                this.columnTaxPercent = new global::System.Data.DataColumn("TaxPercent", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxPercent);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxDetailRow NewTaxDetailRow() {
                return ((TaxDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TaxDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TaxDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TaxDetailRowChanged != null)) {
                    this.TaxDetailRowChanged(this, new TaxDetailRowChangeEvent(((TaxDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TaxDetailRowChanging != null)) {
                    this.TaxDetailRowChanging(this, new TaxDetailRowChangeEvent(((TaxDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TaxDetailRowDeleted != null)) {
                    this.TaxDetailRowDeleted(this, new TaxDetailRowChangeEvent(((TaxDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TaxDetailRowDeleting != null)) {
                    this.TaxDetailRowDeleting(this, new TaxDetailRowChangeEvent(((TaxDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTaxDetailRow(TaxDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CustomerInvoiceScreenN ds = new CustomerInvoiceScreenN();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TaxDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomerOrderDetailDataTable : global::System.Data.TypedTableBase<CustomerOrderDetailRow> {
            
            private global::System.Data.DataColumn columnRecordNo;
            
            private global::System.Data.DataColumn columnItemCode;
            
            private global::System.Data.DataColumn columnItemName;
            
            private global::System.Data.DataColumn columnUnitPrice;
            
            private global::System.Data.DataColumn columnQty;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            private global::System.Data.DataColumn columnDiscount;
            
            private global::System.Data.DataColumn columnPriceInclTax;
            
            private global::System.Data.DataColumn columnDP;
            
            private global::System.Data.DataColumn columnIsKit;
            
            private global::System.Data.DataColumn columnTaxPercent;
            
            private global::System.Data.DataColumn columnTaxDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerOrderDetailDataTable() {
                this.TableName = "CustomerOrderDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerOrderDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomerOrderDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordNoColumn {
                get {
                    return this.columnRecordNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemCodeColumn {
                get {
                    return this.columnItemCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemNameColumn {
                get {
                    return this.columnItemName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitPriceColumn {
                get {
                    return this.columnUnitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QtyColumn {
                get {
                    return this.columnQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiscountColumn {
                get {
                    return this.columnDiscount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceInclTaxColumn {
                get {
                    return this.columnPriceInclTax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DPColumn {
                get {
                    return this.columnDP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsKitColumn {
                get {
                    return this.columnIsKit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxPercentColumn {
                get {
                    return this.columnTaxPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxDetailColumn {
                get {
                    return this.columnTaxDetail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerOrderDetailRow this[int index] {
                get {
                    return ((CustomerOrderDetailRow)(this.Rows[index]));
                }
            }
            
            public event CustomerOrderDetailRowChangeEventHandler CustomerOrderDetailRowChanging;
            
            public event CustomerOrderDetailRowChangeEventHandler CustomerOrderDetailRowChanged;
            
            public event CustomerOrderDetailRowChangeEventHandler CustomerOrderDetailRowDeleting;
            
            public event CustomerOrderDetailRowChangeEventHandler CustomerOrderDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomerOrderDetailRow(CustomerOrderDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerOrderDetailRow AddCustomerOrderDetailRow(string RecordNo, string ItemCode, string ItemName, string UnitPrice, string Qty, string Amount, string TaxAmount, string Discount, string PriceInclTax, string DP, string IsKit, string TaxPercent, string TaxDetail) {
                CustomerOrderDetailRow rowCustomerOrderDetailRow = ((CustomerOrderDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RecordNo,
                        ItemCode,
                        ItemName,
                        UnitPrice,
                        Qty,
                        Amount,
                        TaxAmount,
                        Discount,
                        PriceInclTax,
                        DP,
                        IsKit,
                        TaxPercent,
                        TaxDetail};
                rowCustomerOrderDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCustomerOrderDetailRow);
                return rowCustomerOrderDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CustomerOrderDetailDataTable cln = ((CustomerOrderDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CustomerOrderDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRecordNo = base.Columns["RecordNo"];
                this.columnItemCode = base.Columns["ItemCode"];
                this.columnItemName = base.Columns["ItemName"];
                this.columnUnitPrice = base.Columns["UnitPrice"];
                this.columnQty = base.Columns["Qty"];
                this.columnAmount = base.Columns["Amount"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnDiscount = base.Columns["Discount"];
                this.columnPriceInclTax = base.Columns["PriceInclTax"];
                this.columnDP = base.Columns["DP"];
                this.columnIsKit = base.Columns["IsKit"];
                this.columnTaxPercent = base.Columns["TaxPercent"];
                this.columnTaxDetail = base.Columns["TaxDetail"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRecordNo = new global::System.Data.DataColumn("RecordNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordNo);
                this.columnItemCode = new global::System.Data.DataColumn("ItemCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemCode);
                this.columnItemName = new global::System.Data.DataColumn("ItemName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemName);
                this.columnUnitPrice = new global::System.Data.DataColumn("UnitPrice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitPrice);
                this.columnQty = new global::System.Data.DataColumn("Qty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQty);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnDiscount = new global::System.Data.DataColumn("Discount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscount);
                this.columnPriceInclTax = new global::System.Data.DataColumn("PriceInclTax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceInclTax);
                this.columnDP = new global::System.Data.DataColumn("DP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDP);
                this.columnIsKit = new global::System.Data.DataColumn("IsKit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsKit);
                this.columnTaxPercent = new global::System.Data.DataColumn("TaxPercent", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxPercent);
                this.columnTaxDetail = new global::System.Data.DataColumn("TaxDetail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxDetail);
                this.columnAmount.Caption = "DataColumn8";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerOrderDetailRow NewCustomerOrderDetailRow() {
                return ((CustomerOrderDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CustomerOrderDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CustomerOrderDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomerOrderDetailRowChanged != null)) {
                    this.CustomerOrderDetailRowChanged(this, new CustomerOrderDetailRowChangeEvent(((CustomerOrderDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomerOrderDetailRowChanging != null)) {
                    this.CustomerOrderDetailRowChanging(this, new CustomerOrderDetailRowChangeEvent(((CustomerOrderDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomerOrderDetailRowDeleted != null)) {
                    this.CustomerOrderDetailRowDeleted(this, new CustomerOrderDetailRowChangeEvent(((CustomerOrderDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomerOrderDetailRowDeleting != null)) {
                    this.CustomerOrderDetailRowDeleting(this, new CustomerOrderDetailRowChangeEvent(((CustomerOrderDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomerOrderDetailRow(CustomerOrderDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CustomerInvoiceScreenN ds = new CustomerInvoiceScreenN();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomerOrderDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomerOrderRow : global::System.Data.DataRow {
            
            private CustomerOrderDataTable tableCustomerOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerOrderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomerOrder = ((CustomerOrderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerOrderNo {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.CustomerOrderNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerOrderNo\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.CustomerOrderNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateText {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DateTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateText\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DateTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributorId {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DistributorIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributorId\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DistributorIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliverToAddressLine1 {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DeliverToAddressLine1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliverToAddressLine1\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DeliverToAddressLine1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliverToAddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DeliverToAddressLine2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliverToAddressLine2\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DeliverToAddressLine2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliverToAddressLine3 {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DeliverToAddressLine3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliverToAddressLine3\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DeliverToAddressLine3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliverToAddressLine4 {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DeliverToAddressLine4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliverToAddressLine4\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DeliverToAddressLine4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToCity {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.ToCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToCity\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.ToCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToState {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.ToStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToState\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.ToStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToCountry {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.ToCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToCountry\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.ToCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliverToTelephone {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DeliverToTelephoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliverToTelephone\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DeliverToTelephoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliverToMobile {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DeliverToMobileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliverToMobile\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DeliverToMobileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalUnits {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.TotalUnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalUnits\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.TotalUnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalWeight {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.TotalWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalWeight\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.TotalWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderAmount {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.OrderAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrderAmount\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.OrderAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxAmount {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliverFromAddress1 {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DeliverFromAddress1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliverFromAddress1\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DeliverFromAddress1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliverFromAddress2 {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DeliverFromAddress2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliverFromAddress2\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DeliverFromAddress2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliverFromAddress3 {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DeliverFromAddress3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliverFromAddress3\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DeliverFromAddress3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliverFromAddress4 {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DeliverFromAddress4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliverFromAddress4\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DeliverFromAddress4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromCity {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.FromCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromCity\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.FromCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromState {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.FromStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromState\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.FromStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromCountry {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.FromCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromCountry\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.FromCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliverFromTelephone {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DeliverFromTelephoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliverFromTelephone\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DeliverFromTelephoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliverFromMobile {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DeliverFromMobileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliverFromMobile\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DeliverFromMobileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributorAddress {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DistributorAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributorAddress\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DistributorAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalBV {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.TotalBVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalBV\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.TotalBVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalPV {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.TotalPVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPV\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.TotalPVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliverToPincode {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DeliverToPincodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliverToPincode\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DeliverToPincodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HeaderAddress {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.HeaderAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeaderAddress\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.HeaderAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddressText {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.AddressTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AddressText\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.AddressTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentAmount {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.PaymentAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentAmount\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.PaymentAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChangeAmount {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.ChangeAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChangeAmount\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.ChangeAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TINNo {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.TINNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TINNo\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.TINNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributorName {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DistributorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributorName\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DistributorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.UserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserName\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliverFromPincode {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DeliverFromPincodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliverFromPincode\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DeliverFromPincodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderAmountWords {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.OrderAmountWordsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrderAmountWords\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.OrderAmountWordsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.PasswordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Password\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.PasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogNo {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.LogNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LogNo\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.LogNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderType {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.OrderTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrderType\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.OrderTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PCContactName {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.PCContactNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PCContactName\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.PCContactNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UplineDistributorId {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.UplineDistributorIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UplineDistributorId\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.UplineDistributorIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UplineName {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.UplineNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UplineName\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.UplineNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KitType {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.KitTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KitType\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.KitTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderMode {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.OrderModeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrderMode\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.OrderModeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiscountAmount {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrder.DiscountAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiscountAmount\' in table \'CustomerOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrder.DiscountAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerOrderNoNull() {
                return this.IsNull(this.tableCustomerOrder.CustomerOrderNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerOrderNoNull() {
                this[this.tableCustomerOrder.CustomerOrderNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateTextNull() {
                return this.IsNull(this.tableCustomerOrder.DateTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateTextNull() {
                this[this.tableCustomerOrder.DateTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributorIdNull() {
                return this.IsNull(this.tableCustomerOrder.DistributorIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributorIdNull() {
                this[this.tableCustomerOrder.DistributorIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliverToAddressLine1Null() {
                return this.IsNull(this.tableCustomerOrder.DeliverToAddressLine1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliverToAddressLine1Null() {
                this[this.tableCustomerOrder.DeliverToAddressLine1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliverToAddressLine2Null() {
                return this.IsNull(this.tableCustomerOrder.DeliverToAddressLine2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliverToAddressLine2Null() {
                this[this.tableCustomerOrder.DeliverToAddressLine2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliverToAddressLine3Null() {
                return this.IsNull(this.tableCustomerOrder.DeliverToAddressLine3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliverToAddressLine3Null() {
                this[this.tableCustomerOrder.DeliverToAddressLine3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliverToAddressLine4Null() {
                return this.IsNull(this.tableCustomerOrder.DeliverToAddressLine4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliverToAddressLine4Null() {
                this[this.tableCustomerOrder.DeliverToAddressLine4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToCityNull() {
                return this.IsNull(this.tableCustomerOrder.ToCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToCityNull() {
                this[this.tableCustomerOrder.ToCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToStateNull() {
                return this.IsNull(this.tableCustomerOrder.ToStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToStateNull() {
                this[this.tableCustomerOrder.ToStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToCountryNull() {
                return this.IsNull(this.tableCustomerOrder.ToCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToCountryNull() {
                this[this.tableCustomerOrder.ToCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliverToTelephoneNull() {
                return this.IsNull(this.tableCustomerOrder.DeliverToTelephoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliverToTelephoneNull() {
                this[this.tableCustomerOrder.DeliverToTelephoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliverToMobileNull() {
                return this.IsNull(this.tableCustomerOrder.DeliverToMobileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliverToMobileNull() {
                this[this.tableCustomerOrder.DeliverToMobileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalUnitsNull() {
                return this.IsNull(this.tableCustomerOrder.TotalUnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalUnitsNull() {
                this[this.tableCustomerOrder.TotalUnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalWeightNull() {
                return this.IsNull(this.tableCustomerOrder.TotalWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalWeightNull() {
                this[this.tableCustomerOrder.TotalWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderAmountNull() {
                return this.IsNull(this.tableCustomerOrder.OrderAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderAmountNull() {
                this[this.tableCustomerOrder.OrderAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tableCustomerOrder.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tableCustomerOrder.TaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliverFromAddress1Null() {
                return this.IsNull(this.tableCustomerOrder.DeliverFromAddress1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliverFromAddress1Null() {
                this[this.tableCustomerOrder.DeliverFromAddress1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliverFromAddress2Null() {
                return this.IsNull(this.tableCustomerOrder.DeliverFromAddress2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliverFromAddress2Null() {
                this[this.tableCustomerOrder.DeliverFromAddress2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliverFromAddress3Null() {
                return this.IsNull(this.tableCustomerOrder.DeliverFromAddress3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliverFromAddress3Null() {
                this[this.tableCustomerOrder.DeliverFromAddress3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliverFromAddress4Null() {
                return this.IsNull(this.tableCustomerOrder.DeliverFromAddress4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliverFromAddress4Null() {
                this[this.tableCustomerOrder.DeliverFromAddress4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromCityNull() {
                return this.IsNull(this.tableCustomerOrder.FromCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromCityNull() {
                this[this.tableCustomerOrder.FromCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromStateNull() {
                return this.IsNull(this.tableCustomerOrder.FromStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromStateNull() {
                this[this.tableCustomerOrder.FromStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromCountryNull() {
                return this.IsNull(this.tableCustomerOrder.FromCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromCountryNull() {
                this[this.tableCustomerOrder.FromCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliverFromTelephoneNull() {
                return this.IsNull(this.tableCustomerOrder.DeliverFromTelephoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliverFromTelephoneNull() {
                this[this.tableCustomerOrder.DeliverFromTelephoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliverFromMobileNull() {
                return this.IsNull(this.tableCustomerOrder.DeliverFromMobileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliverFromMobileNull() {
                this[this.tableCustomerOrder.DeliverFromMobileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributorAddressNull() {
                return this.IsNull(this.tableCustomerOrder.DistributorAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributorAddressNull() {
                this[this.tableCustomerOrder.DistributorAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalBVNull() {
                return this.IsNull(this.tableCustomerOrder.TotalBVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalBVNull() {
                this[this.tableCustomerOrder.TotalBVColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPVNull() {
                return this.IsNull(this.tableCustomerOrder.TotalPVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPVNull() {
                this[this.tableCustomerOrder.TotalPVColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliverToPincodeNull() {
                return this.IsNull(this.tableCustomerOrder.DeliverToPincodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliverToPincodeNull() {
                this[this.tableCustomerOrder.DeliverToPincodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeaderAddressNull() {
                return this.IsNull(this.tableCustomerOrder.HeaderAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeaderAddressNull() {
                this[this.tableCustomerOrder.HeaderAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressTextNull() {
                return this.IsNull(this.tableCustomerOrder.AddressTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressTextNull() {
                this[this.tableCustomerOrder.AddressTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentAmountNull() {
                return this.IsNull(this.tableCustomerOrder.PaymentAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentAmountNull() {
                this[this.tableCustomerOrder.PaymentAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChangeAmountNull() {
                return this.IsNull(this.tableCustomerOrder.ChangeAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChangeAmountNull() {
                this[this.tableCustomerOrder.ChangeAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTINNoNull() {
                return this.IsNull(this.tableCustomerOrder.TINNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTINNoNull() {
                this[this.tableCustomerOrder.TINNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributorNameNull() {
                return this.IsNull(this.tableCustomerOrder.DistributorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributorNameNull() {
                this[this.tableCustomerOrder.DistributorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableCustomerOrder.UserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNameNull() {
                this[this.tableCustomerOrder.UserNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliverFromPincodeNull() {
                return this.IsNull(this.tableCustomerOrder.DeliverFromPincodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliverFromPincodeNull() {
                this[this.tableCustomerOrder.DeliverFromPincodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderAmountWordsNull() {
                return this.IsNull(this.tableCustomerOrder.OrderAmountWordsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderAmountWordsNull() {
                this[this.tableCustomerOrder.OrderAmountWordsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordNull() {
                return this.IsNull(this.tableCustomerOrder.PasswordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordNull() {
                this[this.tableCustomerOrder.PasswordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogNoNull() {
                return this.IsNull(this.tableCustomerOrder.LogNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogNoNull() {
                this[this.tableCustomerOrder.LogNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderTypeNull() {
                return this.IsNull(this.tableCustomerOrder.OrderTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderTypeNull() {
                this[this.tableCustomerOrder.OrderTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPCContactNameNull() {
                return this.IsNull(this.tableCustomerOrder.PCContactNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPCContactNameNull() {
                this[this.tableCustomerOrder.PCContactNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUplineDistributorIdNull() {
                return this.IsNull(this.tableCustomerOrder.UplineDistributorIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUplineDistributorIdNull() {
                this[this.tableCustomerOrder.UplineDistributorIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUplineNameNull() {
                return this.IsNull(this.tableCustomerOrder.UplineNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUplineNameNull() {
                this[this.tableCustomerOrder.UplineNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKitTypeNull() {
                return this.IsNull(this.tableCustomerOrder.KitTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKitTypeNull() {
                this[this.tableCustomerOrder.KitTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderModeNull() {
                return this.IsNull(this.tableCustomerOrder.OrderModeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderModeNull() {
                this[this.tableCustomerOrder.OrderModeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscountAmountNull() {
                return this.IsNull(this.tableCustomerOrder.DiscountAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscountAmountNull() {
                this[this.tableCustomerOrder.DiscountAmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PaymentDetailRow : global::System.Data.DataRow {
            
            private PaymentDetailDataTable tablePaymentDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaymentDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaymentDetail = ((PaymentDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecordNo {
                get {
                    try {
                        return ((string)(this[this.tablePaymentDetail.RecordNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecordNo\' in table \'PaymentDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentDetail.RecordNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceiptDisplay {
                get {
                    try {
                        return ((string)(this[this.tablePaymentDetail.ReceiptDisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptDisplay\' in table \'PaymentDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentDetail.ReceiptDisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentAmount {
                get {
                    try {
                        return ((string)(this[this.tablePaymentDetail.PaymentAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentAmount\' in table \'PaymentDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentDetail.PaymentAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrencyCode {
                get {
                    try {
                        return ((string)(this[this.tablePaymentDetail.CurrencyCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrencyCode\' in table \'PaymentDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentDetail.CurrencyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordNoNull() {
                return this.IsNull(this.tablePaymentDetail.RecordNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordNoNull() {
                this[this.tablePaymentDetail.RecordNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptDisplayNull() {
                return this.IsNull(this.tablePaymentDetail.ReceiptDisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptDisplayNull() {
                this[this.tablePaymentDetail.ReceiptDisplayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentAmountNull() {
                return this.IsNull(this.tablePaymentDetail.PaymentAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentAmountNull() {
                this[this.tablePaymentDetail.PaymentAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrencyCodeNull() {
                return this.IsNull(this.tablePaymentDetail.CurrencyCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrencyCodeNull() {
                this[this.tablePaymentDetail.CurrencyCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TaxDetailRow : global::System.Data.DataRow {
            
            private TaxDetailDataTable tableTaxDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TaxDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTaxDetail = ((TaxDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxCode {
                get {
                    try {
                        return ((string)(this[this.tableTaxDetail.TaxCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxCode\' in table \'TaxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxDetail.TaxCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxPercent {
                get {
                    try {
                        return ((string)(this[this.tableTaxDetail.TaxPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxPercent\' in table \'TaxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxDetail.TaxPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxAmount {
                get {
                    try {
                        return ((string)(this[this.tableTaxDetail.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'TaxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxDetail.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxCodeNull() {
                return this.IsNull(this.tableTaxDetail.TaxCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxCodeNull() {
                this[this.tableTaxDetail.TaxCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxPercentNull() {
                return this.IsNull(this.tableTaxDetail.TaxPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxPercentNull() {
                this[this.tableTaxDetail.TaxPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tableTaxDetail.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tableTaxDetail.TaxAmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomerOrderDetailRow : global::System.Data.DataRow {
            
            private CustomerOrderDetailDataTable tableCustomerOrderDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerOrderDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomerOrderDetail = ((CustomerOrderDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecordNo {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrderDetail.RecordNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecordNo\' in table \'CustomerOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrderDetail.RecordNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemCode {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrderDetail.ItemCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemCode\' in table \'CustomerOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrderDetail.ItemCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemName {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrderDetail.ItemNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemName\' in table \'CustomerOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrderDetail.ItemNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitPrice {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrderDetail.UnitPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitPrice\' in table \'CustomerOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrderDetail.UnitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Qty {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrderDetail.QtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Qty\' in table \'CustomerOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrderDetail.QtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Amount {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrderDetail.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'CustomerOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrderDetail.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxAmount {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrderDetail.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'CustomerOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrderDetail.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Discount {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrderDetail.DiscountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Discount\' in table \'CustomerOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrderDetail.DiscountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PriceInclTax {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrderDetail.PriceInclTaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PriceInclTax\' in table \'CustomerOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrderDetail.PriceInclTaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DP {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrderDetail.DPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DP\' in table \'CustomerOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrderDetail.DPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsKit {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrderDetail.IsKitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsKit\' in table \'CustomerOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrderDetail.IsKitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxPercent {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrderDetail.TaxPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxPercent\' in table \'CustomerOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrderDetail.TaxPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxDetail {
                get {
                    try {
                        return ((string)(this[this.tableCustomerOrderDetail.TaxDetailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxDetail\' in table \'CustomerOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomerOrderDetail.TaxDetailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordNoNull() {
                return this.IsNull(this.tableCustomerOrderDetail.RecordNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordNoNull() {
                this[this.tableCustomerOrderDetail.RecordNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemCodeNull() {
                return this.IsNull(this.tableCustomerOrderDetail.ItemCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemCodeNull() {
                this[this.tableCustomerOrderDetail.ItemCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNameNull() {
                return this.IsNull(this.tableCustomerOrderDetail.ItemNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNameNull() {
                this[this.tableCustomerOrderDetail.ItemNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitPriceNull() {
                return this.IsNull(this.tableCustomerOrderDetail.UnitPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitPriceNull() {
                this[this.tableCustomerOrderDetail.UnitPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQtyNull() {
                return this.IsNull(this.tableCustomerOrderDetail.QtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQtyNull() {
                this[this.tableCustomerOrderDetail.QtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableCustomerOrderDetail.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableCustomerOrderDetail.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tableCustomerOrderDetail.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tableCustomerOrderDetail.TaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscountNull() {
                return this.IsNull(this.tableCustomerOrderDetail.DiscountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscountNull() {
                this[this.tableCustomerOrderDetail.DiscountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceInclTaxNull() {
                return this.IsNull(this.tableCustomerOrderDetail.PriceInclTaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceInclTaxNull() {
                this[this.tableCustomerOrderDetail.PriceInclTaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDPNull() {
                return this.IsNull(this.tableCustomerOrderDetail.DPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDPNull() {
                this[this.tableCustomerOrderDetail.DPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsKitNull() {
                return this.IsNull(this.tableCustomerOrderDetail.IsKitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsKitNull() {
                this[this.tableCustomerOrderDetail.IsKitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxPercentNull() {
                return this.IsNull(this.tableCustomerOrderDetail.TaxPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxPercentNull() {
                this[this.tableCustomerOrderDetail.TaxPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxDetailNull() {
                return this.IsNull(this.tableCustomerOrderDetail.TaxDetailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxDetailNull() {
                this[this.tableCustomerOrderDetail.TaxDetailColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerOrderRowChangeEvent : global::System.EventArgs {
            
            private CustomerOrderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerOrderRowChangeEvent(CustomerOrderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerOrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PaymentDetailRowChangeEvent : global::System.EventArgs {
            
            private PaymentDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentDetailRowChangeEvent(PaymentDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TaxDetailRowChangeEvent : global::System.EventArgs {
            
            private TaxDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxDetailRowChangeEvent(TaxDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerOrderDetailRowChangeEvent : global::System.EventArgs {
            
            private CustomerOrderDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerOrderDetailRowChangeEvent(CustomerOrderDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerOrderDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591