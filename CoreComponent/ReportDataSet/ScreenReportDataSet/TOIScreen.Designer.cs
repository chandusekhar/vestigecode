//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5477
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CoreComponent.ReportDataSet.ScreenReportDataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("TOIScreen")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TOIScreen : global::System.Data.DataSet {
        
        private TOIScreenHeaderDataTableDataTable tableTOIScreenHeaderDataTable;
        
        private TOIScreenDetailDataTableDataTable tableTOIScreenDetailDataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TOIScreen() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TOIScreen(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TOIScreenHeaderDataTable"] != null)) {
                    base.Tables.Add(new TOIScreenHeaderDataTableDataTable(ds.Tables["TOIScreenHeaderDataTable"]));
                }
                if ((ds.Tables["TOIScreenDetailDataTable"] != null)) {
                    base.Tables.Add(new TOIScreenDetailDataTableDataTable(ds.Tables["TOIScreenDetailDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TOIScreenHeaderDataTableDataTable TOIScreenHeaderDataTable {
            get {
                return this.tableTOIScreenHeaderDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TOIScreenDetailDataTableDataTable TOIScreenDetailDataTable {
            get {
                return this.tableTOIScreenDetailDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            TOIScreen cln = ((TOIScreen)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TOIScreenHeaderDataTable"] != null)) {
                    base.Tables.Add(new TOIScreenHeaderDataTableDataTable(ds.Tables["TOIScreenHeaderDataTable"]));
                }
                if ((ds.Tables["TOIScreenDetailDataTable"] != null)) {
                    base.Tables.Add(new TOIScreenDetailDataTableDataTable(ds.Tables["TOIScreenDetailDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTOIScreenHeaderDataTable = ((TOIScreenHeaderDataTableDataTable)(base.Tables["TOIScreenHeaderDataTable"]));
            if ((initTable == true)) {
                if ((this.tableTOIScreenHeaderDataTable != null)) {
                    this.tableTOIScreenHeaderDataTable.InitVars();
                }
            }
            this.tableTOIScreenDetailDataTable = ((TOIScreenDetailDataTableDataTable)(base.Tables["TOIScreenDetailDataTable"]));
            if ((initTable == true)) {
                if ((this.tableTOIScreenDetailDataTable != null)) {
                    this.tableTOIScreenDetailDataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TOIScreen";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TOIScreen.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTOIScreenHeaderDataTable = new TOIScreenHeaderDataTableDataTable();
            base.Tables.Add(this.tableTOIScreenHeaderDataTable);
            this.tableTOIScreenDetailDataTable = new TOIScreenDetailDataTableDataTable();
            base.Tables.Add(this.tableTOIScreenDetailDataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTOIScreenHeaderDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTOIScreenDetailDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            TOIScreen ds = new TOIScreen();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TOIScreenHeaderDataTableRowChangeEventHandler(object sender, TOIScreenHeaderDataTableRowChangeEvent e);
        
        public delegate void TOIScreenDetailDataTableRowChangeEventHandler(object sender, TOIScreenDetailDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TOIScreenHeaderDataTableDataTable : global::System.Data.TypedTableBase<TOIScreenHeaderDataTableRow> {
            
            private global::System.Data.DataColumn columnTOINumber;
            
            private global::System.Data.DataColumn columnSourceLocation;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnDestinationLocation;
            
            private global::System.Data.DataColumn columnSourceAddress;
            
            private global::System.Data.DataColumn columnTotalTOIQuantity;
            
            private global::System.Data.DataColumn columnTotalTOIAmount;
            
            private global::System.Data.DataColumn columnDestinationAddress;
            
            private global::System.Data.DataColumn columnPONumber;
            
            private global::System.Data.DataColumn columnPOStatus;
            
            private global::System.Data.DataColumn columnIndentised;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOIScreenHeaderDataTableDataTable() {
                this.TableName = "TOIScreenHeaderDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TOIScreenHeaderDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TOIScreenHeaderDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOINumberColumn {
                get {
                    return this.columnTOINumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceLocationColumn {
                get {
                    return this.columnSourceLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationLocationColumn {
                get {
                    return this.columnDestinationLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceAddressColumn {
                get {
                    return this.columnSourceAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalTOIQuantityColumn {
                get {
                    return this.columnTotalTOIQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalTOIAmountColumn {
                get {
                    return this.columnTotalTOIAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationAddressColumn {
                get {
                    return this.columnDestinationAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PONumberColumn {
                get {
                    return this.columnPONumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POStatusColumn {
                get {
                    return this.columnPOStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndentisedColumn {
                get {
                    return this.columnIndentised;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOIScreenHeaderDataTableRow this[int index] {
                get {
                    return ((TOIScreenHeaderDataTableRow)(this.Rows[index]));
                }
            }
            
            public event TOIScreenHeaderDataTableRowChangeEventHandler TOIScreenHeaderDataTableRowChanging;
            
            public event TOIScreenHeaderDataTableRowChangeEventHandler TOIScreenHeaderDataTableRowChanged;
            
            public event TOIScreenHeaderDataTableRowChangeEventHandler TOIScreenHeaderDataTableRowDeleting;
            
            public event TOIScreenHeaderDataTableRowChangeEventHandler TOIScreenHeaderDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTOIScreenHeaderDataTableRow(TOIScreenHeaderDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOIScreenHeaderDataTableRow AddTOIScreenHeaderDataTableRow(string TOINumber, string SourceLocation, string Status, string DestinationLocation, string SourceAddress, string TotalTOIQuantity, string TotalTOIAmount, string DestinationAddress, string PONumber, string POStatus, string Indentised, string CreatedBy) {
                TOIScreenHeaderDataTableRow rowTOIScreenHeaderDataTableRow = ((TOIScreenHeaderDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TOINumber,
                        SourceLocation,
                        Status,
                        DestinationLocation,
                        SourceAddress,
                        TotalTOIQuantity,
                        TotalTOIAmount,
                        DestinationAddress,
                        PONumber,
                        POStatus,
                        Indentised,
                        CreatedBy};
                rowTOIScreenHeaderDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTOIScreenHeaderDataTableRow);
                return rowTOIScreenHeaderDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TOIScreenHeaderDataTableDataTable cln = ((TOIScreenHeaderDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TOIScreenHeaderDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTOINumber = base.Columns["TOINumber"];
                this.columnSourceLocation = base.Columns["SourceLocation"];
                this.columnStatus = base.Columns["Status"];
                this.columnDestinationLocation = base.Columns["DestinationLocation"];
                this.columnSourceAddress = base.Columns["SourceAddress"];
                this.columnTotalTOIQuantity = base.Columns["TotalTOIQuantity"];
                this.columnTotalTOIAmount = base.Columns["TotalTOIAmount"];
                this.columnDestinationAddress = base.Columns["DestinationAddress"];
                this.columnPONumber = base.Columns["PONumber"];
                this.columnPOStatus = base.Columns["POStatus"];
                this.columnIndentised = base.Columns["Indentised"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTOINumber = new global::System.Data.DataColumn("TOINumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOINumber);
                this.columnSourceLocation = new global::System.Data.DataColumn("SourceLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceLocation);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnDestinationLocation = new global::System.Data.DataColumn("DestinationLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationLocation);
                this.columnSourceAddress = new global::System.Data.DataColumn("SourceAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceAddress);
                this.columnTotalTOIQuantity = new global::System.Data.DataColumn("TotalTOIQuantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalTOIQuantity);
                this.columnTotalTOIAmount = new global::System.Data.DataColumn("TotalTOIAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalTOIAmount);
                this.columnDestinationAddress = new global::System.Data.DataColumn("DestinationAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationAddress);
                this.columnPONumber = new global::System.Data.DataColumn("PONumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPONumber);
                this.columnPOStatus = new global::System.Data.DataColumn("POStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOStatus);
                this.columnIndentised = new global::System.Data.DataColumn("Indentised", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndentised);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOIScreenHeaderDataTableRow NewTOIScreenHeaderDataTableRow() {
                return ((TOIScreenHeaderDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TOIScreenHeaderDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TOIScreenHeaderDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TOIScreenHeaderDataTableRowChanged != null)) {
                    this.TOIScreenHeaderDataTableRowChanged(this, new TOIScreenHeaderDataTableRowChangeEvent(((TOIScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TOIScreenHeaderDataTableRowChanging != null)) {
                    this.TOIScreenHeaderDataTableRowChanging(this, new TOIScreenHeaderDataTableRowChangeEvent(((TOIScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TOIScreenHeaderDataTableRowDeleted != null)) {
                    this.TOIScreenHeaderDataTableRowDeleted(this, new TOIScreenHeaderDataTableRowChangeEvent(((TOIScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TOIScreenHeaderDataTableRowDeleting != null)) {
                    this.TOIScreenHeaderDataTableRowDeleting(this, new TOIScreenHeaderDataTableRowChangeEvent(((TOIScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTOIScreenHeaderDataTableRow(TOIScreenHeaderDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TOIScreen ds = new TOIScreen();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TOIScreenHeaderDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TOIScreenDetailDataTableDataTable : global::System.Data.TypedTableBase<TOIScreenDetailDataTableRow> {
            
            private global::System.Data.DataColumn columnItemCode;
            
            private global::System.Data.DataColumn columnItemDescription;
            
            private global::System.Data.DataColumn columnUOMName;
            
            private global::System.Data.DataColumn columnTransferPrice;
            
            private global::System.Data.DataColumn columnBucketName;
            
            private global::System.Data.DataColumn columnAvailableQty;
            
            private global::System.Data.DataColumn columnItemQuantity;
            
            private global::System.Data.DataColumn columnTotalAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOIScreenDetailDataTableDataTable() {
                this.TableName = "TOIScreenDetailDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TOIScreenDetailDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TOIScreenDetailDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemCodeColumn {
                get {
                    return this.columnItemCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemDescriptionColumn {
                get {
                    return this.columnItemDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UOMNameColumn {
                get {
                    return this.columnUOMName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransferPriceColumn {
                get {
                    return this.columnTransferPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BucketNameColumn {
                get {
                    return this.columnBucketName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvailableQtyColumn {
                get {
                    return this.columnAvailableQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemQuantityColumn {
                get {
                    return this.columnItemQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAmountColumn {
                get {
                    return this.columnTotalAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOIScreenDetailDataTableRow this[int index] {
                get {
                    return ((TOIScreenDetailDataTableRow)(this.Rows[index]));
                }
            }
            
            public event TOIScreenDetailDataTableRowChangeEventHandler TOIScreenDetailDataTableRowChanging;
            
            public event TOIScreenDetailDataTableRowChangeEventHandler TOIScreenDetailDataTableRowChanged;
            
            public event TOIScreenDetailDataTableRowChangeEventHandler TOIScreenDetailDataTableRowDeleting;
            
            public event TOIScreenDetailDataTableRowChangeEventHandler TOIScreenDetailDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTOIScreenDetailDataTableRow(TOIScreenDetailDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOIScreenDetailDataTableRow AddTOIScreenDetailDataTableRow(string ItemCode, string ItemDescription, string UOMName, string TransferPrice, string BucketName, string AvailableQty, string ItemQuantity, string TotalAmount) {
                TOIScreenDetailDataTableRow rowTOIScreenDetailDataTableRow = ((TOIScreenDetailDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ItemCode,
                        ItemDescription,
                        UOMName,
                        TransferPrice,
                        BucketName,
                        AvailableQty,
                        ItemQuantity,
                        TotalAmount};
                rowTOIScreenDetailDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTOIScreenDetailDataTableRow);
                return rowTOIScreenDetailDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TOIScreenDetailDataTableDataTable cln = ((TOIScreenDetailDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TOIScreenDetailDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItemCode = base.Columns["ItemCode"];
                this.columnItemDescription = base.Columns["ItemDescription"];
                this.columnUOMName = base.Columns["UOMName"];
                this.columnTransferPrice = base.Columns["TransferPrice"];
                this.columnBucketName = base.Columns["BucketName"];
                this.columnAvailableQty = base.Columns["AvailableQty"];
                this.columnItemQuantity = base.Columns["ItemQuantity"];
                this.columnTotalAmount = base.Columns["TotalAmount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItemCode = new global::System.Data.DataColumn("ItemCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemCode);
                this.columnItemDescription = new global::System.Data.DataColumn("ItemDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemDescription);
                this.columnUOMName = new global::System.Data.DataColumn("UOMName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUOMName);
                this.columnTransferPrice = new global::System.Data.DataColumn("TransferPrice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferPrice);
                this.columnBucketName = new global::System.Data.DataColumn("BucketName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBucketName);
                this.columnAvailableQty = new global::System.Data.DataColumn("AvailableQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvailableQty);
                this.columnItemQuantity = new global::System.Data.DataColumn("ItemQuantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemQuantity);
                this.columnTotalAmount = new global::System.Data.DataColumn("TotalAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOIScreenDetailDataTableRow NewTOIScreenDetailDataTableRow() {
                return ((TOIScreenDetailDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TOIScreenDetailDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TOIScreenDetailDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TOIScreenDetailDataTableRowChanged != null)) {
                    this.TOIScreenDetailDataTableRowChanged(this, new TOIScreenDetailDataTableRowChangeEvent(((TOIScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TOIScreenDetailDataTableRowChanging != null)) {
                    this.TOIScreenDetailDataTableRowChanging(this, new TOIScreenDetailDataTableRowChangeEvent(((TOIScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TOIScreenDetailDataTableRowDeleted != null)) {
                    this.TOIScreenDetailDataTableRowDeleted(this, new TOIScreenDetailDataTableRowChangeEvent(((TOIScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TOIScreenDetailDataTableRowDeleting != null)) {
                    this.TOIScreenDetailDataTableRowDeleting(this, new TOIScreenDetailDataTableRowChangeEvent(((TOIScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTOIScreenDetailDataTableRow(TOIScreenDetailDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TOIScreen ds = new TOIScreen();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TOIScreenDetailDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TOIScreenHeaderDataTableRow : global::System.Data.DataRow {
            
            private TOIScreenHeaderDataTableDataTable tableTOIScreenHeaderDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TOIScreenHeaderDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTOIScreenHeaderDataTable = ((TOIScreenHeaderDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOINumber {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenHeaderDataTable.TOINumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOINumber\' in table \'TOIScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenHeaderDataTable.TOINumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceLocation {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenHeaderDataTable.SourceLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceLocation\' in table \'TOIScreenHeaderDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenHeaderDataTable.SourceLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenHeaderDataTable.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'TOIScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenHeaderDataTable.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationLocation {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenHeaderDataTable.DestinationLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationLocation\' in table \'TOIScreenHeaderDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenHeaderDataTable.DestinationLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceAddress {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenHeaderDataTable.SourceAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceAddress\' in table \'TOIScreenHeaderDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenHeaderDataTable.SourceAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalTOIQuantity {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenHeaderDataTable.TotalTOIQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalTOIQuantity\' in table \'TOIScreenHeaderDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenHeaderDataTable.TotalTOIQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalTOIAmount {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenHeaderDataTable.TotalTOIAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalTOIAmount\' in table \'TOIScreenHeaderDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenHeaderDataTable.TotalTOIAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationAddress {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenHeaderDataTable.DestinationAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationAddress\' in table \'TOIScreenHeaderDataTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenHeaderDataTable.DestinationAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PONumber {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenHeaderDataTable.PONumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PONumber\' in table \'TOIScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenHeaderDataTable.PONumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POStatus {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenHeaderDataTable.POStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'POStatus\' in table \'TOIScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenHeaderDataTable.POStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Indentised {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenHeaderDataTable.IndentisedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Indentised\' in table \'TOIScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenHeaderDataTable.IndentisedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenHeaderDataTable.CreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedBy\' in table \'TOIScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenHeaderDataTable.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOINumberNull() {
                return this.IsNull(this.tableTOIScreenHeaderDataTable.TOINumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOINumberNull() {
                this[this.tableTOIScreenHeaderDataTable.TOINumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceLocationNull() {
                return this.IsNull(this.tableTOIScreenHeaderDataTable.SourceLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceLocationNull() {
                this[this.tableTOIScreenHeaderDataTable.SourceLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableTOIScreenHeaderDataTable.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableTOIScreenHeaderDataTable.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationLocationNull() {
                return this.IsNull(this.tableTOIScreenHeaderDataTable.DestinationLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationLocationNull() {
                this[this.tableTOIScreenHeaderDataTable.DestinationLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceAddressNull() {
                return this.IsNull(this.tableTOIScreenHeaderDataTable.SourceAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceAddressNull() {
                this[this.tableTOIScreenHeaderDataTable.SourceAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalTOIQuantityNull() {
                return this.IsNull(this.tableTOIScreenHeaderDataTable.TotalTOIQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalTOIQuantityNull() {
                this[this.tableTOIScreenHeaderDataTable.TotalTOIQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalTOIAmountNull() {
                return this.IsNull(this.tableTOIScreenHeaderDataTable.TotalTOIAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalTOIAmountNull() {
                this[this.tableTOIScreenHeaderDataTable.TotalTOIAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationAddressNull() {
                return this.IsNull(this.tableTOIScreenHeaderDataTable.DestinationAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationAddressNull() {
                this[this.tableTOIScreenHeaderDataTable.DestinationAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPONumberNull() {
                return this.IsNull(this.tableTOIScreenHeaderDataTable.PONumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPONumberNull() {
                this[this.tableTOIScreenHeaderDataTable.PONumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOStatusNull() {
                return this.IsNull(this.tableTOIScreenHeaderDataTable.POStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOStatusNull() {
                this[this.tableTOIScreenHeaderDataTable.POStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndentisedNull() {
                return this.IsNull(this.tableTOIScreenHeaderDataTable.IndentisedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndentisedNull() {
                this[this.tableTOIScreenHeaderDataTable.IndentisedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedByNull() {
                return this.IsNull(this.tableTOIScreenHeaderDataTable.CreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedByNull() {
                this[this.tableTOIScreenHeaderDataTable.CreatedByColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TOIScreenDetailDataTableRow : global::System.Data.DataRow {
            
            private TOIScreenDetailDataTableDataTable tableTOIScreenDetailDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TOIScreenDetailDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTOIScreenDetailDataTable = ((TOIScreenDetailDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemCode {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenDetailDataTable.ItemCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemCode\' in table \'TOIScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenDetailDataTable.ItemCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemDescription {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenDetailDataTable.ItemDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemDescription\' in table \'TOIScreenDetailDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenDetailDataTable.ItemDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UOMName {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenDetailDataTable.UOMNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UOMName\' in table \'TOIScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenDetailDataTable.UOMNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransferPrice {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenDetailDataTable.TransferPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransferPrice\' in table \'TOIScreenDetailDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenDetailDataTable.TransferPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BucketName {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenDetailDataTable.BucketNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BucketName\' in table \'TOIScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOIScreenDetailDataTable.BucketNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AvailableQty {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenDetailDataTable.AvailableQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AvailableQty\' in table \'TOIScreenDetailDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTOIScreenDetailDataTable.AvailableQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemQuantity {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenDetailDataTable.ItemQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemQuantity\' in table \'TOIScreenDetailDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTOIScreenDetailDataTable.ItemQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalAmount {
                get {
                    try {
                        return ((string)(this[this.tableTOIScreenDetailDataTable.TotalAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmount\' in table \'TOIScreenDetailDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableTOIScreenDetailDataTable.TotalAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemCodeNull() {
                return this.IsNull(this.tableTOIScreenDetailDataTable.ItemCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemCodeNull() {
                this[this.tableTOIScreenDetailDataTable.ItemCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemDescriptionNull() {
                return this.IsNull(this.tableTOIScreenDetailDataTable.ItemDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemDescriptionNull() {
                this[this.tableTOIScreenDetailDataTable.ItemDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUOMNameNull() {
                return this.IsNull(this.tableTOIScreenDetailDataTable.UOMNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUOMNameNull() {
                this[this.tableTOIScreenDetailDataTable.UOMNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransferPriceNull() {
                return this.IsNull(this.tableTOIScreenDetailDataTable.TransferPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransferPriceNull() {
                this[this.tableTOIScreenDetailDataTable.TransferPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBucketNameNull() {
                return this.IsNull(this.tableTOIScreenDetailDataTable.BucketNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBucketNameNull() {
                this[this.tableTOIScreenDetailDataTable.BucketNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvailableQtyNull() {
                return this.IsNull(this.tableTOIScreenDetailDataTable.AvailableQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvailableQtyNull() {
                this[this.tableTOIScreenDetailDataTable.AvailableQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemQuantityNull() {
                return this.IsNull(this.tableTOIScreenDetailDataTable.ItemQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemQuantityNull() {
                this[this.tableTOIScreenDetailDataTable.ItemQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountNull() {
                return this.IsNull(this.tableTOIScreenDetailDataTable.TotalAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountNull() {
                this[this.tableTOIScreenDetailDataTable.TotalAmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TOIScreenHeaderDataTableRowChangeEvent : global::System.EventArgs {
            
            private TOIScreenHeaderDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOIScreenHeaderDataTableRowChangeEvent(TOIScreenHeaderDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOIScreenHeaderDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TOIScreenDetailDataTableRowChangeEvent : global::System.EventArgs {
            
            private TOIScreenDetailDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOIScreenDetailDataTableRowChangeEvent(TOIScreenDetailDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOIScreenDetailDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591