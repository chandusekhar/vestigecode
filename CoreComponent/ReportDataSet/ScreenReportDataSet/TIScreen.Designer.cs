//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CoreComponent.ReportDataSet.ScreenReportDataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("TIScreen")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TIScreen : global::System.Data.DataSet {
        
        private TIScreenHeaderDataTableDataTable tableTIScreenHeaderDataTable;
        
        private TIScreenDetailDataTableDataTable tableTIScreenDetailDataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TIScreen() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TIScreen(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TIScreenHeaderDataTable"] != null)) {
                    base.Tables.Add(new TIScreenHeaderDataTableDataTable(ds.Tables["TIScreenHeaderDataTable"]));
                }
                if ((ds.Tables["TIScreenDetailDataTable"] != null)) {
                    base.Tables.Add(new TIScreenDetailDataTableDataTable(ds.Tables["TIScreenDetailDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TIScreenHeaderDataTableDataTable TIScreenHeaderDataTable {
            get {
                return this.tableTIScreenHeaderDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TIScreenDetailDataTableDataTable TIScreenDetailDataTable {
            get {
                return this.tableTIScreenDetailDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            TIScreen cln = ((TIScreen)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TIScreenHeaderDataTable"] != null)) {
                    base.Tables.Add(new TIScreenHeaderDataTableDataTable(ds.Tables["TIScreenHeaderDataTable"]));
                }
                if ((ds.Tables["TIScreenDetailDataTable"] != null)) {
                    base.Tables.Add(new TIScreenDetailDataTableDataTable(ds.Tables["TIScreenDetailDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTIScreenHeaderDataTable = ((TIScreenHeaderDataTableDataTable)(base.Tables["TIScreenHeaderDataTable"]));
            if ((initTable == true)) {
                if ((this.tableTIScreenHeaderDataTable != null)) {
                    this.tableTIScreenHeaderDataTable.InitVars();
                }
            }
            this.tableTIScreenDetailDataTable = ((TIScreenDetailDataTableDataTable)(base.Tables["TIScreenDetailDataTable"]));
            if ((initTable == true)) {
                if ((this.tableTIScreenDetailDataTable != null)) {
                    this.tableTIScreenDetailDataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TIScreen";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TIScreen.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTIScreenHeaderDataTable = new TIScreenHeaderDataTableDataTable();
            base.Tables.Add(this.tableTIScreenHeaderDataTable);
            this.tableTIScreenDetailDataTable = new TIScreenDetailDataTableDataTable();
            base.Tables.Add(this.tableTIScreenDetailDataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTIScreenHeaderDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTIScreenDetailDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            TIScreen ds = new TIScreen();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TIScreenHeaderDataTableRowChangeEventHandler(object sender, TIScreenHeaderDataTableRowChangeEvent e);
        
        public delegate void TIScreenDetailDataTableRowChangeEventHandler(object sender, TIScreenDetailDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TIScreenHeaderDataTableDataTable : global::System.Data.TypedTableBase<TIScreenHeaderDataTableRow> {
            
            private global::System.Data.DataColumn columnTINumber;
            
            private global::System.Data.DataColumn columnTONumber;
            
            private global::System.Data.DataColumn columnSourceLocation;
            
            private global::System.Data.DataColumn columnDestinationLocation;
            
            private global::System.Data.DataColumn columnPackSize;
            
            private global::System.Data.DataColumn columnSourceAddress;
            
            private global::System.Data.DataColumn columnDestinationAddress;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnSourceTINNo;
            
            private global::System.Data.DataColumn columnSourceCSTNo;
            
            private global::System.Data.DataColumn columnSourceVATNo;
            
            private global::System.Data.DataColumn columnDestinationTINNo;
            
            private global::System.Data.DataColumn columnDestinationCSTNo;
            
            private global::System.Data.DataColumn columnDestinationVATNo;
            
            private global::System.Data.DataColumn columnIndentised;
            
            private global::System.Data.DataColumn columnReceivedDate;
            
            private global::System.Data.DataColumn columnReceivedTime;
            
            private global::System.Data.DataColumn columnShippingDetails;
            
            private global::System.Data.DataColumn columnShippingWayBillNo;
            
            private global::System.Data.DataColumn columnRemarks;
            
            private global::System.Data.DataColumn columnTotalTIQuantity;
            
            private global::System.Data.DataColumn columnGrossWeight;
            
            private global::System.Data.DataColumn columnTotalTIAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TIScreenHeaderDataTableDataTable() {
                this.TableName = "TIScreenHeaderDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TIScreenHeaderDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TIScreenHeaderDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TINumberColumn {
                get {
                    return this.columnTINumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TONumberColumn {
                get {
                    return this.columnTONumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceLocationColumn {
                get {
                    return this.columnSourceLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationLocationColumn {
                get {
                    return this.columnDestinationLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PackSizeColumn {
                get {
                    return this.columnPackSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceAddressColumn {
                get {
                    return this.columnSourceAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationAddressColumn {
                get {
                    return this.columnDestinationAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceTINNoColumn {
                get {
                    return this.columnSourceTINNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceCSTNoColumn {
                get {
                    return this.columnSourceCSTNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceVATNoColumn {
                get {
                    return this.columnSourceVATNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationTINNoColumn {
                get {
                    return this.columnDestinationTINNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationCSTNoColumn {
                get {
                    return this.columnDestinationCSTNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationVATNoColumn {
                get {
                    return this.columnDestinationVATNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndentisedColumn {
                get {
                    return this.columnIndentised;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceivedDateColumn {
                get {
                    return this.columnReceivedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceivedTimeColumn {
                get {
                    return this.columnReceivedTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShippingDetailsColumn {
                get {
                    return this.columnShippingDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShippingWayBillNoColumn {
                get {
                    return this.columnShippingWayBillNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalTIQuantityColumn {
                get {
                    return this.columnTotalTIQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossWeightColumn {
                get {
                    return this.columnGrossWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalTIAmountColumn {
                get {
                    return this.columnTotalTIAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TIScreenHeaderDataTableRow this[int index] {
                get {
                    return ((TIScreenHeaderDataTableRow)(this.Rows[index]));
                }
            }
            
            public event TIScreenHeaderDataTableRowChangeEventHandler TIScreenHeaderDataTableRowChanging;
            
            public event TIScreenHeaderDataTableRowChangeEventHandler TIScreenHeaderDataTableRowChanged;
            
            public event TIScreenHeaderDataTableRowChangeEventHandler TIScreenHeaderDataTableRowDeleting;
            
            public event TIScreenHeaderDataTableRowChangeEventHandler TIScreenHeaderDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTIScreenHeaderDataTableRow(TIScreenHeaderDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TIScreenHeaderDataTableRow AddTIScreenHeaderDataTableRow(
                        string TINumber, 
                        string TONumber, 
                        string SourceLocation, 
                        string DestinationLocation, 
                        string PackSize, 
                        string SourceAddress, 
                        string DestinationAddress, 
                        string Status, 
                        string SourceTINNo, 
                        string SourceCSTNo, 
                        string SourceVATNo, 
                        string DestinationTINNo, 
                        string DestinationCSTNo, 
                        string DestinationVATNo, 
                        string Indentised, 
                        string ReceivedDate, 
                        string ReceivedTime, 
                        string ShippingDetails, 
                        string ShippingWayBillNo, 
                        string Remarks, 
                        string TotalTIQuantity, 
                        string GrossWeight, 
                        string TotalTIAmount) {
                TIScreenHeaderDataTableRow rowTIScreenHeaderDataTableRow = ((TIScreenHeaderDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TINumber,
                        TONumber,
                        SourceLocation,
                        DestinationLocation,
                        PackSize,
                        SourceAddress,
                        DestinationAddress,
                        Status,
                        SourceTINNo,
                        SourceCSTNo,
                        SourceVATNo,
                        DestinationTINNo,
                        DestinationCSTNo,
                        DestinationVATNo,
                        Indentised,
                        ReceivedDate,
                        ReceivedTime,
                        ShippingDetails,
                        ShippingWayBillNo,
                        Remarks,
                        TotalTIQuantity,
                        GrossWeight,
                        TotalTIAmount};
                rowTIScreenHeaderDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTIScreenHeaderDataTableRow);
                return rowTIScreenHeaderDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TIScreenHeaderDataTableDataTable cln = ((TIScreenHeaderDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TIScreenHeaderDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTINumber = base.Columns["TINumber"];
                this.columnTONumber = base.Columns["TONumber"];
                this.columnSourceLocation = base.Columns["SourceLocation"];
                this.columnDestinationLocation = base.Columns["DestinationLocation"];
                this.columnPackSize = base.Columns["PackSize"];
                this.columnSourceAddress = base.Columns["SourceAddress"];
                this.columnDestinationAddress = base.Columns["DestinationAddress"];
                this.columnStatus = base.Columns["Status"];
                this.columnSourceTINNo = base.Columns["SourceTINNo"];
                this.columnSourceCSTNo = base.Columns["SourceCSTNo"];
                this.columnSourceVATNo = base.Columns["SourceVATNo"];
                this.columnDestinationTINNo = base.Columns["DestinationTINNo"];
                this.columnDestinationCSTNo = base.Columns["DestinationCSTNo"];
                this.columnDestinationVATNo = base.Columns["DestinationVATNo"];
                this.columnIndentised = base.Columns["Indentised"];
                this.columnReceivedDate = base.Columns["ReceivedDate"];
                this.columnReceivedTime = base.Columns["ReceivedTime"];
                this.columnShippingDetails = base.Columns["ShippingDetails"];
                this.columnShippingWayBillNo = base.Columns["ShippingWayBillNo"];
                this.columnRemarks = base.Columns["Remarks"];
                this.columnTotalTIQuantity = base.Columns["TotalTIQuantity"];
                this.columnGrossWeight = base.Columns["GrossWeight"];
                this.columnTotalTIAmount = base.Columns["TotalTIAmount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTINumber = new global::System.Data.DataColumn("TINumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTINumber);
                this.columnTONumber = new global::System.Data.DataColumn("TONumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTONumber);
                this.columnSourceLocation = new global::System.Data.DataColumn("SourceLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceLocation);
                this.columnDestinationLocation = new global::System.Data.DataColumn("DestinationLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationLocation);
                this.columnPackSize = new global::System.Data.DataColumn("PackSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackSize);
                this.columnSourceAddress = new global::System.Data.DataColumn("SourceAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceAddress);
                this.columnDestinationAddress = new global::System.Data.DataColumn("DestinationAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationAddress);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnSourceTINNo = new global::System.Data.DataColumn("SourceTINNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceTINNo);
                this.columnSourceCSTNo = new global::System.Data.DataColumn("SourceCSTNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceCSTNo);
                this.columnSourceVATNo = new global::System.Data.DataColumn("SourceVATNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceVATNo);
                this.columnDestinationTINNo = new global::System.Data.DataColumn("DestinationTINNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationTINNo);
                this.columnDestinationCSTNo = new global::System.Data.DataColumn("DestinationCSTNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationCSTNo);
                this.columnDestinationVATNo = new global::System.Data.DataColumn("DestinationVATNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationVATNo);
                this.columnIndentised = new global::System.Data.DataColumn("Indentised", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndentised);
                this.columnReceivedDate = new global::System.Data.DataColumn("ReceivedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceivedDate);
                this.columnReceivedTime = new global::System.Data.DataColumn("ReceivedTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceivedTime);
                this.columnShippingDetails = new global::System.Data.DataColumn("ShippingDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShippingDetails);
                this.columnShippingWayBillNo = new global::System.Data.DataColumn("ShippingWayBillNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShippingWayBillNo);
                this.columnRemarks = new global::System.Data.DataColumn("Remarks", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemarks);
                this.columnTotalTIQuantity = new global::System.Data.DataColumn("TotalTIQuantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalTIQuantity);
                this.columnGrossWeight = new global::System.Data.DataColumn("GrossWeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossWeight);
                this.columnTotalTIAmount = new global::System.Data.DataColumn("TotalTIAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalTIAmount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TIScreenHeaderDataTableRow NewTIScreenHeaderDataTableRow() {
                return ((TIScreenHeaderDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TIScreenHeaderDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TIScreenHeaderDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TIScreenHeaderDataTableRowChanged != null)) {
                    this.TIScreenHeaderDataTableRowChanged(this, new TIScreenHeaderDataTableRowChangeEvent(((TIScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TIScreenHeaderDataTableRowChanging != null)) {
                    this.TIScreenHeaderDataTableRowChanging(this, new TIScreenHeaderDataTableRowChangeEvent(((TIScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TIScreenHeaderDataTableRowDeleted != null)) {
                    this.TIScreenHeaderDataTableRowDeleted(this, new TIScreenHeaderDataTableRowChangeEvent(((TIScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TIScreenHeaderDataTableRowDeleting != null)) {
                    this.TIScreenHeaderDataTableRowDeleting(this, new TIScreenHeaderDataTableRowChangeEvent(((TIScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTIScreenHeaderDataTableRow(TIScreenHeaderDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TIScreen ds = new TIScreen();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TIScreenHeaderDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TIScreenDetailDataTableDataTable : global::System.Data.TypedTableBase<TIScreenDetailDataTableRow> {
            
            private global::System.Data.DataColumn columnItemCode;
            
            private global::System.Data.DataColumn columnItemDescription;
            
            private global::System.Data.DataColumn columnTransferPrice;
            
            private global::System.Data.DataColumn columnBucketName;
            
            private global::System.Data.DataColumn columnManufactureBatchNo;
            
            private global::System.Data.DataColumn columnAfterAdjustQty;
            
            private global::System.Data.DataColumn columnTotalAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TIScreenDetailDataTableDataTable() {
                this.TableName = "TIScreenDetailDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TIScreenDetailDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TIScreenDetailDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemCodeColumn {
                get {
                    return this.columnItemCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemDescriptionColumn {
                get {
                    return this.columnItemDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransferPriceColumn {
                get {
                    return this.columnTransferPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BucketNameColumn {
                get {
                    return this.columnBucketName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufactureBatchNoColumn {
                get {
                    return this.columnManufactureBatchNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AfterAdjustQtyColumn {
                get {
                    return this.columnAfterAdjustQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAmountColumn {
                get {
                    return this.columnTotalAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TIScreenDetailDataTableRow this[int index] {
                get {
                    return ((TIScreenDetailDataTableRow)(this.Rows[index]));
                }
            }
            
            public event TIScreenDetailDataTableRowChangeEventHandler TIScreenDetailDataTableRowChanging;
            
            public event TIScreenDetailDataTableRowChangeEventHandler TIScreenDetailDataTableRowChanged;
            
            public event TIScreenDetailDataTableRowChangeEventHandler TIScreenDetailDataTableRowDeleting;
            
            public event TIScreenDetailDataTableRowChangeEventHandler TIScreenDetailDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTIScreenDetailDataTableRow(TIScreenDetailDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TIScreenDetailDataTableRow AddTIScreenDetailDataTableRow(string ItemCode, string ItemDescription, string TransferPrice, string BucketName, string ManufactureBatchNo, string AfterAdjustQty, string TotalAmount) {
                TIScreenDetailDataTableRow rowTIScreenDetailDataTableRow = ((TIScreenDetailDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ItemCode,
                        ItemDescription,
                        TransferPrice,
                        BucketName,
                        ManufactureBatchNo,
                        AfterAdjustQty,
                        TotalAmount};
                rowTIScreenDetailDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTIScreenDetailDataTableRow);
                return rowTIScreenDetailDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TIScreenDetailDataTableDataTable cln = ((TIScreenDetailDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TIScreenDetailDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItemCode = base.Columns["ItemCode"];
                this.columnItemDescription = base.Columns["ItemDescription"];
                this.columnTransferPrice = base.Columns["TransferPrice"];
                this.columnBucketName = base.Columns["BucketName"];
                this.columnManufactureBatchNo = base.Columns["ManufactureBatchNo"];
                this.columnAfterAdjustQty = base.Columns["AfterAdjustQty"];
                this.columnTotalAmount = base.Columns["TotalAmount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItemCode = new global::System.Data.DataColumn("ItemCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemCode);
                this.columnItemDescription = new global::System.Data.DataColumn("ItemDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemDescription);
                this.columnTransferPrice = new global::System.Data.DataColumn("TransferPrice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferPrice);
                this.columnBucketName = new global::System.Data.DataColumn("BucketName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBucketName);
                this.columnManufactureBatchNo = new global::System.Data.DataColumn("ManufactureBatchNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufactureBatchNo);
                this.columnAfterAdjustQty = new global::System.Data.DataColumn("AfterAdjustQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAfterAdjustQty);
                this.columnTotalAmount = new global::System.Data.DataColumn("TotalAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TIScreenDetailDataTableRow NewTIScreenDetailDataTableRow() {
                return ((TIScreenDetailDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TIScreenDetailDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TIScreenDetailDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TIScreenDetailDataTableRowChanged != null)) {
                    this.TIScreenDetailDataTableRowChanged(this, new TIScreenDetailDataTableRowChangeEvent(((TIScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TIScreenDetailDataTableRowChanging != null)) {
                    this.TIScreenDetailDataTableRowChanging(this, new TIScreenDetailDataTableRowChangeEvent(((TIScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TIScreenDetailDataTableRowDeleted != null)) {
                    this.TIScreenDetailDataTableRowDeleted(this, new TIScreenDetailDataTableRowChangeEvent(((TIScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TIScreenDetailDataTableRowDeleting != null)) {
                    this.TIScreenDetailDataTableRowDeleting(this, new TIScreenDetailDataTableRowChangeEvent(((TIScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTIScreenDetailDataTableRow(TIScreenDetailDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TIScreen ds = new TIScreen();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TIScreenDetailDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TIScreenHeaderDataTableRow : global::System.Data.DataRow {
            
            private TIScreenHeaderDataTableDataTable tableTIScreenHeaderDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TIScreenHeaderDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTIScreenHeaderDataTable = ((TIScreenHeaderDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TINumber {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.TINumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TINumber\' in table \'TIScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.TINumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TONumber {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.TONumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TONumber\' in table \'TIScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.TONumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceLocation {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.SourceLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceLocation\' in table \'TIScreenHeaderDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.SourceLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationLocation {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.DestinationLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationLocation\' in table \'TIScreenHeaderDataTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.DestinationLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PackSize {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.PackSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PackSize\' in table \'TIScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.PackSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceAddress {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.SourceAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceAddress\' in table \'TIScreenHeaderDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.SourceAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationAddress {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.DestinationAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationAddress\' in table \'TIScreenHeaderDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.DestinationAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'TIScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceTINNo {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.SourceTINNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceTINNo\' in table \'TIScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.SourceTINNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceCSTNo {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.SourceCSTNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceCSTNo\' in table \'TIScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.SourceCSTNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceVATNo {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.SourceVATNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceVATNo\' in table \'TIScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.SourceVATNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationTINNo {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.DestinationTINNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationTINNo\' in table \'TIScreenHeaderDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.DestinationTINNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationCSTNo {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.DestinationCSTNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationCSTNo\' in table \'TIScreenHeaderDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.DestinationCSTNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationVATNo {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.DestinationVATNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationVATNo\' in table \'TIScreenHeaderDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.DestinationVATNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Indentised {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.IndentisedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Indentised\' in table \'TIScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.IndentisedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceivedDate {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.ReceivedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceivedDate\' in table \'TIScreenHeaderDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.ReceivedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceivedTime {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.ReceivedTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceivedTime\' in table \'TIScreenHeaderDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.ReceivedTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShippingDetails {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.ShippingDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShippingDetails\' in table \'TIScreenHeaderDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.ShippingDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShippingWayBillNo {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.ShippingWayBillNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShippingWayBillNo\' in table \'TIScreenHeaderDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.ShippingWayBillNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.RemarksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remarks\' in table \'TIScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.RemarksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalTIQuantity {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.TotalTIQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalTIQuantity\' in table \'TIScreenHeaderDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.TotalTIQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrossWeight {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.GrossWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossWeight\' in table \'TIScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.GrossWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalTIAmount {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenHeaderDataTable.TotalTIAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalTIAmount\' in table \'TIScreenHeaderDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTIScreenHeaderDataTable.TotalTIAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTINumberNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.TINumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTINumberNull() {
                this[this.tableTIScreenHeaderDataTable.TINumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTONumberNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.TONumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTONumberNull() {
                this[this.tableTIScreenHeaderDataTable.TONumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceLocationNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.SourceLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceLocationNull() {
                this[this.tableTIScreenHeaderDataTable.SourceLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationLocationNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.DestinationLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationLocationNull() {
                this[this.tableTIScreenHeaderDataTable.DestinationLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPackSizeNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.PackSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPackSizeNull() {
                this[this.tableTIScreenHeaderDataTable.PackSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceAddressNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.SourceAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceAddressNull() {
                this[this.tableTIScreenHeaderDataTable.SourceAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationAddressNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.DestinationAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationAddressNull() {
                this[this.tableTIScreenHeaderDataTable.DestinationAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableTIScreenHeaderDataTable.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceTINNoNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.SourceTINNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceTINNoNull() {
                this[this.tableTIScreenHeaderDataTable.SourceTINNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceCSTNoNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.SourceCSTNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceCSTNoNull() {
                this[this.tableTIScreenHeaderDataTable.SourceCSTNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceVATNoNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.SourceVATNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceVATNoNull() {
                this[this.tableTIScreenHeaderDataTable.SourceVATNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationTINNoNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.DestinationTINNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationTINNoNull() {
                this[this.tableTIScreenHeaderDataTable.DestinationTINNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationCSTNoNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.DestinationCSTNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationCSTNoNull() {
                this[this.tableTIScreenHeaderDataTable.DestinationCSTNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationVATNoNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.DestinationVATNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationVATNoNull() {
                this[this.tableTIScreenHeaderDataTable.DestinationVATNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndentisedNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.IndentisedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndentisedNull() {
                this[this.tableTIScreenHeaderDataTable.IndentisedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceivedDateNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.ReceivedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceivedDateNull() {
                this[this.tableTIScreenHeaderDataTable.ReceivedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceivedTimeNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.ReceivedTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceivedTimeNull() {
                this[this.tableTIScreenHeaderDataTable.ReceivedTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShippingDetailsNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.ShippingDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShippingDetailsNull() {
                this[this.tableTIScreenHeaderDataTable.ShippingDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShippingWayBillNoNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.ShippingWayBillNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShippingWayBillNoNull() {
                this[this.tableTIScreenHeaderDataTable.ShippingWayBillNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarksNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.RemarksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarksNull() {
                this[this.tableTIScreenHeaderDataTable.RemarksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalTIQuantityNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.TotalTIQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalTIQuantityNull() {
                this[this.tableTIScreenHeaderDataTable.TotalTIQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossWeightNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.GrossWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossWeightNull() {
                this[this.tableTIScreenHeaderDataTable.GrossWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalTIAmountNull() {
                return this.IsNull(this.tableTIScreenHeaderDataTable.TotalTIAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalTIAmountNull() {
                this[this.tableTIScreenHeaderDataTable.TotalTIAmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TIScreenDetailDataTableRow : global::System.Data.DataRow {
            
            private TIScreenDetailDataTableDataTable tableTIScreenDetailDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TIScreenDetailDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTIScreenDetailDataTable = ((TIScreenDetailDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemCode {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenDetailDataTable.ItemCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemCode\' in table \'TIScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenDetailDataTable.ItemCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemDescription {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenDetailDataTable.ItemDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemDescription\' in table \'TIScreenDetailDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableTIScreenDetailDataTable.ItemDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransferPrice {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenDetailDataTable.TransferPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransferPrice\' in table \'TIScreenDetailDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTIScreenDetailDataTable.TransferPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BucketName {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenDetailDataTable.BucketNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BucketName\' in table \'TIScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenDetailDataTable.BucketNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufactureBatchNo {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenDetailDataTable.ManufactureBatchNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManufactureBatchNo\' in table \'TIScreenDetailDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenDetailDataTable.ManufactureBatchNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AfterAdjustQty {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenDetailDataTable.AfterAdjustQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AfterAdjustQty\' in table \'TIScreenDetailDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTIScreenDetailDataTable.AfterAdjustQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalAmount {
                get {
                    try {
                        return ((string)(this[this.tableTIScreenDetailDataTable.TotalAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmount\' in table \'TIScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTIScreenDetailDataTable.TotalAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemCodeNull() {
                return this.IsNull(this.tableTIScreenDetailDataTable.ItemCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemCodeNull() {
                this[this.tableTIScreenDetailDataTable.ItemCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemDescriptionNull() {
                return this.IsNull(this.tableTIScreenDetailDataTable.ItemDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemDescriptionNull() {
                this[this.tableTIScreenDetailDataTable.ItemDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransferPriceNull() {
                return this.IsNull(this.tableTIScreenDetailDataTable.TransferPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransferPriceNull() {
                this[this.tableTIScreenDetailDataTable.TransferPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBucketNameNull() {
                return this.IsNull(this.tableTIScreenDetailDataTable.BucketNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBucketNameNull() {
                this[this.tableTIScreenDetailDataTable.BucketNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufactureBatchNoNull() {
                return this.IsNull(this.tableTIScreenDetailDataTable.ManufactureBatchNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufactureBatchNoNull() {
                this[this.tableTIScreenDetailDataTable.ManufactureBatchNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAfterAdjustQtyNull() {
                return this.IsNull(this.tableTIScreenDetailDataTable.AfterAdjustQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAfterAdjustQtyNull() {
                this[this.tableTIScreenDetailDataTable.AfterAdjustQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountNull() {
                return this.IsNull(this.tableTIScreenDetailDataTable.TotalAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountNull() {
                this[this.tableTIScreenDetailDataTable.TotalAmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TIScreenHeaderDataTableRowChangeEvent : global::System.EventArgs {
            
            private TIScreenHeaderDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TIScreenHeaderDataTableRowChangeEvent(TIScreenHeaderDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TIScreenHeaderDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TIScreenDetailDataTableRowChangeEvent : global::System.EventArgs {
            
            private TIScreenDetailDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TIScreenDetailDataTableRowChangeEvent(TIScreenDetailDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TIScreenDetailDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591