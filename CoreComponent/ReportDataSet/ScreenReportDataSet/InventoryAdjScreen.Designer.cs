//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CoreComponent.ReportDataSet.ScreenReportDataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("InventoryAdjScreen")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class InventoryAdjScreen : global::System.Data.DataSet {
        
        private InventoryAdjScreenHeaderDataTableDataTable tableInventoryAdjScreenHeaderDataTable;
        
        private InventoryAdjScreenDetailDataTableDataTable tableInventoryAdjScreenDetailDataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InventoryAdjScreen() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected InventoryAdjScreen(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["InventoryAdjScreenHeaderDataTable"] != null)) {
                    base.Tables.Add(new InventoryAdjScreenHeaderDataTableDataTable(ds.Tables["InventoryAdjScreenHeaderDataTable"]));
                }
                if ((ds.Tables["InventoryAdjScreenDetailDataTable"] != null)) {
                    base.Tables.Add(new InventoryAdjScreenDetailDataTableDataTable(ds.Tables["InventoryAdjScreenDetailDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InventoryAdjScreenHeaderDataTableDataTable InventoryAdjScreenHeaderDataTable {
            get {
                return this.tableInventoryAdjScreenHeaderDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InventoryAdjScreenDetailDataTableDataTable InventoryAdjScreenDetailDataTable {
            get {
                return this.tableInventoryAdjScreenDetailDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            InventoryAdjScreen cln = ((InventoryAdjScreen)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["InventoryAdjScreenHeaderDataTable"] != null)) {
                    base.Tables.Add(new InventoryAdjScreenHeaderDataTableDataTable(ds.Tables["InventoryAdjScreenHeaderDataTable"]));
                }
                if ((ds.Tables["InventoryAdjScreenDetailDataTable"] != null)) {
                    base.Tables.Add(new InventoryAdjScreenDetailDataTableDataTable(ds.Tables["InventoryAdjScreenDetailDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableInventoryAdjScreenHeaderDataTable = ((InventoryAdjScreenHeaderDataTableDataTable)(base.Tables["InventoryAdjScreenHeaderDataTable"]));
            if ((initTable == true)) {
                if ((this.tableInventoryAdjScreenHeaderDataTable != null)) {
                    this.tableInventoryAdjScreenHeaderDataTable.InitVars();
                }
            }
            this.tableInventoryAdjScreenDetailDataTable = ((InventoryAdjScreenDetailDataTableDataTable)(base.Tables["InventoryAdjScreenDetailDataTable"]));
            if ((initTable == true)) {
                if ((this.tableInventoryAdjScreenDetailDataTable != null)) {
                    this.tableInventoryAdjScreenDetailDataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "InventoryAdjScreen";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/InventoryAdjScreen.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableInventoryAdjScreenHeaderDataTable = new InventoryAdjScreenHeaderDataTableDataTable();
            base.Tables.Add(this.tableInventoryAdjScreenHeaderDataTable);
            this.tableInventoryAdjScreenDetailDataTable = new InventoryAdjScreenDetailDataTableDataTable();
            base.Tables.Add(this.tableInventoryAdjScreenDetailDataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInventoryAdjScreenHeaderDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInventoryAdjScreenDetailDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            InventoryAdjScreen ds = new InventoryAdjScreen();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void InventoryAdjScreenHeaderDataTableRowChangeEventHandler(object sender, InventoryAdjScreenHeaderDataTableRowChangeEvent e);
        
        public delegate void InventoryAdjScreenDetailDataTableRowChangeEventHandler(object sender, InventoryAdjScreenDetailDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InventoryAdjScreenHeaderDataTableDataTable : global::System.Data.TypedTableBase<InventoryAdjScreenHeaderDataTableRow> {
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnLocationName;
            
            private global::System.Data.DataColumn columnLocationAddress;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnInitiatedDate;
            
            private global::System.Data.DataColumn columnInitiatedBy;
            
            private global::System.Data.DataColumn columnApprovedRejectedBy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryAdjScreenHeaderDataTableDataTable() {
                this.TableName = "InventoryAdjScreenHeaderDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InventoryAdjScreenHeaderDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InventoryAdjScreenHeaderDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationNameColumn {
                get {
                    return this.columnLocationName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationAddressColumn {
                get {
                    return this.columnLocationAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InitiatedDateColumn {
                get {
                    return this.columnInitiatedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InitiatedByColumn {
                get {
                    return this.columnInitiatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedRejectedByColumn {
                get {
                    return this.columnApprovedRejectedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryAdjScreenHeaderDataTableRow this[int index] {
                get {
                    return ((InventoryAdjScreenHeaderDataTableRow)(this.Rows[index]));
                }
            }
            
            public event InventoryAdjScreenHeaderDataTableRowChangeEventHandler InventoryAdjScreenHeaderDataTableRowChanging;
            
            public event InventoryAdjScreenHeaderDataTableRowChangeEventHandler InventoryAdjScreenHeaderDataTableRowChanged;
            
            public event InventoryAdjScreenHeaderDataTableRowChangeEventHandler InventoryAdjScreenHeaderDataTableRowDeleting;
            
            public event InventoryAdjScreenHeaderDataTableRowChangeEventHandler InventoryAdjScreenHeaderDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInventoryAdjScreenHeaderDataTableRow(InventoryAdjScreenHeaderDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryAdjScreenHeaderDataTableRow AddInventoryAdjScreenHeaderDataTableRow(string Location, string LocationName, string LocationAddress, string Status, string InitiatedDate, string InitiatedBy, string ApprovedRejectedBy) {
                InventoryAdjScreenHeaderDataTableRow rowInventoryAdjScreenHeaderDataTableRow = ((InventoryAdjScreenHeaderDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Location,
                        LocationName,
                        LocationAddress,
                        Status,
                        InitiatedDate,
                        InitiatedBy,
                        ApprovedRejectedBy};
                rowInventoryAdjScreenHeaderDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInventoryAdjScreenHeaderDataTableRow);
                return rowInventoryAdjScreenHeaderDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InventoryAdjScreenHeaderDataTableDataTable cln = ((InventoryAdjScreenHeaderDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InventoryAdjScreenHeaderDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLocation = base.Columns["Location"];
                this.columnLocationName = base.Columns["LocationName"];
                this.columnLocationAddress = base.Columns["LocationAddress"];
                this.columnStatus = base.Columns["Status"];
                this.columnInitiatedDate = base.Columns["InitiatedDate"];
                this.columnInitiatedBy = base.Columns["InitiatedBy"];
                this.columnApprovedRejectedBy = base.Columns["ApprovedRejectedBy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnLocationName = new global::System.Data.DataColumn("LocationName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationName);
                this.columnLocationAddress = new global::System.Data.DataColumn("LocationAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationAddress);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnInitiatedDate = new global::System.Data.DataColumn("InitiatedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInitiatedDate);
                this.columnInitiatedBy = new global::System.Data.DataColumn("InitiatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInitiatedBy);
                this.columnApprovedRejectedBy = new global::System.Data.DataColumn("ApprovedRejectedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedRejectedBy);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryAdjScreenHeaderDataTableRow NewInventoryAdjScreenHeaderDataTableRow() {
                return ((InventoryAdjScreenHeaderDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InventoryAdjScreenHeaderDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InventoryAdjScreenHeaderDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InventoryAdjScreenHeaderDataTableRowChanged != null)) {
                    this.InventoryAdjScreenHeaderDataTableRowChanged(this, new InventoryAdjScreenHeaderDataTableRowChangeEvent(((InventoryAdjScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InventoryAdjScreenHeaderDataTableRowChanging != null)) {
                    this.InventoryAdjScreenHeaderDataTableRowChanging(this, new InventoryAdjScreenHeaderDataTableRowChangeEvent(((InventoryAdjScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InventoryAdjScreenHeaderDataTableRowDeleted != null)) {
                    this.InventoryAdjScreenHeaderDataTableRowDeleted(this, new InventoryAdjScreenHeaderDataTableRowChangeEvent(((InventoryAdjScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InventoryAdjScreenHeaderDataTableRowDeleting != null)) {
                    this.InventoryAdjScreenHeaderDataTableRowDeleting(this, new InventoryAdjScreenHeaderDataTableRowChangeEvent(((InventoryAdjScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInventoryAdjScreenHeaderDataTableRow(InventoryAdjScreenHeaderDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InventoryAdjScreen ds = new InventoryAdjScreen();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InventoryAdjScreenHeaderDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InventoryAdjScreenDetailDataTableDataTable : global::System.Data.TypedTableBase<InventoryAdjScreenDetailDataTableRow> {
            
            private global::System.Data.DataColumn columnAdjustmentNo;
            
            private global::System.Data.DataColumn columnItemCode;
            
            private global::System.Data.DataColumn columnItemName;
            
            private global::System.Data.DataColumn columnUOMName;
            
            private global::System.Data.DataColumn columnFromBucketName;
            
            private global::System.Data.DataColumn columnToBucketName;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnReasonCodeDescription;
            
            private global::System.Data.DataColumn columnApprovedQty;
            
            private global::System.Data.DataColumn columnBatchNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryAdjScreenDetailDataTableDataTable() {
                this.TableName = "InventoryAdjScreenDetailDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InventoryAdjScreenDetailDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InventoryAdjScreenDetailDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentNoColumn {
                get {
                    return this.columnAdjustmentNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemCodeColumn {
                get {
                    return this.columnItemCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemNameColumn {
                get {
                    return this.columnItemName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UOMNameColumn {
                get {
                    return this.columnUOMName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromBucketNameColumn {
                get {
                    return this.columnFromBucketName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToBucketNameColumn {
                get {
                    return this.columnToBucketName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReasonCodeDescriptionColumn {
                get {
                    return this.columnReasonCodeDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedQtyColumn {
                get {
                    return this.columnApprovedQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatchNoColumn {
                get {
                    return this.columnBatchNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryAdjScreenDetailDataTableRow this[int index] {
                get {
                    return ((InventoryAdjScreenDetailDataTableRow)(this.Rows[index]));
                }
            }
            
            public event InventoryAdjScreenDetailDataTableRowChangeEventHandler InventoryAdjScreenDetailDataTableRowChanging;
            
            public event InventoryAdjScreenDetailDataTableRowChangeEventHandler InventoryAdjScreenDetailDataTableRowChanged;
            
            public event InventoryAdjScreenDetailDataTableRowChangeEventHandler InventoryAdjScreenDetailDataTableRowDeleting;
            
            public event InventoryAdjScreenDetailDataTableRowChangeEventHandler InventoryAdjScreenDetailDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInventoryAdjScreenDetailDataTableRow(InventoryAdjScreenDetailDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryAdjScreenDetailDataTableRow AddInventoryAdjScreenDetailDataTableRow(string AdjustmentNo, string ItemCode, string ItemName, string UOMName, string FromBucketName, string ToBucketName, string Quantity, string ReasonCodeDescription, string ApprovedQty, string BatchNo) {
                InventoryAdjScreenDetailDataTableRow rowInventoryAdjScreenDetailDataTableRow = ((InventoryAdjScreenDetailDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AdjustmentNo,
                        ItemCode,
                        ItemName,
                        UOMName,
                        FromBucketName,
                        ToBucketName,
                        Quantity,
                        ReasonCodeDescription,
                        ApprovedQty,
                        BatchNo};
                rowInventoryAdjScreenDetailDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInventoryAdjScreenDetailDataTableRow);
                return rowInventoryAdjScreenDetailDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InventoryAdjScreenDetailDataTableDataTable cln = ((InventoryAdjScreenDetailDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InventoryAdjScreenDetailDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAdjustmentNo = base.Columns["AdjustmentNo"];
                this.columnItemCode = base.Columns["ItemCode"];
                this.columnItemName = base.Columns["ItemName"];
                this.columnUOMName = base.Columns["UOMName"];
                this.columnFromBucketName = base.Columns["FromBucketName"];
                this.columnToBucketName = base.Columns["ToBucketName"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnReasonCodeDescription = base.Columns["ReasonCodeDescription"];
                this.columnApprovedQty = base.Columns["ApprovedQty"];
                this.columnBatchNo = base.Columns["BatchNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAdjustmentNo = new global::System.Data.DataColumn("AdjustmentNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentNo);
                this.columnItemCode = new global::System.Data.DataColumn("ItemCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemCode);
                this.columnItemName = new global::System.Data.DataColumn("ItemName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemName);
                this.columnUOMName = new global::System.Data.DataColumn("UOMName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUOMName);
                this.columnFromBucketName = new global::System.Data.DataColumn("FromBucketName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromBucketName);
                this.columnToBucketName = new global::System.Data.DataColumn("ToBucketName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToBucketName);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnReasonCodeDescription = new global::System.Data.DataColumn("ReasonCodeDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReasonCodeDescription);
                this.columnApprovedQty = new global::System.Data.DataColumn("ApprovedQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedQty);
                this.columnBatchNo = new global::System.Data.DataColumn("BatchNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchNo);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryAdjScreenDetailDataTableRow NewInventoryAdjScreenDetailDataTableRow() {
                return ((InventoryAdjScreenDetailDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InventoryAdjScreenDetailDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InventoryAdjScreenDetailDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InventoryAdjScreenDetailDataTableRowChanged != null)) {
                    this.InventoryAdjScreenDetailDataTableRowChanged(this, new InventoryAdjScreenDetailDataTableRowChangeEvent(((InventoryAdjScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InventoryAdjScreenDetailDataTableRowChanging != null)) {
                    this.InventoryAdjScreenDetailDataTableRowChanging(this, new InventoryAdjScreenDetailDataTableRowChangeEvent(((InventoryAdjScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InventoryAdjScreenDetailDataTableRowDeleted != null)) {
                    this.InventoryAdjScreenDetailDataTableRowDeleted(this, new InventoryAdjScreenDetailDataTableRowChangeEvent(((InventoryAdjScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InventoryAdjScreenDetailDataTableRowDeleting != null)) {
                    this.InventoryAdjScreenDetailDataTableRowDeleting(this, new InventoryAdjScreenDetailDataTableRowChangeEvent(((InventoryAdjScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInventoryAdjScreenDetailDataTableRow(InventoryAdjScreenDetailDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InventoryAdjScreen ds = new InventoryAdjScreen();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InventoryAdjScreenDetailDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InventoryAdjScreenHeaderDataTableRow : global::System.Data.DataRow {
            
            private InventoryAdjScreenHeaderDataTableDataTable tableInventoryAdjScreenHeaderDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InventoryAdjScreenHeaderDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInventoryAdjScreenHeaderDataTable = ((InventoryAdjScreenHeaderDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenHeaderDataTable.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'InventoryAdjScreenHeaderDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenHeaderDataTable.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationName {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenHeaderDataTable.LocationNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationName\' in table \'InventoryAdjScreenHeaderDataTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenHeaderDataTable.LocationNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationAddress {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenHeaderDataTable.LocationAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationAddress\' in table \'InventoryAdjScreenHeaderDataTabl" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenHeaderDataTable.LocationAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenHeaderDataTable.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'InventoryAdjScreenHeaderDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenHeaderDataTable.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InitiatedDate {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenHeaderDataTable.InitiatedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InitiatedDate\' in table \'InventoryAdjScreenHeaderDataTable\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenHeaderDataTable.InitiatedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InitiatedBy {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenHeaderDataTable.InitiatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InitiatedBy\' in table \'InventoryAdjScreenHeaderDataTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenHeaderDataTable.InitiatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApprovedRejectedBy {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenHeaderDataTable.ApprovedRejectedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedRejectedBy\' in table \'InventoryAdjScreenHeaderDataT" +
                                "able\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenHeaderDataTable.ApprovedRejectedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tableInventoryAdjScreenHeaderDataTable.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tableInventoryAdjScreenHeaderDataTable.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNameNull() {
                return this.IsNull(this.tableInventoryAdjScreenHeaderDataTable.LocationNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNameNull() {
                this[this.tableInventoryAdjScreenHeaderDataTable.LocationNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationAddressNull() {
                return this.IsNull(this.tableInventoryAdjScreenHeaderDataTable.LocationAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationAddressNull() {
                this[this.tableInventoryAdjScreenHeaderDataTable.LocationAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableInventoryAdjScreenHeaderDataTable.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableInventoryAdjScreenHeaderDataTable.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInitiatedDateNull() {
                return this.IsNull(this.tableInventoryAdjScreenHeaderDataTable.InitiatedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInitiatedDateNull() {
                this[this.tableInventoryAdjScreenHeaderDataTable.InitiatedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInitiatedByNull() {
                return this.IsNull(this.tableInventoryAdjScreenHeaderDataTable.InitiatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInitiatedByNull() {
                this[this.tableInventoryAdjScreenHeaderDataTable.InitiatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedRejectedByNull() {
                return this.IsNull(this.tableInventoryAdjScreenHeaderDataTable.ApprovedRejectedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedRejectedByNull() {
                this[this.tableInventoryAdjScreenHeaderDataTable.ApprovedRejectedByColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InventoryAdjScreenDetailDataTableRow : global::System.Data.DataRow {
            
            private InventoryAdjScreenDetailDataTableDataTable tableInventoryAdjScreenDetailDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InventoryAdjScreenDetailDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInventoryAdjScreenDetailDataTable = ((InventoryAdjScreenDetailDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjustmentNo {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenDetailDataTable.AdjustmentNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentNo\' in table \'InventoryAdjScreenDetailDataTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenDetailDataTable.AdjustmentNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemCode {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenDetailDataTable.ItemCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemCode\' in table \'InventoryAdjScreenDetailDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenDetailDataTable.ItemCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemName {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenDetailDataTable.ItemNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemName\' in table \'InventoryAdjScreenDetailDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenDetailDataTable.ItemNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UOMName {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenDetailDataTable.UOMNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UOMName\' in table \'InventoryAdjScreenDetailDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenDetailDataTable.UOMNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromBucketName {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenDetailDataTable.FromBucketNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromBucketName\' in table \'InventoryAdjScreenDetailDataTable" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenDetailDataTable.FromBucketNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToBucketName {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenDetailDataTable.ToBucketNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToBucketName\' in table \'InventoryAdjScreenDetailDataTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenDetailDataTable.ToBucketNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Quantity {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenDetailDataTable.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'InventoryAdjScreenDetailDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenDetailDataTable.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReasonCodeDescription {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenDetailDataTable.ReasonCodeDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReasonCodeDescription\' in table \'InventoryAdjScreenDetailDa" +
                                "taTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenDetailDataTable.ReasonCodeDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApprovedQty {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenDetailDataTable.ApprovedQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedQty\' in table \'InventoryAdjScreenDetailDataTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenDetailDataTable.ApprovedQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BatchNo {
                get {
                    try {
                        return ((string)(this[this.tableInventoryAdjScreenDetailDataTable.BatchNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BatchNo\' in table \'InventoryAdjScreenDetailDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableInventoryAdjScreenDetailDataTable.BatchNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentNoNull() {
                return this.IsNull(this.tableInventoryAdjScreenDetailDataTable.AdjustmentNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentNoNull() {
                this[this.tableInventoryAdjScreenDetailDataTable.AdjustmentNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemCodeNull() {
                return this.IsNull(this.tableInventoryAdjScreenDetailDataTable.ItemCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemCodeNull() {
                this[this.tableInventoryAdjScreenDetailDataTable.ItemCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNameNull() {
                return this.IsNull(this.tableInventoryAdjScreenDetailDataTable.ItemNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNameNull() {
                this[this.tableInventoryAdjScreenDetailDataTable.ItemNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUOMNameNull() {
                return this.IsNull(this.tableInventoryAdjScreenDetailDataTable.UOMNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUOMNameNull() {
                this[this.tableInventoryAdjScreenDetailDataTable.UOMNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromBucketNameNull() {
                return this.IsNull(this.tableInventoryAdjScreenDetailDataTable.FromBucketNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromBucketNameNull() {
                this[this.tableInventoryAdjScreenDetailDataTable.FromBucketNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToBucketNameNull() {
                return this.IsNull(this.tableInventoryAdjScreenDetailDataTable.ToBucketNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToBucketNameNull() {
                this[this.tableInventoryAdjScreenDetailDataTable.ToBucketNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tableInventoryAdjScreenDetailDataTable.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tableInventoryAdjScreenDetailDataTable.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReasonCodeDescriptionNull() {
                return this.IsNull(this.tableInventoryAdjScreenDetailDataTable.ReasonCodeDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReasonCodeDescriptionNull() {
                this[this.tableInventoryAdjScreenDetailDataTable.ReasonCodeDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedQtyNull() {
                return this.IsNull(this.tableInventoryAdjScreenDetailDataTable.ApprovedQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedQtyNull() {
                this[this.tableInventoryAdjScreenDetailDataTable.ApprovedQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchNoNull() {
                return this.IsNull(this.tableInventoryAdjScreenDetailDataTable.BatchNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchNoNull() {
                this[this.tableInventoryAdjScreenDetailDataTable.BatchNoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InventoryAdjScreenHeaderDataTableRowChangeEvent : global::System.EventArgs {
            
            private InventoryAdjScreenHeaderDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryAdjScreenHeaderDataTableRowChangeEvent(InventoryAdjScreenHeaderDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryAdjScreenHeaderDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InventoryAdjScreenDetailDataTableRowChangeEvent : global::System.EventArgs {
            
            private InventoryAdjScreenDetailDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryAdjScreenDetailDataTableRowChangeEvent(InventoryAdjScreenDetailDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryAdjScreenDetailDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591