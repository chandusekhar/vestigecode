//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5472
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CoreComponent.ReportDataSet.ScreenReportDataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("TOScreen")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TOScreen : global::System.Data.DataSet {
        
        private TOScreenHeaderDataTableDataTable tableTOScreenHeaderDataTable;
        
        private TOScreenDetailDataTableDataTable tableTOScreenDetailDataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TOScreen() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TOScreen(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TOScreenHeaderDataTable"] != null)) {
                    base.Tables.Add(new TOScreenHeaderDataTableDataTable(ds.Tables["TOScreenHeaderDataTable"]));
                }
                if ((ds.Tables["TOScreenDetailDataTable"] != null)) {
                    base.Tables.Add(new TOScreenDetailDataTableDataTable(ds.Tables["TOScreenDetailDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TOScreenHeaderDataTableDataTable TOScreenHeaderDataTable {
            get {
                return this.tableTOScreenHeaderDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TOScreenDetailDataTableDataTable TOScreenDetailDataTable {
            get {
                return this.tableTOScreenDetailDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            TOScreen cln = ((TOScreen)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TOScreenHeaderDataTable"] != null)) {
                    base.Tables.Add(new TOScreenHeaderDataTableDataTable(ds.Tables["TOScreenHeaderDataTable"]));
                }
                if ((ds.Tables["TOScreenDetailDataTable"] != null)) {
                    base.Tables.Add(new TOScreenDetailDataTableDataTable(ds.Tables["TOScreenDetailDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTOScreenHeaderDataTable = ((TOScreenHeaderDataTableDataTable)(base.Tables["TOScreenHeaderDataTable"]));
            if ((initTable == true)) {
                if ((this.tableTOScreenHeaderDataTable != null)) {
                    this.tableTOScreenHeaderDataTable.InitVars();
                }
            }
            this.tableTOScreenDetailDataTable = ((TOScreenDetailDataTableDataTable)(base.Tables["TOScreenDetailDataTable"]));
            if ((initTable == true)) {
                if ((this.tableTOScreenDetailDataTable != null)) {
                    this.tableTOScreenDetailDataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TOScreen";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TOScreen.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTOScreenHeaderDataTable = new TOScreenHeaderDataTableDataTable();
            base.Tables.Add(this.tableTOScreenHeaderDataTable);
            this.tableTOScreenDetailDataTable = new TOScreenDetailDataTableDataTable();
            base.Tables.Add(this.tableTOScreenDetailDataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTOScreenHeaderDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTOScreenDetailDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            TOScreen ds = new TOScreen();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TOScreenHeaderDataTableRowChangeEventHandler(object sender, TOScreenHeaderDataTableRowChangeEvent e);
        
        public delegate void TOScreenDetailDataTableRowChangeEventHandler(object sender, TOScreenDetailDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TOScreenHeaderDataTableDataTable : global::System.Data.TypedTableBase<TOScreenHeaderDataTableRow> {
            
            private global::System.Data.DataColumn columnTONumber;
            
            private global::System.Data.DataColumn columnTOINumber;
            
            private global::System.Data.DataColumn columnSourceLocation;
            
            private global::System.Data.DataColumn columnDestinationLocation;
            
            private global::System.Data.DataColumn columnSourceAddress;
            
            private global::System.Data.DataColumn columnDestinationAddress;
            
            private global::System.Data.DataColumn columnSourceTINNo;
            
            private global::System.Data.DataColumn columnSourceCSTNo;
            
            private global::System.Data.DataColumn columnSourceVATNo;
            
            private global::System.Data.DataColumn columnDestinationTINNo;
            
            private global::System.Data.DataColumn columnDestinationCSTNo;
            
            private global::System.Data.DataColumn columnDestinationVATNo;
            
            private global::System.Data.DataColumn columnExpectedDeliveryDate;
            
            private global::System.Data.DataColumn columnReferenceNo;
            
            private global::System.Data.DataColumn columnShippingDetails;
            
            private global::System.Data.DataColumn columnShippingWayBillNo;
            
            private global::System.Data.DataColumn columnModifiedByName;
            
            private global::System.Data.DataColumn columnModifiedDate;
            
            private global::System.Data.DataColumn columnSourceEmail;
            
            private global::System.Data.DataColumn columnSourcePhone;
            
            private global::System.Data.DataColumn columnSourceCity;
            
            private global::System.Data.DataColumn columnDestinationCity;
            
            private global::System.Data.DataColumn columnIsExported;
            
            private global::System.Data.DataColumn columnIECCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOScreenHeaderDataTableDataTable() {
                this.TableName = "TOScreenHeaderDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TOScreenHeaderDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TOScreenHeaderDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TONumberColumn {
                get {
                    return this.columnTONumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOINumberColumn {
                get {
                    return this.columnTOINumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceLocationColumn {
                get {
                    return this.columnSourceLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationLocationColumn {
                get {
                    return this.columnDestinationLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceAddressColumn {
                get {
                    return this.columnSourceAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationAddressColumn {
                get {
                    return this.columnDestinationAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceTINNoColumn {
                get {
                    return this.columnSourceTINNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceCSTNoColumn {
                get {
                    return this.columnSourceCSTNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceVATNoColumn {
                get {
                    return this.columnSourceVATNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationTINNoColumn {
                get {
                    return this.columnDestinationTINNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationCSTNoColumn {
                get {
                    return this.columnDestinationCSTNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationVATNoColumn {
                get {
                    return this.columnDestinationVATNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpectedDeliveryDateColumn {
                get {
                    return this.columnExpectedDeliveryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReferenceNoColumn {
                get {
                    return this.columnReferenceNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShippingDetailsColumn {
                get {
                    return this.columnShippingDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShippingWayBillNoColumn {
                get {
                    return this.columnShippingWayBillNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedByNameColumn {
                get {
                    return this.columnModifiedByName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedDateColumn {
                get {
                    return this.columnModifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceEmailColumn {
                get {
                    return this.columnSourceEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourcePhoneColumn {
                get {
                    return this.columnSourcePhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceCityColumn {
                get {
                    return this.columnSourceCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationCityColumn {
                get {
                    return this.columnDestinationCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExportedColumn {
                get {
                    return this.columnIsExported;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IECCodeColumn {
                get {
                    return this.columnIECCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOScreenHeaderDataTableRow this[int index] {
                get {
                    return ((TOScreenHeaderDataTableRow)(this.Rows[index]));
                }
            }
            
            public event TOScreenHeaderDataTableRowChangeEventHandler TOScreenHeaderDataTableRowChanging;
            
            public event TOScreenHeaderDataTableRowChangeEventHandler TOScreenHeaderDataTableRowChanged;
            
            public event TOScreenHeaderDataTableRowChangeEventHandler TOScreenHeaderDataTableRowDeleting;
            
            public event TOScreenHeaderDataTableRowChangeEventHandler TOScreenHeaderDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTOScreenHeaderDataTableRow(TOScreenHeaderDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOScreenHeaderDataTableRow AddTOScreenHeaderDataTableRow(
                        string TONumber, 
                        string TOINumber, 
                        string SourceLocation, 
                        string DestinationLocation, 
                        string SourceAddress, 
                        string DestinationAddress, 
                        string SourceTINNo, 
                        string SourceCSTNo, 
                        string SourceVATNo, 
                        string DestinationTINNo, 
                        string DestinationCSTNo, 
                        string DestinationVATNo, 
                        string ExpectedDeliveryDate, 
                        string ReferenceNo, 
                        string ShippingDetails, 
                        string ShippingWayBillNo, 
                        string ModifiedByName, 
                        string ModifiedDate, 
                        string SourceEmail, 
                        string SourcePhone, 
                        string SourceCity, 
                        string DestinationCity, 
                        string IsExported, 
                        string IECCode) {
                TOScreenHeaderDataTableRow rowTOScreenHeaderDataTableRow = ((TOScreenHeaderDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TONumber,
                        TOINumber,
                        SourceLocation,
                        DestinationLocation,
                        SourceAddress,
                        DestinationAddress,
                        SourceTINNo,
                        SourceCSTNo,
                        SourceVATNo,
                        DestinationTINNo,
                        DestinationCSTNo,
                        DestinationVATNo,
                        ExpectedDeliveryDate,
                        ReferenceNo,
                        ShippingDetails,
                        ShippingWayBillNo,
                        ModifiedByName,
                        ModifiedDate,
                        SourceEmail,
                        SourcePhone,
                        SourceCity,
                        DestinationCity,
                        IsExported,
                        IECCode};
                rowTOScreenHeaderDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTOScreenHeaderDataTableRow);
                return rowTOScreenHeaderDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TOScreenHeaderDataTableDataTable cln = ((TOScreenHeaderDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TOScreenHeaderDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTONumber = base.Columns["TONumber"];
                this.columnTOINumber = base.Columns["TOINumber"];
                this.columnSourceLocation = base.Columns["SourceLocation"];
                this.columnDestinationLocation = base.Columns["DestinationLocation"];
                this.columnSourceAddress = base.Columns["SourceAddress"];
                this.columnDestinationAddress = base.Columns["DestinationAddress"];
                this.columnSourceTINNo = base.Columns["SourceTINNo"];
                this.columnSourceCSTNo = base.Columns["SourceCSTNo"];
                this.columnSourceVATNo = base.Columns["SourceVATNo"];
                this.columnDestinationTINNo = base.Columns["DestinationTINNo"];
                this.columnDestinationCSTNo = base.Columns["DestinationCSTNo"];
                this.columnDestinationVATNo = base.Columns["DestinationVATNo"];
                this.columnExpectedDeliveryDate = base.Columns["ExpectedDeliveryDate"];
                this.columnReferenceNo = base.Columns["ReferenceNo"];
                this.columnShippingDetails = base.Columns["ShippingDetails"];
                this.columnShippingWayBillNo = base.Columns["ShippingWayBillNo"];
                this.columnModifiedByName = base.Columns["ModifiedByName"];
                this.columnModifiedDate = base.Columns["ModifiedDate"];
                this.columnSourceEmail = base.Columns["SourceEmail"];
                this.columnSourcePhone = base.Columns["SourcePhone"];
                this.columnSourceCity = base.Columns["SourceCity"];
                this.columnDestinationCity = base.Columns["DestinationCity"];
                this.columnIsExported = base.Columns["IsExported"];
                this.columnIECCode = base.Columns["IECCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTONumber = new global::System.Data.DataColumn("TONumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTONumber);
                this.columnTOINumber = new global::System.Data.DataColumn("TOINumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOINumber);
                this.columnSourceLocation = new global::System.Data.DataColumn("SourceLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceLocation);
                this.columnDestinationLocation = new global::System.Data.DataColumn("DestinationLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationLocation);
                this.columnSourceAddress = new global::System.Data.DataColumn("SourceAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceAddress);
                this.columnDestinationAddress = new global::System.Data.DataColumn("DestinationAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationAddress);
                this.columnSourceTINNo = new global::System.Data.DataColumn("SourceTINNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceTINNo);
                this.columnSourceCSTNo = new global::System.Data.DataColumn("SourceCSTNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceCSTNo);
                this.columnSourceVATNo = new global::System.Data.DataColumn("SourceVATNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceVATNo);
                this.columnDestinationTINNo = new global::System.Data.DataColumn("DestinationTINNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationTINNo);
                this.columnDestinationCSTNo = new global::System.Data.DataColumn("DestinationCSTNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationCSTNo);
                this.columnDestinationVATNo = new global::System.Data.DataColumn("DestinationVATNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationVATNo);
                this.columnExpectedDeliveryDate = new global::System.Data.DataColumn("ExpectedDeliveryDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpectedDeliveryDate);
                this.columnReferenceNo = new global::System.Data.DataColumn("ReferenceNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferenceNo);
                this.columnShippingDetails = new global::System.Data.DataColumn("ShippingDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShippingDetails);
                this.columnShippingWayBillNo = new global::System.Data.DataColumn("ShippingWayBillNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShippingWayBillNo);
                this.columnModifiedByName = new global::System.Data.DataColumn("ModifiedByName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedByName);
                this.columnModifiedDate = new global::System.Data.DataColumn("ModifiedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDate);
                this.columnSourceEmail = new global::System.Data.DataColumn("SourceEmail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceEmail);
                this.columnSourcePhone = new global::System.Data.DataColumn("SourcePhone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourcePhone);
                this.columnSourceCity = new global::System.Data.DataColumn("SourceCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceCity);
                this.columnDestinationCity = new global::System.Data.DataColumn("DestinationCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationCity);
                this.columnIsExported = new global::System.Data.DataColumn("IsExported", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExported);
                this.columnIECCode = new global::System.Data.DataColumn("IECCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIECCode);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOScreenHeaderDataTableRow NewTOScreenHeaderDataTableRow() {
                return ((TOScreenHeaderDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TOScreenHeaderDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TOScreenHeaderDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TOScreenHeaderDataTableRowChanged != null)) {
                    this.TOScreenHeaderDataTableRowChanged(this, new TOScreenHeaderDataTableRowChangeEvent(((TOScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TOScreenHeaderDataTableRowChanging != null)) {
                    this.TOScreenHeaderDataTableRowChanging(this, new TOScreenHeaderDataTableRowChangeEvent(((TOScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TOScreenHeaderDataTableRowDeleted != null)) {
                    this.TOScreenHeaderDataTableRowDeleted(this, new TOScreenHeaderDataTableRowChangeEvent(((TOScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TOScreenHeaderDataTableRowDeleting != null)) {
                    this.TOScreenHeaderDataTableRowDeleting(this, new TOScreenHeaderDataTableRowChangeEvent(((TOScreenHeaderDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTOScreenHeaderDataTableRow(TOScreenHeaderDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TOScreen ds = new TOScreen();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TOScreenHeaderDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TOScreenDetailDataTableDataTable : global::System.Data.TypedTableBase<TOScreenDetailDataTableRow> {
            
            private global::System.Data.DataColumn columnItemCode;
            
            private global::System.Data.DataColumn columnItemDescription;
            
            private global::System.Data.DataColumn columnTransferPrice;
            
            private global::System.Data.DataColumn columnAfterAdjustQty;
            
            private global::System.Data.DataColumn columnTotalAmount;
            
            private global::System.Data.DataColumn columnManufactureBatchNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOScreenDetailDataTableDataTable() {
                this.TableName = "TOScreenDetailDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TOScreenDetailDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TOScreenDetailDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemCodeColumn {
                get {
                    return this.columnItemCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemDescriptionColumn {
                get {
                    return this.columnItemDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransferPriceColumn {
                get {
                    return this.columnTransferPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AfterAdjustQtyColumn {
                get {
                    return this.columnAfterAdjustQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAmountColumn {
                get {
                    return this.columnTotalAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufactureBatchNoColumn {
                get {
                    return this.columnManufactureBatchNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOScreenDetailDataTableRow this[int index] {
                get {
                    return ((TOScreenDetailDataTableRow)(this.Rows[index]));
                }
            }
            
            public event TOScreenDetailDataTableRowChangeEventHandler TOScreenDetailDataTableRowChanging;
            
            public event TOScreenDetailDataTableRowChangeEventHandler TOScreenDetailDataTableRowChanged;
            
            public event TOScreenDetailDataTableRowChangeEventHandler TOScreenDetailDataTableRowDeleting;
            
            public event TOScreenDetailDataTableRowChangeEventHandler TOScreenDetailDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTOScreenDetailDataTableRow(TOScreenDetailDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOScreenDetailDataTableRow AddTOScreenDetailDataTableRow(string ItemCode, string ItemDescription, string TransferPrice, string AfterAdjustQty, string TotalAmount, string ManufactureBatchNo) {
                TOScreenDetailDataTableRow rowTOScreenDetailDataTableRow = ((TOScreenDetailDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ItemCode,
                        ItemDescription,
                        TransferPrice,
                        AfterAdjustQty,
                        TotalAmount,
                        ManufactureBatchNo};
                rowTOScreenDetailDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTOScreenDetailDataTableRow);
                return rowTOScreenDetailDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TOScreenDetailDataTableDataTable cln = ((TOScreenDetailDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TOScreenDetailDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItemCode = base.Columns["ItemCode"];
                this.columnItemDescription = base.Columns["ItemDescription"];
                this.columnTransferPrice = base.Columns["TransferPrice"];
                this.columnAfterAdjustQty = base.Columns["AfterAdjustQty"];
                this.columnTotalAmount = base.Columns["TotalAmount"];
                this.columnManufactureBatchNo = base.Columns["ManufactureBatchNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItemCode = new global::System.Data.DataColumn("ItemCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemCode);
                this.columnItemDescription = new global::System.Data.DataColumn("ItemDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemDescription);
                this.columnTransferPrice = new global::System.Data.DataColumn("TransferPrice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferPrice);
                this.columnAfterAdjustQty = new global::System.Data.DataColumn("AfterAdjustQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAfterAdjustQty);
                this.columnTotalAmount = new global::System.Data.DataColumn("TotalAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmount);
                this.columnManufactureBatchNo = new global::System.Data.DataColumn("ManufactureBatchNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufactureBatchNo);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOScreenDetailDataTableRow NewTOScreenDetailDataTableRow() {
                return ((TOScreenDetailDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TOScreenDetailDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TOScreenDetailDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TOScreenDetailDataTableRowChanged != null)) {
                    this.TOScreenDetailDataTableRowChanged(this, new TOScreenDetailDataTableRowChangeEvent(((TOScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TOScreenDetailDataTableRowChanging != null)) {
                    this.TOScreenDetailDataTableRowChanging(this, new TOScreenDetailDataTableRowChangeEvent(((TOScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TOScreenDetailDataTableRowDeleted != null)) {
                    this.TOScreenDetailDataTableRowDeleted(this, new TOScreenDetailDataTableRowChangeEvent(((TOScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TOScreenDetailDataTableRowDeleting != null)) {
                    this.TOScreenDetailDataTableRowDeleting(this, new TOScreenDetailDataTableRowChangeEvent(((TOScreenDetailDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTOScreenDetailDataTableRow(TOScreenDetailDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TOScreen ds = new TOScreen();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TOScreenDetailDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TOScreenHeaderDataTableRow : global::System.Data.DataRow {
            
            private TOScreenHeaderDataTableDataTable tableTOScreenHeaderDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TOScreenHeaderDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTOScreenHeaderDataTable = ((TOScreenHeaderDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TONumber {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.TONumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TONumber\' in table \'TOScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.TONumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOINumber {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.TOINumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOINumber\' in table \'TOScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.TOINumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceLocation {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.SourceLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceLocation\' in table \'TOScreenHeaderDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.SourceLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationLocation {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.DestinationLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationLocation\' in table \'TOScreenHeaderDataTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.DestinationLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceAddress {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.SourceAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceAddress\' in table \'TOScreenHeaderDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.SourceAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationAddress {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.DestinationAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationAddress\' in table \'TOScreenHeaderDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.DestinationAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceTINNo {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.SourceTINNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceTINNo\' in table \'TOScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.SourceTINNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceCSTNo {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.SourceCSTNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceCSTNo\' in table \'TOScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.SourceCSTNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceVATNo {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.SourceVATNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceVATNo\' in table \'TOScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.SourceVATNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationTINNo {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.DestinationTINNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationTINNo\' in table \'TOScreenHeaderDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.DestinationTINNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationCSTNo {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.DestinationCSTNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationCSTNo\' in table \'TOScreenHeaderDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.DestinationCSTNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationVATNo {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.DestinationVATNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationVATNo\' in table \'TOScreenHeaderDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.DestinationVATNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExpectedDeliveryDate {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.ExpectedDeliveryDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpectedDeliveryDate\' in table \'TOScreenHeaderDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.ExpectedDeliveryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReferenceNo {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.ReferenceNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReferenceNo\' in table \'TOScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.ReferenceNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShippingDetails {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.ShippingDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShippingDetails\' in table \'TOScreenHeaderDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.ShippingDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShippingWayBillNo {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.ShippingWayBillNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShippingWayBillNo\' in table \'TOScreenHeaderDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.ShippingWayBillNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedByName {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.ModifiedByNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedByName\' in table \'TOScreenHeaderDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.ModifiedByNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedDate {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.ModifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedDate\' in table \'TOScreenHeaderDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.ModifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceEmail {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.SourceEmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceEmail\' in table \'TOScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.SourceEmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourcePhone {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.SourcePhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourcePhone\' in table \'TOScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.SourcePhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceCity {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.SourceCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceCity\' in table \'TOScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.SourceCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationCity {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.DestinationCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationCity\' in table \'TOScreenHeaderDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.DestinationCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsExported {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.IsExportedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExported\' in table \'TOScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.IsExportedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IECCode {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenHeaderDataTable.IECCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IECCode\' in table \'TOScreenHeaderDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenHeaderDataTable.IECCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTONumberNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.TONumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTONumberNull() {
                this[this.tableTOScreenHeaderDataTable.TONumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOINumberNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.TOINumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOINumberNull() {
                this[this.tableTOScreenHeaderDataTable.TOINumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceLocationNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.SourceLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceLocationNull() {
                this[this.tableTOScreenHeaderDataTable.SourceLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationLocationNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.DestinationLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationLocationNull() {
                this[this.tableTOScreenHeaderDataTable.DestinationLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceAddressNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.SourceAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceAddressNull() {
                this[this.tableTOScreenHeaderDataTable.SourceAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationAddressNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.DestinationAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationAddressNull() {
                this[this.tableTOScreenHeaderDataTable.DestinationAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceTINNoNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.SourceTINNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceTINNoNull() {
                this[this.tableTOScreenHeaderDataTable.SourceTINNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceCSTNoNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.SourceCSTNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceCSTNoNull() {
                this[this.tableTOScreenHeaderDataTable.SourceCSTNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceVATNoNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.SourceVATNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceVATNoNull() {
                this[this.tableTOScreenHeaderDataTable.SourceVATNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationTINNoNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.DestinationTINNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationTINNoNull() {
                this[this.tableTOScreenHeaderDataTable.DestinationTINNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationCSTNoNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.DestinationCSTNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationCSTNoNull() {
                this[this.tableTOScreenHeaderDataTable.DestinationCSTNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationVATNoNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.DestinationVATNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationVATNoNull() {
                this[this.tableTOScreenHeaderDataTable.DestinationVATNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpectedDeliveryDateNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.ExpectedDeliveryDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpectedDeliveryDateNull() {
                this[this.tableTOScreenHeaderDataTable.ExpectedDeliveryDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReferenceNoNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.ReferenceNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReferenceNoNull() {
                this[this.tableTOScreenHeaderDataTable.ReferenceNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShippingDetailsNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.ShippingDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShippingDetailsNull() {
                this[this.tableTOScreenHeaderDataTable.ShippingDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShippingWayBillNoNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.ShippingWayBillNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShippingWayBillNoNull() {
                this[this.tableTOScreenHeaderDataTable.ShippingWayBillNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedByNameNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.ModifiedByNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedByNameNull() {
                this[this.tableTOScreenHeaderDataTable.ModifiedByNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedDateNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.ModifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedDateNull() {
                this[this.tableTOScreenHeaderDataTable.ModifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceEmailNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.SourceEmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceEmailNull() {
                this[this.tableTOScreenHeaderDataTable.SourceEmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourcePhoneNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.SourcePhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourcePhoneNull() {
                this[this.tableTOScreenHeaderDataTable.SourcePhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceCityNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.SourceCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceCityNull() {
                this[this.tableTOScreenHeaderDataTable.SourceCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationCityNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.DestinationCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationCityNull() {
                this[this.tableTOScreenHeaderDataTable.DestinationCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExportedNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.IsExportedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExportedNull() {
                this[this.tableTOScreenHeaderDataTable.IsExportedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIECCodeNull() {
                return this.IsNull(this.tableTOScreenHeaderDataTable.IECCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIECCodeNull() {
                this[this.tableTOScreenHeaderDataTable.IECCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TOScreenDetailDataTableRow : global::System.Data.DataRow {
            
            private TOScreenDetailDataTableDataTable tableTOScreenDetailDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TOScreenDetailDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTOScreenDetailDataTable = ((TOScreenDetailDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemCode {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenDetailDataTable.ItemCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemCode\' in table \'TOScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenDetailDataTable.ItemCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemDescription {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenDetailDataTable.ItemDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemDescription\' in table \'TOScreenDetailDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableTOScreenDetailDataTable.ItemDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransferPrice {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenDetailDataTable.TransferPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransferPrice\' in table \'TOScreenDetailDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTOScreenDetailDataTable.TransferPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AfterAdjustQty {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenDetailDataTable.AfterAdjustQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AfterAdjustQty\' in table \'TOScreenDetailDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTOScreenDetailDataTable.AfterAdjustQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalAmount {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenDetailDataTable.TotalAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmount\' in table \'TOScreenDetailDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenDetailDataTable.TotalAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufactureBatchNo {
                get {
                    try {
                        return ((string)(this[this.tableTOScreenDetailDataTable.ManufactureBatchNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManufactureBatchNo\' in table \'TOScreenDetailDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableTOScreenDetailDataTable.ManufactureBatchNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemCodeNull() {
                return this.IsNull(this.tableTOScreenDetailDataTable.ItemCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemCodeNull() {
                this[this.tableTOScreenDetailDataTable.ItemCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemDescriptionNull() {
                return this.IsNull(this.tableTOScreenDetailDataTable.ItemDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemDescriptionNull() {
                this[this.tableTOScreenDetailDataTable.ItemDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransferPriceNull() {
                return this.IsNull(this.tableTOScreenDetailDataTable.TransferPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransferPriceNull() {
                this[this.tableTOScreenDetailDataTable.TransferPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAfterAdjustQtyNull() {
                return this.IsNull(this.tableTOScreenDetailDataTable.AfterAdjustQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAfterAdjustQtyNull() {
                this[this.tableTOScreenDetailDataTable.AfterAdjustQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountNull() {
                return this.IsNull(this.tableTOScreenDetailDataTable.TotalAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountNull() {
                this[this.tableTOScreenDetailDataTable.TotalAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufactureBatchNoNull() {
                return this.IsNull(this.tableTOScreenDetailDataTable.ManufactureBatchNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufactureBatchNoNull() {
                this[this.tableTOScreenDetailDataTable.ManufactureBatchNoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TOScreenHeaderDataTableRowChangeEvent : global::System.EventArgs {
            
            private TOScreenHeaderDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOScreenHeaderDataTableRowChangeEvent(TOScreenHeaderDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOScreenHeaderDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TOScreenDetailDataTableRowChangeEvent : global::System.EventArgs {
            
            private TOScreenDetailDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOScreenDetailDataTableRowChangeEvent(TOScreenDetailDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TOScreenDetailDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591