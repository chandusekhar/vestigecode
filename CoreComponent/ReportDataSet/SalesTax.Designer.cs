//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CoreComponent.ReportDataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SalesTax")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SalesTax : global::System.Data.DataSet {
        
        private SalesTaxDataTableDataTable tableSalesTaxDataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SalesTax() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SalesTax(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SalesTaxDataTable"] != null)) {
                    base.Tables.Add(new SalesTaxDataTableDataTable(ds.Tables["SalesTaxDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SalesTaxDataTableDataTable SalesTaxDataTable {
            get {
                return this.tableSalesTaxDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SalesTax cln = ((SalesTax)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SalesTaxDataTable"] != null)) {
                    base.Tables.Add(new SalesTaxDataTableDataTable(ds.Tables["SalesTaxDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSalesTaxDataTable = ((SalesTaxDataTableDataTable)(base.Tables["SalesTaxDataTable"]));
            if ((initTable == true)) {
                if ((this.tableSalesTaxDataTable != null)) {
                    this.tableSalesTaxDataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SalesTax";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SalesTax.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSalesTaxDataTable = new SalesTaxDataTableDataTable();
            base.Tables.Add(this.tableSalesTaxDataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSalesTaxDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SalesTax ds = new SalesTax();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SalesTaxDataTableRowChangeEventHandler(object sender, SalesTaxDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SalesTaxDataTableDataTable : global::System.Data.TypedTableBase<SalesTaxDataTableRow> {
            
            private global::System.Data.DataColumn columnItemCode;
            
            private global::System.Data.DataColumn columnItemName;
            
            private global::System.Data.DataColumn columnDistributorPrice;
            
            private global::System.Data.DataColumn columnTaxCode;
            
            private global::System.Data.DataColumn columnTaxPercent;
            
            private global::System.Data.DataColumn columnUnitTax;
            
            private global::System.Data.DataColumn columnQty;
            
            private global::System.Data.DataColumn columnTillMonthQty;
            
            private global::System.Data.DataColumn columnThisMonthQty;
            
            private global::System.Data.DataColumn columnTillMonthFreeQty;
            
            private global::System.Data.DataColumn columnThisMonthFreeQty;
            
            private global::System.Data.DataColumn columnItemId;
            
            private global::System.Data.DataColumn columnTaxGroupCode;
            
            private global::System.Data.DataColumn columnGroupOrder;
            
            private global::System.Data.DataColumn columnFromDateText;
            
            private global::System.Data.DataColumn columnToDateText;
            
            private global::System.Data.DataColumn columnHeaderAddress;
            
            private global::System.Data.DataColumn columnAddressText;
            
            private global::System.Data.DataColumn columnMonthName;
            
            private global::System.Data.DataColumn columnYearName;
            
            private global::System.Data.DataColumn columnPrimaryCost;
            
            private global::System.Data.DataColumn columnUnitPrice;
            
            private global::System.Data.DataColumn columnFromLocation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesTaxDataTableDataTable() {
                this.TableName = "SalesTaxDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SalesTaxDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SalesTaxDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemCodeColumn {
                get {
                    return this.columnItemCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemNameColumn {
                get {
                    return this.columnItemName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributorPriceColumn {
                get {
                    return this.columnDistributorPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxCodeColumn {
                get {
                    return this.columnTaxCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxPercentColumn {
                get {
                    return this.columnTaxPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitTaxColumn {
                get {
                    return this.columnUnitTax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QtyColumn {
                get {
                    return this.columnQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TillMonthQtyColumn {
                get {
                    return this.columnTillMonthQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThisMonthQtyColumn {
                get {
                    return this.columnThisMonthQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TillMonthFreeQtyColumn {
                get {
                    return this.columnTillMonthFreeQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThisMonthFreeQtyColumn {
                get {
                    return this.columnThisMonthFreeQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemIdColumn {
                get {
                    return this.columnItemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxGroupCodeColumn {
                get {
                    return this.columnTaxGroupCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupOrderColumn {
                get {
                    return this.columnGroupOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateTextColumn {
                get {
                    return this.columnFromDateText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDateTextColumn {
                get {
                    return this.columnToDateText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeaderAddressColumn {
                get {
                    return this.columnHeaderAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressTextColumn {
                get {
                    return this.columnAddressText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthNameColumn {
                get {
                    return this.columnMonthName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearNameColumn {
                get {
                    return this.columnYearName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimaryCostColumn {
                get {
                    return this.columnPrimaryCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitPriceColumn {
                get {
                    return this.columnUnitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromLocationColumn {
                get {
                    return this.columnFromLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesTaxDataTableRow this[int index] {
                get {
                    return ((SalesTaxDataTableRow)(this.Rows[index]));
                }
            }
            
            public event SalesTaxDataTableRowChangeEventHandler SalesTaxDataTableRowChanging;
            
            public event SalesTaxDataTableRowChangeEventHandler SalesTaxDataTableRowChanged;
            
            public event SalesTaxDataTableRowChangeEventHandler SalesTaxDataTableRowDeleting;
            
            public event SalesTaxDataTableRowChangeEventHandler SalesTaxDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSalesTaxDataTableRow(SalesTaxDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesTaxDataTableRow AddSalesTaxDataTableRow(
                        string ItemCode, 
                        string ItemName, 
                        string DistributorPrice, 
                        string TaxCode, 
                        string TaxPercent, 
                        string UnitTax, 
                        string Qty, 
                        string TillMonthQty, 
                        string ThisMonthQty, 
                        string TillMonthFreeQty, 
                        string ThisMonthFreeQty, 
                        string ItemId, 
                        string TaxGroupCode, 
                        string GroupOrder, 
                        string FromDateText, 
                        string ToDateText, 
                        string HeaderAddress, 
                        string AddressText, 
                        string MonthName, 
                        string YearName, 
                        string PrimaryCost, 
                        string UnitPrice, 
                        string FromLocation) {
                SalesTaxDataTableRow rowSalesTaxDataTableRow = ((SalesTaxDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ItemCode,
                        ItemName,
                        DistributorPrice,
                        TaxCode,
                        TaxPercent,
                        UnitTax,
                        Qty,
                        TillMonthQty,
                        ThisMonthQty,
                        TillMonthFreeQty,
                        ThisMonthFreeQty,
                        ItemId,
                        TaxGroupCode,
                        GroupOrder,
                        FromDateText,
                        ToDateText,
                        HeaderAddress,
                        AddressText,
                        MonthName,
                        YearName,
                        PrimaryCost,
                        UnitPrice,
                        FromLocation};
                rowSalesTaxDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSalesTaxDataTableRow);
                return rowSalesTaxDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SalesTaxDataTableDataTable cln = ((SalesTaxDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SalesTaxDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItemCode = base.Columns["ItemCode"];
                this.columnItemName = base.Columns["ItemName"];
                this.columnDistributorPrice = base.Columns["DistributorPrice"];
                this.columnTaxCode = base.Columns["TaxCode"];
                this.columnTaxPercent = base.Columns["TaxPercent"];
                this.columnUnitTax = base.Columns["UnitTax"];
                this.columnQty = base.Columns["Qty"];
                this.columnTillMonthQty = base.Columns["TillMonthQty"];
                this.columnThisMonthQty = base.Columns["ThisMonthQty"];
                this.columnTillMonthFreeQty = base.Columns["TillMonthFreeQty"];
                this.columnThisMonthFreeQty = base.Columns["ThisMonthFreeQty"];
                this.columnItemId = base.Columns["ItemId"];
                this.columnTaxGroupCode = base.Columns["TaxGroupCode"];
                this.columnGroupOrder = base.Columns["GroupOrder"];
                this.columnFromDateText = base.Columns["FromDateText"];
                this.columnToDateText = base.Columns["ToDateText"];
                this.columnHeaderAddress = base.Columns["HeaderAddress"];
                this.columnAddressText = base.Columns["AddressText"];
                this.columnMonthName = base.Columns["MonthName"];
                this.columnYearName = base.Columns["YearName"];
                this.columnPrimaryCost = base.Columns["PrimaryCost"];
                this.columnUnitPrice = base.Columns["UnitPrice"];
                this.columnFromLocation = base.Columns["FromLocation"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItemCode = new global::System.Data.DataColumn("ItemCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemCode);
                this.columnItemName = new global::System.Data.DataColumn("ItemName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemName);
                this.columnDistributorPrice = new global::System.Data.DataColumn("DistributorPrice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributorPrice);
                this.columnTaxCode = new global::System.Data.DataColumn("TaxCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxCode);
                this.columnTaxPercent = new global::System.Data.DataColumn("TaxPercent", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxPercent);
                this.columnUnitTax = new global::System.Data.DataColumn("UnitTax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitTax);
                this.columnQty = new global::System.Data.DataColumn("Qty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQty);
                this.columnTillMonthQty = new global::System.Data.DataColumn("TillMonthQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTillMonthQty);
                this.columnThisMonthQty = new global::System.Data.DataColumn("ThisMonthQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThisMonthQty);
                this.columnTillMonthFreeQty = new global::System.Data.DataColumn("TillMonthFreeQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTillMonthFreeQty);
                this.columnThisMonthFreeQty = new global::System.Data.DataColumn("ThisMonthFreeQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThisMonthFreeQty);
                this.columnItemId = new global::System.Data.DataColumn("ItemId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemId);
                this.columnTaxGroupCode = new global::System.Data.DataColumn("TaxGroupCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxGroupCode);
                this.columnGroupOrder = new global::System.Data.DataColumn("GroupOrder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupOrder);
                this.columnFromDateText = new global::System.Data.DataColumn("FromDateText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDateText);
                this.columnToDateText = new global::System.Data.DataColumn("ToDateText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDateText);
                this.columnHeaderAddress = new global::System.Data.DataColumn("HeaderAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeaderAddress);
                this.columnAddressText = new global::System.Data.DataColumn("AddressText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddressText);
                this.columnMonthName = new global::System.Data.DataColumn("MonthName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonthName);
                this.columnYearName = new global::System.Data.DataColumn("YearName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYearName);
                this.columnPrimaryCost = new global::System.Data.DataColumn("PrimaryCost", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryCost);
                this.columnUnitPrice = new global::System.Data.DataColumn("UnitPrice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitPrice);
                this.columnFromLocation = new global::System.Data.DataColumn("FromLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromLocation);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesTaxDataTableRow NewSalesTaxDataTableRow() {
                return ((SalesTaxDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SalesTaxDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SalesTaxDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SalesTaxDataTableRowChanged != null)) {
                    this.SalesTaxDataTableRowChanged(this, new SalesTaxDataTableRowChangeEvent(((SalesTaxDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SalesTaxDataTableRowChanging != null)) {
                    this.SalesTaxDataTableRowChanging(this, new SalesTaxDataTableRowChangeEvent(((SalesTaxDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SalesTaxDataTableRowDeleted != null)) {
                    this.SalesTaxDataTableRowDeleted(this, new SalesTaxDataTableRowChangeEvent(((SalesTaxDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SalesTaxDataTableRowDeleting != null)) {
                    this.SalesTaxDataTableRowDeleting(this, new SalesTaxDataTableRowChangeEvent(((SalesTaxDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSalesTaxDataTableRow(SalesTaxDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SalesTax ds = new SalesTax();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SalesTaxDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SalesTaxDataTableRow : global::System.Data.DataRow {
            
            private SalesTaxDataTableDataTable tableSalesTaxDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SalesTaxDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSalesTaxDataTable = ((SalesTaxDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemCode {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.ItemCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemCode\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.ItemCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemName {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.ItemNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemName\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.ItemNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributorPrice {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.DistributorPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributorPrice\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.DistributorPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxCode {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.TaxCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxCode\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.TaxCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxPercent {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.TaxPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxPercent\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.TaxPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitTax {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.UnitTaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitTax\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.UnitTaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Qty {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.QtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Qty\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.QtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TillMonthQty {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.TillMonthQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TillMonthQty\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.TillMonthQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ThisMonthQty {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.ThisMonthQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ThisMonthQty\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.ThisMonthQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TillMonthFreeQty {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.TillMonthFreeQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TillMonthFreeQty\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.TillMonthFreeQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ThisMonthFreeQty {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.ThisMonthFreeQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ThisMonthFreeQty\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.ThisMonthFreeQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemId {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.ItemIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemId\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.ItemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxGroupCode {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.TaxGroupCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxGroupCode\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.TaxGroupCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GroupOrder {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.GroupOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroupOrder\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.GroupOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDateText {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.FromDateTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDateText\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.FromDateTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToDateText {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.ToDateTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToDateText\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.ToDateTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HeaderAddress {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.HeaderAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeaderAddress\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.HeaderAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddressText {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.AddressTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AddressText\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.AddressTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MonthName {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.MonthNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MonthName\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.MonthNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string YearName {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.YearNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YearName\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.YearNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrimaryCost {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.PrimaryCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrimaryCost\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.PrimaryCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitPrice {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.UnitPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitPrice\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.UnitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromLocation {
                get {
                    try {
                        return ((string)(this[this.tableSalesTaxDataTable.FromLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromLocation\' in table \'SalesTaxDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesTaxDataTable.FromLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemCodeNull() {
                return this.IsNull(this.tableSalesTaxDataTable.ItemCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemCodeNull() {
                this[this.tableSalesTaxDataTable.ItemCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNameNull() {
                return this.IsNull(this.tableSalesTaxDataTable.ItemNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNameNull() {
                this[this.tableSalesTaxDataTable.ItemNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributorPriceNull() {
                return this.IsNull(this.tableSalesTaxDataTable.DistributorPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributorPriceNull() {
                this[this.tableSalesTaxDataTable.DistributorPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxCodeNull() {
                return this.IsNull(this.tableSalesTaxDataTable.TaxCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxCodeNull() {
                this[this.tableSalesTaxDataTable.TaxCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxPercentNull() {
                return this.IsNull(this.tableSalesTaxDataTable.TaxPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxPercentNull() {
                this[this.tableSalesTaxDataTable.TaxPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitTaxNull() {
                return this.IsNull(this.tableSalesTaxDataTable.UnitTaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitTaxNull() {
                this[this.tableSalesTaxDataTable.UnitTaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQtyNull() {
                return this.IsNull(this.tableSalesTaxDataTable.QtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQtyNull() {
                this[this.tableSalesTaxDataTable.QtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTillMonthQtyNull() {
                return this.IsNull(this.tableSalesTaxDataTable.TillMonthQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTillMonthQtyNull() {
                this[this.tableSalesTaxDataTable.TillMonthQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThisMonthQtyNull() {
                return this.IsNull(this.tableSalesTaxDataTable.ThisMonthQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThisMonthQtyNull() {
                this[this.tableSalesTaxDataTable.ThisMonthQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTillMonthFreeQtyNull() {
                return this.IsNull(this.tableSalesTaxDataTable.TillMonthFreeQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTillMonthFreeQtyNull() {
                this[this.tableSalesTaxDataTable.TillMonthFreeQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThisMonthFreeQtyNull() {
                return this.IsNull(this.tableSalesTaxDataTable.ThisMonthFreeQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThisMonthFreeQtyNull() {
                this[this.tableSalesTaxDataTable.ThisMonthFreeQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemIdNull() {
                return this.IsNull(this.tableSalesTaxDataTable.ItemIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemIdNull() {
                this[this.tableSalesTaxDataTable.ItemIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxGroupCodeNull() {
                return this.IsNull(this.tableSalesTaxDataTable.TaxGroupCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxGroupCodeNull() {
                this[this.tableSalesTaxDataTable.TaxGroupCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupOrderNull() {
                return this.IsNull(this.tableSalesTaxDataTable.GroupOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupOrderNull() {
                this[this.tableSalesTaxDataTable.GroupOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateTextNull() {
                return this.IsNull(this.tableSalesTaxDataTable.FromDateTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateTextNull() {
                this[this.tableSalesTaxDataTable.FromDateTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToDateTextNull() {
                return this.IsNull(this.tableSalesTaxDataTable.ToDateTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToDateTextNull() {
                this[this.tableSalesTaxDataTable.ToDateTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeaderAddressNull() {
                return this.IsNull(this.tableSalesTaxDataTable.HeaderAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeaderAddressNull() {
                this[this.tableSalesTaxDataTable.HeaderAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressTextNull() {
                return this.IsNull(this.tableSalesTaxDataTable.AddressTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressTextNull() {
                this[this.tableSalesTaxDataTable.AddressTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthNameNull() {
                return this.IsNull(this.tableSalesTaxDataTable.MonthNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthNameNull() {
                this[this.tableSalesTaxDataTable.MonthNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNameNull() {
                return this.IsNull(this.tableSalesTaxDataTable.YearNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNameNull() {
                this[this.tableSalesTaxDataTable.YearNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimaryCostNull() {
                return this.IsNull(this.tableSalesTaxDataTable.PrimaryCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimaryCostNull() {
                this[this.tableSalesTaxDataTable.PrimaryCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitPriceNull() {
                return this.IsNull(this.tableSalesTaxDataTable.UnitPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitPriceNull() {
                this[this.tableSalesTaxDataTable.UnitPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromLocationNull() {
                return this.IsNull(this.tableSalesTaxDataTable.FromLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromLocationNull() {
                this[this.tableSalesTaxDataTable.FromLocationColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SalesTaxDataTableRowChangeEvent : global::System.EventArgs {
            
            private SalesTaxDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesTaxDataTableRowChangeEvent(SalesTaxDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesTaxDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591