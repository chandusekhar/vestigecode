//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CoreComponent.ReportDataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RegionWiseSales")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RegionWiseSales : global::System.Data.DataSet {
        
        private NorthSalesDataTable tableNorthSales;
        
        private UPSalesDataTable tableUPSales;
        
        private SouthSalesDataTable tableSouthSales;
        
        private EastSalesDataTable tableEastSales;
        
        private CenteralSalesDataTable tableCenteralSales;
        
        private WestSalesDataTable tableWestSales;
        
        private NorthEastSalesDataTable tableNorthEastSales;
        
        private NepalSalesDataTable tableNepalSales;
        
        private L_NorthSalesDataTable tableL_NorthSales;
        
        private L_UPSalesDataTable tableL_UPSales;
        
        private L_SouthSalesDataTable tableL_SouthSales;
        
        private L_EastSalesDataTable tableL_EastSales;
        
        private L_CenteralSalesDataTable tableL_CenteralSales;
        
        private L_WestSalesDataTable tableL_WestSales;
        
        private L_NorthEastSalesDataTable tableL_NorthEastSales;
        
        private L_NepalSalesDataTable tableL_NepalSales;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RegionWiseSales() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RegionWiseSales(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["NorthSales"] != null)) {
                    base.Tables.Add(new NorthSalesDataTable(ds.Tables["NorthSales"]));
                }
                if ((ds.Tables["UPSales"] != null)) {
                    base.Tables.Add(new UPSalesDataTable(ds.Tables["UPSales"]));
                }
                if ((ds.Tables["SouthSales"] != null)) {
                    base.Tables.Add(new SouthSalesDataTable(ds.Tables["SouthSales"]));
                }
                if ((ds.Tables["EastSales"] != null)) {
                    base.Tables.Add(new EastSalesDataTable(ds.Tables["EastSales"]));
                }
                if ((ds.Tables["CenteralSales"] != null)) {
                    base.Tables.Add(new CenteralSalesDataTable(ds.Tables["CenteralSales"]));
                }
                if ((ds.Tables["WestSales"] != null)) {
                    base.Tables.Add(new WestSalesDataTable(ds.Tables["WestSales"]));
                }
                if ((ds.Tables["NorthEastSales"] != null)) {
                    base.Tables.Add(new NorthEastSalesDataTable(ds.Tables["NorthEastSales"]));
                }
                if ((ds.Tables["NepalSales"] != null)) {
                    base.Tables.Add(new NepalSalesDataTable(ds.Tables["NepalSales"]));
                }
                if ((ds.Tables["L_NorthSales"] != null)) {
                    base.Tables.Add(new L_NorthSalesDataTable(ds.Tables["L_NorthSales"]));
                }
                if ((ds.Tables["L_UPSales"] != null)) {
                    base.Tables.Add(new L_UPSalesDataTable(ds.Tables["L_UPSales"]));
                }
                if ((ds.Tables["L_SouthSales"] != null)) {
                    base.Tables.Add(new L_SouthSalesDataTable(ds.Tables["L_SouthSales"]));
                }
                if ((ds.Tables["L_EastSales"] != null)) {
                    base.Tables.Add(new L_EastSalesDataTable(ds.Tables["L_EastSales"]));
                }
                if ((ds.Tables["L_CenteralSales"] != null)) {
                    base.Tables.Add(new L_CenteralSalesDataTable(ds.Tables["L_CenteralSales"]));
                }
                if ((ds.Tables["L_WestSales"] != null)) {
                    base.Tables.Add(new L_WestSalesDataTable(ds.Tables["L_WestSales"]));
                }
                if ((ds.Tables["L_NorthEastSales"] != null)) {
                    base.Tables.Add(new L_NorthEastSalesDataTable(ds.Tables["L_NorthEastSales"]));
                }
                if ((ds.Tables["L_NepalSales"] != null)) {
                    base.Tables.Add(new L_NepalSalesDataTable(ds.Tables["L_NepalSales"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NorthSalesDataTable NorthSales {
            get {
                return this.tableNorthSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UPSalesDataTable UPSales {
            get {
                return this.tableUPSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SouthSalesDataTable SouthSales {
            get {
                return this.tableSouthSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EastSalesDataTable EastSales {
            get {
                return this.tableEastSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CenteralSalesDataTable CenteralSales {
            get {
                return this.tableCenteralSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WestSalesDataTable WestSales {
            get {
                return this.tableWestSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NorthEastSalesDataTable NorthEastSales {
            get {
                return this.tableNorthEastSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NepalSalesDataTable NepalSales {
            get {
                return this.tableNepalSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public L_NorthSalesDataTable L_NorthSales {
            get {
                return this.tableL_NorthSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public L_UPSalesDataTable L_UPSales {
            get {
                return this.tableL_UPSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public L_SouthSalesDataTable L_SouthSales {
            get {
                return this.tableL_SouthSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public L_EastSalesDataTable L_EastSales {
            get {
                return this.tableL_EastSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public L_CenteralSalesDataTable L_CenteralSales {
            get {
                return this.tableL_CenteralSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public L_WestSalesDataTable L_WestSales {
            get {
                return this.tableL_WestSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public L_NorthEastSalesDataTable L_NorthEastSales {
            get {
                return this.tableL_NorthEastSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public L_NepalSalesDataTable L_NepalSales {
            get {
                return this.tableL_NepalSales;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RegionWiseSales cln = ((RegionWiseSales)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["NorthSales"] != null)) {
                    base.Tables.Add(new NorthSalesDataTable(ds.Tables["NorthSales"]));
                }
                if ((ds.Tables["UPSales"] != null)) {
                    base.Tables.Add(new UPSalesDataTable(ds.Tables["UPSales"]));
                }
                if ((ds.Tables["SouthSales"] != null)) {
                    base.Tables.Add(new SouthSalesDataTable(ds.Tables["SouthSales"]));
                }
                if ((ds.Tables["EastSales"] != null)) {
                    base.Tables.Add(new EastSalesDataTable(ds.Tables["EastSales"]));
                }
                if ((ds.Tables["CenteralSales"] != null)) {
                    base.Tables.Add(new CenteralSalesDataTable(ds.Tables["CenteralSales"]));
                }
                if ((ds.Tables["WestSales"] != null)) {
                    base.Tables.Add(new WestSalesDataTable(ds.Tables["WestSales"]));
                }
                if ((ds.Tables["NorthEastSales"] != null)) {
                    base.Tables.Add(new NorthEastSalesDataTable(ds.Tables["NorthEastSales"]));
                }
                if ((ds.Tables["NepalSales"] != null)) {
                    base.Tables.Add(new NepalSalesDataTable(ds.Tables["NepalSales"]));
                }
                if ((ds.Tables["L_NorthSales"] != null)) {
                    base.Tables.Add(new L_NorthSalesDataTable(ds.Tables["L_NorthSales"]));
                }
                if ((ds.Tables["L_UPSales"] != null)) {
                    base.Tables.Add(new L_UPSalesDataTable(ds.Tables["L_UPSales"]));
                }
                if ((ds.Tables["L_SouthSales"] != null)) {
                    base.Tables.Add(new L_SouthSalesDataTable(ds.Tables["L_SouthSales"]));
                }
                if ((ds.Tables["L_EastSales"] != null)) {
                    base.Tables.Add(new L_EastSalesDataTable(ds.Tables["L_EastSales"]));
                }
                if ((ds.Tables["L_CenteralSales"] != null)) {
                    base.Tables.Add(new L_CenteralSalesDataTable(ds.Tables["L_CenteralSales"]));
                }
                if ((ds.Tables["L_WestSales"] != null)) {
                    base.Tables.Add(new L_WestSalesDataTable(ds.Tables["L_WestSales"]));
                }
                if ((ds.Tables["L_NorthEastSales"] != null)) {
                    base.Tables.Add(new L_NorthEastSalesDataTable(ds.Tables["L_NorthEastSales"]));
                }
                if ((ds.Tables["L_NepalSales"] != null)) {
                    base.Tables.Add(new L_NepalSalesDataTable(ds.Tables["L_NepalSales"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableNorthSales = ((NorthSalesDataTable)(base.Tables["NorthSales"]));
            if ((initTable == true)) {
                if ((this.tableNorthSales != null)) {
                    this.tableNorthSales.InitVars();
                }
            }
            this.tableUPSales = ((UPSalesDataTable)(base.Tables["UPSales"]));
            if ((initTable == true)) {
                if ((this.tableUPSales != null)) {
                    this.tableUPSales.InitVars();
                }
            }
            this.tableSouthSales = ((SouthSalesDataTable)(base.Tables["SouthSales"]));
            if ((initTable == true)) {
                if ((this.tableSouthSales != null)) {
                    this.tableSouthSales.InitVars();
                }
            }
            this.tableEastSales = ((EastSalesDataTable)(base.Tables["EastSales"]));
            if ((initTable == true)) {
                if ((this.tableEastSales != null)) {
                    this.tableEastSales.InitVars();
                }
            }
            this.tableCenteralSales = ((CenteralSalesDataTable)(base.Tables["CenteralSales"]));
            if ((initTable == true)) {
                if ((this.tableCenteralSales != null)) {
                    this.tableCenteralSales.InitVars();
                }
            }
            this.tableWestSales = ((WestSalesDataTable)(base.Tables["WestSales"]));
            if ((initTable == true)) {
                if ((this.tableWestSales != null)) {
                    this.tableWestSales.InitVars();
                }
            }
            this.tableNorthEastSales = ((NorthEastSalesDataTable)(base.Tables["NorthEastSales"]));
            if ((initTable == true)) {
                if ((this.tableNorthEastSales != null)) {
                    this.tableNorthEastSales.InitVars();
                }
            }
            this.tableNepalSales = ((NepalSalesDataTable)(base.Tables["NepalSales"]));
            if ((initTable == true)) {
                if ((this.tableNepalSales != null)) {
                    this.tableNepalSales.InitVars();
                }
            }
            this.tableL_NorthSales = ((L_NorthSalesDataTable)(base.Tables["L_NorthSales"]));
            if ((initTable == true)) {
                if ((this.tableL_NorthSales != null)) {
                    this.tableL_NorthSales.InitVars();
                }
            }
            this.tableL_UPSales = ((L_UPSalesDataTable)(base.Tables["L_UPSales"]));
            if ((initTable == true)) {
                if ((this.tableL_UPSales != null)) {
                    this.tableL_UPSales.InitVars();
                }
            }
            this.tableL_SouthSales = ((L_SouthSalesDataTable)(base.Tables["L_SouthSales"]));
            if ((initTable == true)) {
                if ((this.tableL_SouthSales != null)) {
                    this.tableL_SouthSales.InitVars();
                }
            }
            this.tableL_EastSales = ((L_EastSalesDataTable)(base.Tables["L_EastSales"]));
            if ((initTable == true)) {
                if ((this.tableL_EastSales != null)) {
                    this.tableL_EastSales.InitVars();
                }
            }
            this.tableL_CenteralSales = ((L_CenteralSalesDataTable)(base.Tables["L_CenteralSales"]));
            if ((initTable == true)) {
                if ((this.tableL_CenteralSales != null)) {
                    this.tableL_CenteralSales.InitVars();
                }
            }
            this.tableL_WestSales = ((L_WestSalesDataTable)(base.Tables["L_WestSales"]));
            if ((initTable == true)) {
                if ((this.tableL_WestSales != null)) {
                    this.tableL_WestSales.InitVars();
                }
            }
            this.tableL_NorthEastSales = ((L_NorthEastSalesDataTable)(base.Tables["L_NorthEastSales"]));
            if ((initTable == true)) {
                if ((this.tableL_NorthEastSales != null)) {
                    this.tableL_NorthEastSales.InitVars();
                }
            }
            this.tableL_NepalSales = ((L_NepalSalesDataTable)(base.Tables["L_NepalSales"]));
            if ((initTable == true)) {
                if ((this.tableL_NepalSales != null)) {
                    this.tableL_NepalSales.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RegionWiseSales";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RegionWiseSales.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableNorthSales = new NorthSalesDataTable();
            base.Tables.Add(this.tableNorthSales);
            this.tableUPSales = new UPSalesDataTable();
            base.Tables.Add(this.tableUPSales);
            this.tableSouthSales = new SouthSalesDataTable();
            base.Tables.Add(this.tableSouthSales);
            this.tableEastSales = new EastSalesDataTable();
            base.Tables.Add(this.tableEastSales);
            this.tableCenteralSales = new CenteralSalesDataTable();
            base.Tables.Add(this.tableCenteralSales);
            this.tableWestSales = new WestSalesDataTable();
            base.Tables.Add(this.tableWestSales);
            this.tableNorthEastSales = new NorthEastSalesDataTable();
            base.Tables.Add(this.tableNorthEastSales);
            this.tableNepalSales = new NepalSalesDataTable();
            base.Tables.Add(this.tableNepalSales);
            this.tableL_NorthSales = new L_NorthSalesDataTable();
            base.Tables.Add(this.tableL_NorthSales);
            this.tableL_UPSales = new L_UPSalesDataTable();
            base.Tables.Add(this.tableL_UPSales);
            this.tableL_SouthSales = new L_SouthSalesDataTable();
            base.Tables.Add(this.tableL_SouthSales);
            this.tableL_EastSales = new L_EastSalesDataTable();
            base.Tables.Add(this.tableL_EastSales);
            this.tableL_CenteralSales = new L_CenteralSalesDataTable();
            base.Tables.Add(this.tableL_CenteralSales);
            this.tableL_WestSales = new L_WestSalesDataTable();
            base.Tables.Add(this.tableL_WestSales);
            this.tableL_NorthEastSales = new L_NorthEastSalesDataTable();
            base.Tables.Add(this.tableL_NorthEastSales);
            this.tableL_NepalSales = new L_NepalSalesDataTable();
            base.Tables.Add(this.tableL_NepalSales);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNorthSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUPSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSouthSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEastSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCenteralSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWestSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNorthEastSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNepalSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeL_NorthSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeL_UPSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeL_SouthSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeL_EastSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeL_CenteralSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeL_WestSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeL_NorthEastSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeL_NepalSales() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RegionWiseSales ds = new RegionWiseSales();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void NorthSalesRowChangeEventHandler(object sender, NorthSalesRowChangeEvent e);
        
        public delegate void UPSalesRowChangeEventHandler(object sender, UPSalesRowChangeEvent e);
        
        public delegate void SouthSalesRowChangeEventHandler(object sender, SouthSalesRowChangeEvent e);
        
        public delegate void EastSalesRowChangeEventHandler(object sender, EastSalesRowChangeEvent e);
        
        public delegate void CenteralSalesRowChangeEventHandler(object sender, CenteralSalesRowChangeEvent e);
        
        public delegate void WestSalesRowChangeEventHandler(object sender, WestSalesRowChangeEvent e);
        
        public delegate void NorthEastSalesRowChangeEventHandler(object sender, NorthEastSalesRowChangeEvent e);
        
        public delegate void NepalSalesRowChangeEventHandler(object sender, NepalSalesRowChangeEvent e);
        
        public delegate void L_NorthSalesRowChangeEventHandler(object sender, L_NorthSalesRowChangeEvent e);
        
        public delegate void L_UPSalesRowChangeEventHandler(object sender, L_UPSalesRowChangeEvent e);
        
        public delegate void L_SouthSalesRowChangeEventHandler(object sender, L_SouthSalesRowChangeEvent e);
        
        public delegate void L_EastSalesRowChangeEventHandler(object sender, L_EastSalesRowChangeEvent e);
        
        public delegate void L_CenteralSalesRowChangeEventHandler(object sender, L_CenteralSalesRowChangeEvent e);
        
        public delegate void L_WestSalesRowChangeEventHandler(object sender, L_WestSalesRowChangeEvent e);
        
        public delegate void L_NorthEastSalesRowChangeEventHandler(object sender, L_NorthEastSalesRowChangeEvent e);
        
        public delegate void L_NepalSalesRowChangeEventHandler(object sender, L_NepalSalesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NorthSalesDataTable : global::System.Data.TypedTableBase<NorthSalesRow> {
            
            private global::System.Data.DataColumn columnBoid;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnSales;
            
            private global::System.Data.DataColumn columnToDate;
            
            private global::System.Data.DataColumn columnFromDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NorthSalesDataTable() {
                this.TableName = "NorthSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NorthSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NorthSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoidColumn {
                get {
                    return this.columnBoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesColumn {
                get {
                    return this.columnSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDateColumn {
                get {
                    return this.columnToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NorthSalesRow this[int index] {
                get {
                    return ((NorthSalesRow)(this.Rows[index]));
                }
            }
            
            public event NorthSalesRowChangeEventHandler NorthSalesRowChanging;
            
            public event NorthSalesRowChangeEventHandler NorthSalesRowChanged;
            
            public event NorthSalesRowChangeEventHandler NorthSalesRowDeleting;
            
            public event NorthSalesRowChangeEventHandler NorthSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNorthSalesRow(NorthSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NorthSalesRow AddNorthSalesRow(string Boid, string Name, string Region, string Sales, string ToDate, string FromDate) {
                NorthSalesRow rowNorthSalesRow = ((NorthSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Boid,
                        Name,
                        Region,
                        Sales,
                        ToDate,
                        FromDate};
                rowNorthSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNorthSalesRow);
                return rowNorthSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NorthSalesDataTable cln = ((NorthSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NorthSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBoid = base.Columns["Boid"];
                this.columnName = base.Columns["Name"];
                this.columnRegion = base.Columns["Region"];
                this.columnSales = base.Columns["Sales"];
                this.columnToDate = base.Columns["ToDate"];
                this.columnFromDate = base.Columns["FromDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBoid = new global::System.Data.DataColumn("Boid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnSales = new global::System.Data.DataColumn("Sales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSales);
                this.columnToDate = new global::System.Data.DataColumn("ToDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDate);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NorthSalesRow NewNorthSalesRow() {
                return ((NorthSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NorthSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NorthSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NorthSalesRowChanged != null)) {
                    this.NorthSalesRowChanged(this, new NorthSalesRowChangeEvent(((NorthSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NorthSalesRowChanging != null)) {
                    this.NorthSalesRowChanging(this, new NorthSalesRowChangeEvent(((NorthSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NorthSalesRowDeleted != null)) {
                    this.NorthSalesRowDeleted(this, new NorthSalesRowChangeEvent(((NorthSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NorthSalesRowDeleting != null)) {
                    this.NorthSalesRowDeleting(this, new NorthSalesRowChangeEvent(((NorthSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNorthSalesRow(NorthSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RegionWiseSales ds = new RegionWiseSales();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NorthSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UPSalesDataTable : global::System.Data.TypedTableBase<UPSalesRow> {
            
            private global::System.Data.DataColumn columnBoid;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnSales;
            
            private global::System.Data.DataColumn columnToDate;
            
            private global::System.Data.DataColumn columnFromDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UPSalesDataTable() {
                this.TableName = "UPSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UPSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UPSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoidColumn {
                get {
                    return this.columnBoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesColumn {
                get {
                    return this.columnSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDateColumn {
                get {
                    return this.columnToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UPSalesRow this[int index] {
                get {
                    return ((UPSalesRow)(this.Rows[index]));
                }
            }
            
            public event UPSalesRowChangeEventHandler UPSalesRowChanging;
            
            public event UPSalesRowChangeEventHandler UPSalesRowChanged;
            
            public event UPSalesRowChangeEventHandler UPSalesRowDeleting;
            
            public event UPSalesRowChangeEventHandler UPSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUPSalesRow(UPSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UPSalesRow AddUPSalesRow(string Boid, string Name, string Region, string Sales, string ToDate, string FromDate) {
                UPSalesRow rowUPSalesRow = ((UPSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Boid,
                        Name,
                        Region,
                        Sales,
                        ToDate,
                        FromDate};
                rowUPSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUPSalesRow);
                return rowUPSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UPSalesDataTable cln = ((UPSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UPSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBoid = base.Columns["Boid"];
                this.columnName = base.Columns["Name"];
                this.columnRegion = base.Columns["Region"];
                this.columnSales = base.Columns["Sales"];
                this.columnToDate = base.Columns["ToDate"];
                this.columnFromDate = base.Columns["FromDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBoid = new global::System.Data.DataColumn("Boid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnSales = new global::System.Data.DataColumn("Sales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSales);
                this.columnToDate = new global::System.Data.DataColumn("ToDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDate);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UPSalesRow NewUPSalesRow() {
                return ((UPSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UPSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UPSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UPSalesRowChanged != null)) {
                    this.UPSalesRowChanged(this, new UPSalesRowChangeEvent(((UPSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UPSalesRowChanging != null)) {
                    this.UPSalesRowChanging(this, new UPSalesRowChangeEvent(((UPSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UPSalesRowDeleted != null)) {
                    this.UPSalesRowDeleted(this, new UPSalesRowChangeEvent(((UPSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UPSalesRowDeleting != null)) {
                    this.UPSalesRowDeleting(this, new UPSalesRowChangeEvent(((UPSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUPSalesRow(UPSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RegionWiseSales ds = new RegionWiseSales();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UPSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SouthSalesDataTable : global::System.Data.TypedTableBase<SouthSalesRow> {
            
            private global::System.Data.DataColumn columnBoid;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnSales;
            
            private global::System.Data.DataColumn columnToDate;
            
            private global::System.Data.DataColumn columnFromDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SouthSalesDataTable() {
                this.TableName = "SouthSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SouthSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SouthSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoidColumn {
                get {
                    return this.columnBoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesColumn {
                get {
                    return this.columnSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDateColumn {
                get {
                    return this.columnToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SouthSalesRow this[int index] {
                get {
                    return ((SouthSalesRow)(this.Rows[index]));
                }
            }
            
            public event SouthSalesRowChangeEventHandler SouthSalesRowChanging;
            
            public event SouthSalesRowChangeEventHandler SouthSalesRowChanged;
            
            public event SouthSalesRowChangeEventHandler SouthSalesRowDeleting;
            
            public event SouthSalesRowChangeEventHandler SouthSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSouthSalesRow(SouthSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SouthSalesRow AddSouthSalesRow(string Boid, string Name, string Region, string Sales, string ToDate, string FromDate) {
                SouthSalesRow rowSouthSalesRow = ((SouthSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Boid,
                        Name,
                        Region,
                        Sales,
                        ToDate,
                        FromDate};
                rowSouthSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSouthSalesRow);
                return rowSouthSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SouthSalesDataTable cln = ((SouthSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SouthSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBoid = base.Columns["Boid"];
                this.columnName = base.Columns["Name"];
                this.columnRegion = base.Columns["Region"];
                this.columnSales = base.Columns["Sales"];
                this.columnToDate = base.Columns["ToDate"];
                this.columnFromDate = base.Columns["FromDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBoid = new global::System.Data.DataColumn("Boid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnSales = new global::System.Data.DataColumn("Sales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSales);
                this.columnToDate = new global::System.Data.DataColumn("ToDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDate);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SouthSalesRow NewSouthSalesRow() {
                return ((SouthSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SouthSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SouthSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SouthSalesRowChanged != null)) {
                    this.SouthSalesRowChanged(this, new SouthSalesRowChangeEvent(((SouthSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SouthSalesRowChanging != null)) {
                    this.SouthSalesRowChanging(this, new SouthSalesRowChangeEvent(((SouthSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SouthSalesRowDeleted != null)) {
                    this.SouthSalesRowDeleted(this, new SouthSalesRowChangeEvent(((SouthSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SouthSalesRowDeleting != null)) {
                    this.SouthSalesRowDeleting(this, new SouthSalesRowChangeEvent(((SouthSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSouthSalesRow(SouthSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RegionWiseSales ds = new RegionWiseSales();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SouthSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EastSalesDataTable : global::System.Data.TypedTableBase<EastSalesRow> {
            
            private global::System.Data.DataColumn columnBoid;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnSales;
            
            private global::System.Data.DataColumn columnToDate;
            
            private global::System.Data.DataColumn columnFromDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EastSalesDataTable() {
                this.TableName = "EastSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EastSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EastSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoidColumn {
                get {
                    return this.columnBoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesColumn {
                get {
                    return this.columnSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDateColumn {
                get {
                    return this.columnToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EastSalesRow this[int index] {
                get {
                    return ((EastSalesRow)(this.Rows[index]));
                }
            }
            
            public event EastSalesRowChangeEventHandler EastSalesRowChanging;
            
            public event EastSalesRowChangeEventHandler EastSalesRowChanged;
            
            public event EastSalesRowChangeEventHandler EastSalesRowDeleting;
            
            public event EastSalesRowChangeEventHandler EastSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEastSalesRow(EastSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EastSalesRow AddEastSalesRow(string Boid, string Name, string Region, string Sales, string ToDate, string FromDate) {
                EastSalesRow rowEastSalesRow = ((EastSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Boid,
                        Name,
                        Region,
                        Sales,
                        ToDate,
                        FromDate};
                rowEastSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEastSalesRow);
                return rowEastSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EastSalesDataTable cln = ((EastSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EastSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBoid = base.Columns["Boid"];
                this.columnName = base.Columns["Name"];
                this.columnRegion = base.Columns["Region"];
                this.columnSales = base.Columns["Sales"];
                this.columnToDate = base.Columns["ToDate"];
                this.columnFromDate = base.Columns["FromDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBoid = new global::System.Data.DataColumn("Boid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnSales = new global::System.Data.DataColumn("Sales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSales);
                this.columnToDate = new global::System.Data.DataColumn("ToDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDate);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EastSalesRow NewEastSalesRow() {
                return ((EastSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EastSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EastSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EastSalesRowChanged != null)) {
                    this.EastSalesRowChanged(this, new EastSalesRowChangeEvent(((EastSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EastSalesRowChanging != null)) {
                    this.EastSalesRowChanging(this, new EastSalesRowChangeEvent(((EastSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EastSalesRowDeleted != null)) {
                    this.EastSalesRowDeleted(this, new EastSalesRowChangeEvent(((EastSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EastSalesRowDeleting != null)) {
                    this.EastSalesRowDeleting(this, new EastSalesRowChangeEvent(((EastSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEastSalesRow(EastSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RegionWiseSales ds = new RegionWiseSales();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EastSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CenteralSalesDataTable : global::System.Data.TypedTableBase<CenteralSalesRow> {
            
            private global::System.Data.DataColumn columnBoid;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnSales;
            
            private global::System.Data.DataColumn columnTodate;
            
            private global::System.Data.DataColumn columnFromDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CenteralSalesDataTable() {
                this.TableName = "CenteralSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CenteralSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CenteralSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoidColumn {
                get {
                    return this.columnBoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesColumn {
                get {
                    return this.columnSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TodateColumn {
                get {
                    return this.columnTodate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CenteralSalesRow this[int index] {
                get {
                    return ((CenteralSalesRow)(this.Rows[index]));
                }
            }
            
            public event CenteralSalesRowChangeEventHandler CenteralSalesRowChanging;
            
            public event CenteralSalesRowChangeEventHandler CenteralSalesRowChanged;
            
            public event CenteralSalesRowChangeEventHandler CenteralSalesRowDeleting;
            
            public event CenteralSalesRowChangeEventHandler CenteralSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCenteralSalesRow(CenteralSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CenteralSalesRow AddCenteralSalesRow(string Boid, string Name, string Region, string Sales, string Todate, string FromDate) {
                CenteralSalesRow rowCenteralSalesRow = ((CenteralSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Boid,
                        Name,
                        Region,
                        Sales,
                        Todate,
                        FromDate};
                rowCenteralSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCenteralSalesRow);
                return rowCenteralSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CenteralSalesDataTable cln = ((CenteralSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CenteralSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBoid = base.Columns["Boid"];
                this.columnName = base.Columns["Name"];
                this.columnRegion = base.Columns["Region"];
                this.columnSales = base.Columns["Sales"];
                this.columnTodate = base.Columns["Todate"];
                this.columnFromDate = base.Columns["FromDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBoid = new global::System.Data.DataColumn("Boid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnSales = new global::System.Data.DataColumn("Sales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSales);
                this.columnTodate = new global::System.Data.DataColumn("Todate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTodate);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CenteralSalesRow NewCenteralSalesRow() {
                return ((CenteralSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CenteralSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CenteralSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CenteralSalesRowChanged != null)) {
                    this.CenteralSalesRowChanged(this, new CenteralSalesRowChangeEvent(((CenteralSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CenteralSalesRowChanging != null)) {
                    this.CenteralSalesRowChanging(this, new CenteralSalesRowChangeEvent(((CenteralSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CenteralSalesRowDeleted != null)) {
                    this.CenteralSalesRowDeleted(this, new CenteralSalesRowChangeEvent(((CenteralSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CenteralSalesRowDeleting != null)) {
                    this.CenteralSalesRowDeleting(this, new CenteralSalesRowChangeEvent(((CenteralSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCenteralSalesRow(CenteralSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RegionWiseSales ds = new RegionWiseSales();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CenteralSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WestSalesDataTable : global::System.Data.TypedTableBase<WestSalesRow> {
            
            private global::System.Data.DataColumn columnBoid;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnSales;
            
            private global::System.Data.DataColumn columnToDate;
            
            private global::System.Data.DataColumn columnFromDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WestSalesDataTable() {
                this.TableName = "WestSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WestSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WestSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoidColumn {
                get {
                    return this.columnBoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesColumn {
                get {
                    return this.columnSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDateColumn {
                get {
                    return this.columnToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WestSalesRow this[int index] {
                get {
                    return ((WestSalesRow)(this.Rows[index]));
                }
            }
            
            public event WestSalesRowChangeEventHandler WestSalesRowChanging;
            
            public event WestSalesRowChangeEventHandler WestSalesRowChanged;
            
            public event WestSalesRowChangeEventHandler WestSalesRowDeleting;
            
            public event WestSalesRowChangeEventHandler WestSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWestSalesRow(WestSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WestSalesRow AddWestSalesRow(string Boid, string Name, string Region, string Sales, string ToDate, string FromDate) {
                WestSalesRow rowWestSalesRow = ((WestSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Boid,
                        Name,
                        Region,
                        Sales,
                        ToDate,
                        FromDate};
                rowWestSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWestSalesRow);
                return rowWestSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WestSalesDataTable cln = ((WestSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WestSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBoid = base.Columns["Boid"];
                this.columnName = base.Columns["Name"];
                this.columnRegion = base.Columns["Region"];
                this.columnSales = base.Columns["Sales"];
                this.columnToDate = base.Columns["ToDate"];
                this.columnFromDate = base.Columns["FromDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBoid = new global::System.Data.DataColumn("Boid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnSales = new global::System.Data.DataColumn("Sales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSales);
                this.columnToDate = new global::System.Data.DataColumn("ToDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDate);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WestSalesRow NewWestSalesRow() {
                return ((WestSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WestSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WestSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WestSalesRowChanged != null)) {
                    this.WestSalesRowChanged(this, new WestSalesRowChangeEvent(((WestSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WestSalesRowChanging != null)) {
                    this.WestSalesRowChanging(this, new WestSalesRowChangeEvent(((WestSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WestSalesRowDeleted != null)) {
                    this.WestSalesRowDeleted(this, new WestSalesRowChangeEvent(((WestSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WestSalesRowDeleting != null)) {
                    this.WestSalesRowDeleting(this, new WestSalesRowChangeEvent(((WestSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWestSalesRow(WestSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RegionWiseSales ds = new RegionWiseSales();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WestSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NorthEastSalesDataTable : global::System.Data.TypedTableBase<NorthEastSalesRow> {
            
            private global::System.Data.DataColumn columnBoid;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnSales;
            
            private global::System.Data.DataColumn columnTodate;
            
            private global::System.Data.DataColumn columnFromDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NorthEastSalesDataTable() {
                this.TableName = "NorthEastSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NorthEastSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NorthEastSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoidColumn {
                get {
                    return this.columnBoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesColumn {
                get {
                    return this.columnSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TodateColumn {
                get {
                    return this.columnTodate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NorthEastSalesRow this[int index] {
                get {
                    return ((NorthEastSalesRow)(this.Rows[index]));
                }
            }
            
            public event NorthEastSalesRowChangeEventHandler NorthEastSalesRowChanging;
            
            public event NorthEastSalesRowChangeEventHandler NorthEastSalesRowChanged;
            
            public event NorthEastSalesRowChangeEventHandler NorthEastSalesRowDeleting;
            
            public event NorthEastSalesRowChangeEventHandler NorthEastSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNorthEastSalesRow(NorthEastSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NorthEastSalesRow AddNorthEastSalesRow(string Boid, string Name, string Region, string Sales, string Todate, string FromDate) {
                NorthEastSalesRow rowNorthEastSalesRow = ((NorthEastSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Boid,
                        Name,
                        Region,
                        Sales,
                        Todate,
                        FromDate};
                rowNorthEastSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNorthEastSalesRow);
                return rowNorthEastSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NorthEastSalesDataTable cln = ((NorthEastSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NorthEastSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBoid = base.Columns["Boid"];
                this.columnName = base.Columns["Name"];
                this.columnRegion = base.Columns["Region"];
                this.columnSales = base.Columns["Sales"];
                this.columnTodate = base.Columns["Todate"];
                this.columnFromDate = base.Columns["FromDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBoid = new global::System.Data.DataColumn("Boid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnSales = new global::System.Data.DataColumn("Sales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSales);
                this.columnTodate = new global::System.Data.DataColumn("Todate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTodate);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NorthEastSalesRow NewNorthEastSalesRow() {
                return ((NorthEastSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NorthEastSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NorthEastSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NorthEastSalesRowChanged != null)) {
                    this.NorthEastSalesRowChanged(this, new NorthEastSalesRowChangeEvent(((NorthEastSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NorthEastSalesRowChanging != null)) {
                    this.NorthEastSalesRowChanging(this, new NorthEastSalesRowChangeEvent(((NorthEastSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NorthEastSalesRowDeleted != null)) {
                    this.NorthEastSalesRowDeleted(this, new NorthEastSalesRowChangeEvent(((NorthEastSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NorthEastSalesRowDeleting != null)) {
                    this.NorthEastSalesRowDeleting(this, new NorthEastSalesRowChangeEvent(((NorthEastSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNorthEastSalesRow(NorthEastSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RegionWiseSales ds = new RegionWiseSales();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NorthEastSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NepalSalesDataTable : global::System.Data.TypedTableBase<NepalSalesRow> {
            
            private global::System.Data.DataColumn columnBoid;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnSales;
            
            private global::System.Data.DataColumn columnToDate;
            
            private global::System.Data.DataColumn columnFromDate;
            
            private global::System.Data.DataColumn columnTotalsales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NepalSalesDataTable() {
                this.TableName = "NepalSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NepalSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NepalSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoidColumn {
                get {
                    return this.columnBoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesColumn {
                get {
                    return this.columnSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDateColumn {
                get {
                    return this.columnToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalsalesColumn {
                get {
                    return this.columnTotalsales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NepalSalesRow this[int index] {
                get {
                    return ((NepalSalesRow)(this.Rows[index]));
                }
            }
            
            public event NepalSalesRowChangeEventHandler NepalSalesRowChanging;
            
            public event NepalSalesRowChangeEventHandler NepalSalesRowChanged;
            
            public event NepalSalesRowChangeEventHandler NepalSalesRowDeleting;
            
            public event NepalSalesRowChangeEventHandler NepalSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNepalSalesRow(NepalSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NepalSalesRow AddNepalSalesRow(string Boid, string Name, string Region, string Sales, string ToDate, string FromDate, string Totalsales) {
                NepalSalesRow rowNepalSalesRow = ((NepalSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Boid,
                        Name,
                        Region,
                        Sales,
                        ToDate,
                        FromDate,
                        Totalsales};
                rowNepalSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNepalSalesRow);
                return rowNepalSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NepalSalesDataTable cln = ((NepalSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NepalSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBoid = base.Columns["Boid"];
                this.columnName = base.Columns["Name"];
                this.columnRegion = base.Columns["Region"];
                this.columnSales = base.Columns["Sales"];
                this.columnToDate = base.Columns["ToDate"];
                this.columnFromDate = base.Columns["FromDate"];
                this.columnTotalsales = base.Columns["Totalsales"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBoid = new global::System.Data.DataColumn("Boid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnSales = new global::System.Data.DataColumn("Sales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSales);
                this.columnToDate = new global::System.Data.DataColumn("ToDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDate);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
                this.columnTotalsales = new global::System.Data.DataColumn("Totalsales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalsales);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NepalSalesRow NewNepalSalesRow() {
                return ((NepalSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NepalSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NepalSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NepalSalesRowChanged != null)) {
                    this.NepalSalesRowChanged(this, new NepalSalesRowChangeEvent(((NepalSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NepalSalesRowChanging != null)) {
                    this.NepalSalesRowChanging(this, new NepalSalesRowChangeEvent(((NepalSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NepalSalesRowDeleted != null)) {
                    this.NepalSalesRowDeleted(this, new NepalSalesRowChangeEvent(((NepalSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NepalSalesRowDeleting != null)) {
                    this.NepalSalesRowDeleting(this, new NepalSalesRowChangeEvent(((NepalSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNepalSalesRow(NepalSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RegionWiseSales ds = new RegionWiseSales();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NepalSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class L_NorthSalesDataTable : global::System.Data.TypedTableBase<L_NorthSalesRow> {
            
            private global::System.Data.DataColumn columnBoid;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnSales;
            
            private global::System.Data.DataColumn columnToDate;
            
            private global::System.Data.DataColumn columnFromDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NorthSalesDataTable() {
                this.TableName = "L_NorthSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal L_NorthSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected L_NorthSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoidColumn {
                get {
                    return this.columnBoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesColumn {
                get {
                    return this.columnSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDateColumn {
                get {
                    return this.columnToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NorthSalesRow this[int index] {
                get {
                    return ((L_NorthSalesRow)(this.Rows[index]));
                }
            }
            
            public event L_NorthSalesRowChangeEventHandler L_NorthSalesRowChanging;
            
            public event L_NorthSalesRowChangeEventHandler L_NorthSalesRowChanged;
            
            public event L_NorthSalesRowChangeEventHandler L_NorthSalesRowDeleting;
            
            public event L_NorthSalesRowChangeEventHandler L_NorthSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddL_NorthSalesRow(L_NorthSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NorthSalesRow AddL_NorthSalesRow(string Boid, string Name, string Region, string Sales, string ToDate, string FromDate) {
                L_NorthSalesRow rowL_NorthSalesRow = ((L_NorthSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Boid,
                        Name,
                        Region,
                        Sales,
                        ToDate,
                        FromDate};
                rowL_NorthSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowL_NorthSalesRow);
                return rowL_NorthSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                L_NorthSalesDataTable cln = ((L_NorthSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new L_NorthSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBoid = base.Columns["Boid"];
                this.columnName = base.Columns["Name"];
                this.columnRegion = base.Columns["Region"];
                this.columnSales = base.Columns["Sales"];
                this.columnToDate = base.Columns["ToDate"];
                this.columnFromDate = base.Columns["FromDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBoid = new global::System.Data.DataColumn("Boid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnSales = new global::System.Data.DataColumn("Sales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSales);
                this.columnToDate = new global::System.Data.DataColumn("ToDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDate);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NorthSalesRow NewL_NorthSalesRow() {
                return ((L_NorthSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new L_NorthSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(L_NorthSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.L_NorthSalesRowChanged != null)) {
                    this.L_NorthSalesRowChanged(this, new L_NorthSalesRowChangeEvent(((L_NorthSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.L_NorthSalesRowChanging != null)) {
                    this.L_NorthSalesRowChanging(this, new L_NorthSalesRowChangeEvent(((L_NorthSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.L_NorthSalesRowDeleted != null)) {
                    this.L_NorthSalesRowDeleted(this, new L_NorthSalesRowChangeEvent(((L_NorthSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.L_NorthSalesRowDeleting != null)) {
                    this.L_NorthSalesRowDeleting(this, new L_NorthSalesRowChangeEvent(((L_NorthSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveL_NorthSalesRow(L_NorthSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RegionWiseSales ds = new RegionWiseSales();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "L_NorthSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class L_UPSalesDataTable : global::System.Data.TypedTableBase<L_UPSalesRow> {
            
            private global::System.Data.DataColumn columnBoid;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnSales;
            
            private global::System.Data.DataColumn columnToDate;
            
            private global::System.Data.DataColumn columnFromDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_UPSalesDataTable() {
                this.TableName = "L_UPSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal L_UPSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected L_UPSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoidColumn {
                get {
                    return this.columnBoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesColumn {
                get {
                    return this.columnSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDateColumn {
                get {
                    return this.columnToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_UPSalesRow this[int index] {
                get {
                    return ((L_UPSalesRow)(this.Rows[index]));
                }
            }
            
            public event L_UPSalesRowChangeEventHandler L_UPSalesRowChanging;
            
            public event L_UPSalesRowChangeEventHandler L_UPSalesRowChanged;
            
            public event L_UPSalesRowChangeEventHandler L_UPSalesRowDeleting;
            
            public event L_UPSalesRowChangeEventHandler L_UPSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddL_UPSalesRow(L_UPSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_UPSalesRow AddL_UPSalesRow(string Boid, string Name, string Region, string Sales, string ToDate, string FromDate) {
                L_UPSalesRow rowL_UPSalesRow = ((L_UPSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Boid,
                        Name,
                        Region,
                        Sales,
                        ToDate,
                        FromDate};
                rowL_UPSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowL_UPSalesRow);
                return rowL_UPSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                L_UPSalesDataTable cln = ((L_UPSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new L_UPSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBoid = base.Columns["Boid"];
                this.columnName = base.Columns["Name"];
                this.columnRegion = base.Columns["Region"];
                this.columnSales = base.Columns["Sales"];
                this.columnToDate = base.Columns["ToDate"];
                this.columnFromDate = base.Columns["FromDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBoid = new global::System.Data.DataColumn("Boid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnSales = new global::System.Data.DataColumn("Sales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSales);
                this.columnToDate = new global::System.Data.DataColumn("ToDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDate);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_UPSalesRow NewL_UPSalesRow() {
                return ((L_UPSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new L_UPSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(L_UPSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.L_UPSalesRowChanged != null)) {
                    this.L_UPSalesRowChanged(this, new L_UPSalesRowChangeEvent(((L_UPSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.L_UPSalesRowChanging != null)) {
                    this.L_UPSalesRowChanging(this, new L_UPSalesRowChangeEvent(((L_UPSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.L_UPSalesRowDeleted != null)) {
                    this.L_UPSalesRowDeleted(this, new L_UPSalesRowChangeEvent(((L_UPSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.L_UPSalesRowDeleting != null)) {
                    this.L_UPSalesRowDeleting(this, new L_UPSalesRowChangeEvent(((L_UPSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveL_UPSalesRow(L_UPSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RegionWiseSales ds = new RegionWiseSales();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "L_UPSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class L_SouthSalesDataTable : global::System.Data.TypedTableBase<L_SouthSalesRow> {
            
            private global::System.Data.DataColumn columnBoid;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnSales;
            
            private global::System.Data.DataColumn columnToDate;
            
            private global::System.Data.DataColumn columnFromDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_SouthSalesDataTable() {
                this.TableName = "L_SouthSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal L_SouthSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected L_SouthSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoidColumn {
                get {
                    return this.columnBoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesColumn {
                get {
                    return this.columnSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDateColumn {
                get {
                    return this.columnToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_SouthSalesRow this[int index] {
                get {
                    return ((L_SouthSalesRow)(this.Rows[index]));
                }
            }
            
            public event L_SouthSalesRowChangeEventHandler L_SouthSalesRowChanging;
            
            public event L_SouthSalesRowChangeEventHandler L_SouthSalesRowChanged;
            
            public event L_SouthSalesRowChangeEventHandler L_SouthSalesRowDeleting;
            
            public event L_SouthSalesRowChangeEventHandler L_SouthSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddL_SouthSalesRow(L_SouthSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_SouthSalesRow AddL_SouthSalesRow(string Boid, string Name, string Region, string Sales, string ToDate, string FromDate) {
                L_SouthSalesRow rowL_SouthSalesRow = ((L_SouthSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Boid,
                        Name,
                        Region,
                        Sales,
                        ToDate,
                        FromDate};
                rowL_SouthSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowL_SouthSalesRow);
                return rowL_SouthSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                L_SouthSalesDataTable cln = ((L_SouthSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new L_SouthSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBoid = base.Columns["Boid"];
                this.columnName = base.Columns["Name"];
                this.columnRegion = base.Columns["Region"];
                this.columnSales = base.Columns["Sales"];
                this.columnToDate = base.Columns["ToDate"];
                this.columnFromDate = base.Columns["FromDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBoid = new global::System.Data.DataColumn("Boid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnSales = new global::System.Data.DataColumn("Sales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSales);
                this.columnToDate = new global::System.Data.DataColumn("ToDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDate);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_SouthSalesRow NewL_SouthSalesRow() {
                return ((L_SouthSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new L_SouthSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(L_SouthSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.L_SouthSalesRowChanged != null)) {
                    this.L_SouthSalesRowChanged(this, new L_SouthSalesRowChangeEvent(((L_SouthSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.L_SouthSalesRowChanging != null)) {
                    this.L_SouthSalesRowChanging(this, new L_SouthSalesRowChangeEvent(((L_SouthSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.L_SouthSalesRowDeleted != null)) {
                    this.L_SouthSalesRowDeleted(this, new L_SouthSalesRowChangeEvent(((L_SouthSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.L_SouthSalesRowDeleting != null)) {
                    this.L_SouthSalesRowDeleting(this, new L_SouthSalesRowChangeEvent(((L_SouthSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveL_SouthSalesRow(L_SouthSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RegionWiseSales ds = new RegionWiseSales();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "L_SouthSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class L_EastSalesDataTable : global::System.Data.TypedTableBase<L_EastSalesRow> {
            
            private global::System.Data.DataColumn columnBoid;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnSales;
            
            private global::System.Data.DataColumn columnToDate;
            
            private global::System.Data.DataColumn columnFromDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_EastSalesDataTable() {
                this.TableName = "L_EastSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal L_EastSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected L_EastSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoidColumn {
                get {
                    return this.columnBoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesColumn {
                get {
                    return this.columnSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDateColumn {
                get {
                    return this.columnToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_EastSalesRow this[int index] {
                get {
                    return ((L_EastSalesRow)(this.Rows[index]));
                }
            }
            
            public event L_EastSalesRowChangeEventHandler L_EastSalesRowChanging;
            
            public event L_EastSalesRowChangeEventHandler L_EastSalesRowChanged;
            
            public event L_EastSalesRowChangeEventHandler L_EastSalesRowDeleting;
            
            public event L_EastSalesRowChangeEventHandler L_EastSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddL_EastSalesRow(L_EastSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_EastSalesRow AddL_EastSalesRow(string Boid, string Name, string Region, string Sales, string ToDate, string FromDate) {
                L_EastSalesRow rowL_EastSalesRow = ((L_EastSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Boid,
                        Name,
                        Region,
                        Sales,
                        ToDate,
                        FromDate};
                rowL_EastSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowL_EastSalesRow);
                return rowL_EastSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                L_EastSalesDataTable cln = ((L_EastSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new L_EastSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBoid = base.Columns["Boid"];
                this.columnName = base.Columns["Name"];
                this.columnRegion = base.Columns["Region"];
                this.columnSales = base.Columns["Sales"];
                this.columnToDate = base.Columns["ToDate"];
                this.columnFromDate = base.Columns["FromDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBoid = new global::System.Data.DataColumn("Boid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnSales = new global::System.Data.DataColumn("Sales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSales);
                this.columnToDate = new global::System.Data.DataColumn("ToDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDate);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_EastSalesRow NewL_EastSalesRow() {
                return ((L_EastSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new L_EastSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(L_EastSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.L_EastSalesRowChanged != null)) {
                    this.L_EastSalesRowChanged(this, new L_EastSalesRowChangeEvent(((L_EastSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.L_EastSalesRowChanging != null)) {
                    this.L_EastSalesRowChanging(this, new L_EastSalesRowChangeEvent(((L_EastSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.L_EastSalesRowDeleted != null)) {
                    this.L_EastSalesRowDeleted(this, new L_EastSalesRowChangeEvent(((L_EastSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.L_EastSalesRowDeleting != null)) {
                    this.L_EastSalesRowDeleting(this, new L_EastSalesRowChangeEvent(((L_EastSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveL_EastSalesRow(L_EastSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RegionWiseSales ds = new RegionWiseSales();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "L_EastSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class L_CenteralSalesDataTable : global::System.Data.TypedTableBase<L_CenteralSalesRow> {
            
            private global::System.Data.DataColumn columnBoid;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnSales;
            
            private global::System.Data.DataColumn columnTodate;
            
            private global::System.Data.DataColumn columnFromDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_CenteralSalesDataTable() {
                this.TableName = "L_CenteralSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal L_CenteralSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected L_CenteralSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoidColumn {
                get {
                    return this.columnBoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesColumn {
                get {
                    return this.columnSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TodateColumn {
                get {
                    return this.columnTodate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_CenteralSalesRow this[int index] {
                get {
                    return ((L_CenteralSalesRow)(this.Rows[index]));
                }
            }
            
            public event L_CenteralSalesRowChangeEventHandler L_CenteralSalesRowChanging;
            
            public event L_CenteralSalesRowChangeEventHandler L_CenteralSalesRowChanged;
            
            public event L_CenteralSalesRowChangeEventHandler L_CenteralSalesRowDeleting;
            
            public event L_CenteralSalesRowChangeEventHandler L_CenteralSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddL_CenteralSalesRow(L_CenteralSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_CenteralSalesRow AddL_CenteralSalesRow(string Boid, string Name, string Region, string Sales, string Todate, string FromDate) {
                L_CenteralSalesRow rowL_CenteralSalesRow = ((L_CenteralSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Boid,
                        Name,
                        Region,
                        Sales,
                        Todate,
                        FromDate};
                rowL_CenteralSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowL_CenteralSalesRow);
                return rowL_CenteralSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                L_CenteralSalesDataTable cln = ((L_CenteralSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new L_CenteralSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBoid = base.Columns["Boid"];
                this.columnName = base.Columns["Name"];
                this.columnRegion = base.Columns["Region"];
                this.columnSales = base.Columns["Sales"];
                this.columnTodate = base.Columns["Todate"];
                this.columnFromDate = base.Columns["FromDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBoid = new global::System.Data.DataColumn("Boid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnSales = new global::System.Data.DataColumn("Sales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSales);
                this.columnTodate = new global::System.Data.DataColumn("Todate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTodate);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_CenteralSalesRow NewL_CenteralSalesRow() {
                return ((L_CenteralSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new L_CenteralSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(L_CenteralSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.L_CenteralSalesRowChanged != null)) {
                    this.L_CenteralSalesRowChanged(this, new L_CenteralSalesRowChangeEvent(((L_CenteralSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.L_CenteralSalesRowChanging != null)) {
                    this.L_CenteralSalesRowChanging(this, new L_CenteralSalesRowChangeEvent(((L_CenteralSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.L_CenteralSalesRowDeleted != null)) {
                    this.L_CenteralSalesRowDeleted(this, new L_CenteralSalesRowChangeEvent(((L_CenteralSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.L_CenteralSalesRowDeleting != null)) {
                    this.L_CenteralSalesRowDeleting(this, new L_CenteralSalesRowChangeEvent(((L_CenteralSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveL_CenteralSalesRow(L_CenteralSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RegionWiseSales ds = new RegionWiseSales();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "L_CenteralSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class L_WestSalesDataTable : global::System.Data.TypedTableBase<L_WestSalesRow> {
            
            private global::System.Data.DataColumn columnBoid;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnSales;
            
            private global::System.Data.DataColumn columnToDate;
            
            private global::System.Data.DataColumn columnFromDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_WestSalesDataTable() {
                this.TableName = "L_WestSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal L_WestSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected L_WestSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoidColumn {
                get {
                    return this.columnBoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesColumn {
                get {
                    return this.columnSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDateColumn {
                get {
                    return this.columnToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_WestSalesRow this[int index] {
                get {
                    return ((L_WestSalesRow)(this.Rows[index]));
                }
            }
            
            public event L_WestSalesRowChangeEventHandler L_WestSalesRowChanging;
            
            public event L_WestSalesRowChangeEventHandler L_WestSalesRowChanged;
            
            public event L_WestSalesRowChangeEventHandler L_WestSalesRowDeleting;
            
            public event L_WestSalesRowChangeEventHandler L_WestSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddL_WestSalesRow(L_WestSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_WestSalesRow AddL_WestSalesRow(string Boid, string Name, string Region, string Sales, string ToDate, string FromDate) {
                L_WestSalesRow rowL_WestSalesRow = ((L_WestSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Boid,
                        Name,
                        Region,
                        Sales,
                        ToDate,
                        FromDate};
                rowL_WestSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowL_WestSalesRow);
                return rowL_WestSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                L_WestSalesDataTable cln = ((L_WestSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new L_WestSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBoid = base.Columns["Boid"];
                this.columnName = base.Columns["Name"];
                this.columnRegion = base.Columns["Region"];
                this.columnSales = base.Columns["Sales"];
                this.columnToDate = base.Columns["ToDate"];
                this.columnFromDate = base.Columns["FromDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBoid = new global::System.Data.DataColumn("Boid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnSales = new global::System.Data.DataColumn("Sales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSales);
                this.columnToDate = new global::System.Data.DataColumn("ToDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDate);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_WestSalesRow NewL_WestSalesRow() {
                return ((L_WestSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new L_WestSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(L_WestSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.L_WestSalesRowChanged != null)) {
                    this.L_WestSalesRowChanged(this, new L_WestSalesRowChangeEvent(((L_WestSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.L_WestSalesRowChanging != null)) {
                    this.L_WestSalesRowChanging(this, new L_WestSalesRowChangeEvent(((L_WestSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.L_WestSalesRowDeleted != null)) {
                    this.L_WestSalesRowDeleted(this, new L_WestSalesRowChangeEvent(((L_WestSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.L_WestSalesRowDeleting != null)) {
                    this.L_WestSalesRowDeleting(this, new L_WestSalesRowChangeEvent(((L_WestSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveL_WestSalesRow(L_WestSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RegionWiseSales ds = new RegionWiseSales();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "L_WestSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class L_NorthEastSalesDataTable : global::System.Data.TypedTableBase<L_NorthEastSalesRow> {
            
            private global::System.Data.DataColumn columnBoid;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnSales;
            
            private global::System.Data.DataColumn columnTodate;
            
            private global::System.Data.DataColumn columnFromDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NorthEastSalesDataTable() {
                this.TableName = "L_NorthEastSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal L_NorthEastSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected L_NorthEastSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoidColumn {
                get {
                    return this.columnBoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesColumn {
                get {
                    return this.columnSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TodateColumn {
                get {
                    return this.columnTodate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NorthEastSalesRow this[int index] {
                get {
                    return ((L_NorthEastSalesRow)(this.Rows[index]));
                }
            }
            
            public event L_NorthEastSalesRowChangeEventHandler L_NorthEastSalesRowChanging;
            
            public event L_NorthEastSalesRowChangeEventHandler L_NorthEastSalesRowChanged;
            
            public event L_NorthEastSalesRowChangeEventHandler L_NorthEastSalesRowDeleting;
            
            public event L_NorthEastSalesRowChangeEventHandler L_NorthEastSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddL_NorthEastSalesRow(L_NorthEastSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NorthEastSalesRow AddL_NorthEastSalesRow(string Boid, string Name, string Region, string Sales, string Todate, string FromDate) {
                L_NorthEastSalesRow rowL_NorthEastSalesRow = ((L_NorthEastSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Boid,
                        Name,
                        Region,
                        Sales,
                        Todate,
                        FromDate};
                rowL_NorthEastSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowL_NorthEastSalesRow);
                return rowL_NorthEastSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                L_NorthEastSalesDataTable cln = ((L_NorthEastSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new L_NorthEastSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBoid = base.Columns["Boid"];
                this.columnName = base.Columns["Name"];
                this.columnRegion = base.Columns["Region"];
                this.columnSales = base.Columns["Sales"];
                this.columnTodate = base.Columns["Todate"];
                this.columnFromDate = base.Columns["FromDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBoid = new global::System.Data.DataColumn("Boid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnSales = new global::System.Data.DataColumn("Sales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSales);
                this.columnTodate = new global::System.Data.DataColumn("Todate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTodate);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NorthEastSalesRow NewL_NorthEastSalesRow() {
                return ((L_NorthEastSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new L_NorthEastSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(L_NorthEastSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.L_NorthEastSalesRowChanged != null)) {
                    this.L_NorthEastSalesRowChanged(this, new L_NorthEastSalesRowChangeEvent(((L_NorthEastSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.L_NorthEastSalesRowChanging != null)) {
                    this.L_NorthEastSalesRowChanging(this, new L_NorthEastSalesRowChangeEvent(((L_NorthEastSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.L_NorthEastSalesRowDeleted != null)) {
                    this.L_NorthEastSalesRowDeleted(this, new L_NorthEastSalesRowChangeEvent(((L_NorthEastSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.L_NorthEastSalesRowDeleting != null)) {
                    this.L_NorthEastSalesRowDeleting(this, new L_NorthEastSalesRowChangeEvent(((L_NorthEastSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveL_NorthEastSalesRow(L_NorthEastSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RegionWiseSales ds = new RegionWiseSales();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "L_NorthEastSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class L_NepalSalesDataTable : global::System.Data.TypedTableBase<L_NepalSalesRow> {
            
            private global::System.Data.DataColumn columnBoid;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnSales;
            
            private global::System.Data.DataColumn columnToDate;
            
            private global::System.Data.DataColumn columnFromDate;
            
            private global::System.Data.DataColumn columnTotalsales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NepalSalesDataTable() {
                this.TableName = "L_NepalSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal L_NepalSalesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected L_NepalSalesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoidColumn {
                get {
                    return this.columnBoid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesColumn {
                get {
                    return this.columnSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToDateColumn {
                get {
                    return this.columnToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDateColumn {
                get {
                    return this.columnFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalsalesColumn {
                get {
                    return this.columnTotalsales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NepalSalesRow this[int index] {
                get {
                    return ((L_NepalSalesRow)(this.Rows[index]));
                }
            }
            
            public event L_NepalSalesRowChangeEventHandler L_NepalSalesRowChanging;
            
            public event L_NepalSalesRowChangeEventHandler L_NepalSalesRowChanged;
            
            public event L_NepalSalesRowChangeEventHandler L_NepalSalesRowDeleting;
            
            public event L_NepalSalesRowChangeEventHandler L_NepalSalesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddL_NepalSalesRow(L_NepalSalesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NepalSalesRow AddL_NepalSalesRow(string Boid, string Name, string Region, string Sales, string ToDate, string FromDate, string Totalsales) {
                L_NepalSalesRow rowL_NepalSalesRow = ((L_NepalSalesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Boid,
                        Name,
                        Region,
                        Sales,
                        ToDate,
                        FromDate,
                        Totalsales};
                rowL_NepalSalesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowL_NepalSalesRow);
                return rowL_NepalSalesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                L_NepalSalesDataTable cln = ((L_NepalSalesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new L_NepalSalesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBoid = base.Columns["Boid"];
                this.columnName = base.Columns["Name"];
                this.columnRegion = base.Columns["Region"];
                this.columnSales = base.Columns["Sales"];
                this.columnToDate = base.Columns["ToDate"];
                this.columnFromDate = base.Columns["FromDate"];
                this.columnTotalsales = base.Columns["Totalsales"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBoid = new global::System.Data.DataColumn("Boid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnSales = new global::System.Data.DataColumn("Sales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSales);
                this.columnToDate = new global::System.Data.DataColumn("ToDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToDate);
                this.columnFromDate = new global::System.Data.DataColumn("FromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDate);
                this.columnTotalsales = new global::System.Data.DataColumn("Totalsales", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalsales);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NepalSalesRow NewL_NepalSalesRow() {
                return ((L_NepalSalesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new L_NepalSalesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(L_NepalSalesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.L_NepalSalesRowChanged != null)) {
                    this.L_NepalSalesRowChanged(this, new L_NepalSalesRowChangeEvent(((L_NepalSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.L_NepalSalesRowChanging != null)) {
                    this.L_NepalSalesRowChanging(this, new L_NepalSalesRowChangeEvent(((L_NepalSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.L_NepalSalesRowDeleted != null)) {
                    this.L_NepalSalesRowDeleted(this, new L_NepalSalesRowChangeEvent(((L_NepalSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.L_NepalSalesRowDeleting != null)) {
                    this.L_NepalSalesRowDeleting(this, new L_NepalSalesRowChangeEvent(((L_NepalSalesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveL_NepalSalesRow(L_NepalSalesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RegionWiseSales ds = new RegionWiseSales();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "L_NepalSalesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NorthSalesRow : global::System.Data.DataRow {
            
            private NorthSalesDataTable tableNorthSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NorthSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNorthSales = ((NorthSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Boid {
                get {
                    try {
                        return ((string)(this[this.tableNorthSales.BoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Boid\' in table \'NorthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNorthSales.BoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableNorthSales.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'NorthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNorthSales.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableNorthSales.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'NorthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNorthSales.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sales {
                get {
                    try {
                        return ((string)(this[this.tableNorthSales.SalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sales\' in table \'NorthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNorthSales.SalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToDate {
                get {
                    try {
                        return ((string)(this[this.tableNorthSales.ToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToDate\' in table \'NorthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNorthSales.ToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableNorthSales.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'NorthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNorthSales.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoidNull() {
                return this.IsNull(this.tableNorthSales.BoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoidNull() {
                this[this.tableNorthSales.BoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableNorthSales.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableNorthSales.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableNorthSales.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableNorthSales.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNull() {
                return this.IsNull(this.tableNorthSales.SalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNull() {
                this[this.tableNorthSales.SalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToDateNull() {
                return this.IsNull(this.tableNorthSales.ToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToDateNull() {
                this[this.tableNorthSales.ToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableNorthSales.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableNorthSales.FromDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UPSalesRow : global::System.Data.DataRow {
            
            private UPSalesDataTable tableUPSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UPSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUPSales = ((UPSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Boid {
                get {
                    try {
                        return ((string)(this[this.tableUPSales.BoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Boid\' in table \'UPSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUPSales.BoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableUPSales.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'UPSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUPSales.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableUPSales.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'UPSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUPSales.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sales {
                get {
                    try {
                        return ((string)(this[this.tableUPSales.SalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sales\' in table \'UPSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUPSales.SalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToDate {
                get {
                    try {
                        return ((string)(this[this.tableUPSales.ToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToDate\' in table \'UPSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUPSales.ToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableUPSales.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'UPSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUPSales.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoidNull() {
                return this.IsNull(this.tableUPSales.BoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoidNull() {
                this[this.tableUPSales.BoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableUPSales.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableUPSales.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableUPSales.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableUPSales.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNull() {
                return this.IsNull(this.tableUPSales.SalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNull() {
                this[this.tableUPSales.SalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToDateNull() {
                return this.IsNull(this.tableUPSales.ToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToDateNull() {
                this[this.tableUPSales.ToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableUPSales.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableUPSales.FromDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SouthSalesRow : global::System.Data.DataRow {
            
            private SouthSalesDataTable tableSouthSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SouthSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSouthSales = ((SouthSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Boid {
                get {
                    try {
                        return ((string)(this[this.tableSouthSales.BoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Boid\' in table \'SouthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSouthSales.BoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableSouthSales.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'SouthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSouthSales.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableSouthSales.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'SouthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSouthSales.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sales {
                get {
                    try {
                        return ((string)(this[this.tableSouthSales.SalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sales\' in table \'SouthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSouthSales.SalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToDate {
                get {
                    try {
                        return ((string)(this[this.tableSouthSales.ToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToDate\' in table \'SouthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSouthSales.ToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableSouthSales.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'SouthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSouthSales.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoidNull() {
                return this.IsNull(this.tableSouthSales.BoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoidNull() {
                this[this.tableSouthSales.BoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableSouthSales.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableSouthSales.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableSouthSales.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableSouthSales.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNull() {
                return this.IsNull(this.tableSouthSales.SalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNull() {
                this[this.tableSouthSales.SalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToDateNull() {
                return this.IsNull(this.tableSouthSales.ToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToDateNull() {
                this[this.tableSouthSales.ToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableSouthSales.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableSouthSales.FromDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EastSalesRow : global::System.Data.DataRow {
            
            private EastSalesDataTable tableEastSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EastSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEastSales = ((EastSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Boid {
                get {
                    try {
                        return ((string)(this[this.tableEastSales.BoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Boid\' in table \'EastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEastSales.BoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableEastSales.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'EastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEastSales.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableEastSales.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'EastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEastSales.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sales {
                get {
                    try {
                        return ((string)(this[this.tableEastSales.SalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sales\' in table \'EastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEastSales.SalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToDate {
                get {
                    try {
                        return ((string)(this[this.tableEastSales.ToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToDate\' in table \'EastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEastSales.ToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableEastSales.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'EastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEastSales.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoidNull() {
                return this.IsNull(this.tableEastSales.BoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoidNull() {
                this[this.tableEastSales.BoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableEastSales.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableEastSales.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableEastSales.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableEastSales.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNull() {
                return this.IsNull(this.tableEastSales.SalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNull() {
                this[this.tableEastSales.SalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToDateNull() {
                return this.IsNull(this.tableEastSales.ToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToDateNull() {
                this[this.tableEastSales.ToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableEastSales.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableEastSales.FromDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CenteralSalesRow : global::System.Data.DataRow {
            
            private CenteralSalesDataTable tableCenteralSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CenteralSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCenteralSales = ((CenteralSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Boid {
                get {
                    try {
                        return ((string)(this[this.tableCenteralSales.BoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Boid\' in table \'CenteralSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCenteralSales.BoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableCenteralSales.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'CenteralSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCenteralSales.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableCenteralSales.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'CenteralSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCenteralSales.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sales {
                get {
                    try {
                        return ((string)(this[this.tableCenteralSales.SalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sales\' in table \'CenteralSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCenteralSales.SalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Todate {
                get {
                    try {
                        return ((string)(this[this.tableCenteralSales.TodateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Todate\' in table \'CenteralSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCenteralSales.TodateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableCenteralSales.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'CenteralSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCenteralSales.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoidNull() {
                return this.IsNull(this.tableCenteralSales.BoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoidNull() {
                this[this.tableCenteralSales.BoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableCenteralSales.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableCenteralSales.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableCenteralSales.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableCenteralSales.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNull() {
                return this.IsNull(this.tableCenteralSales.SalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNull() {
                this[this.tableCenteralSales.SalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTodateNull() {
                return this.IsNull(this.tableCenteralSales.TodateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTodateNull() {
                this[this.tableCenteralSales.TodateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableCenteralSales.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableCenteralSales.FromDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WestSalesRow : global::System.Data.DataRow {
            
            private WestSalesDataTable tableWestSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WestSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWestSales = ((WestSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Boid {
                get {
                    try {
                        return ((string)(this[this.tableWestSales.BoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Boid\' in table \'WestSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWestSales.BoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableWestSales.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'WestSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWestSales.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableWestSales.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'WestSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWestSales.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sales {
                get {
                    try {
                        return ((string)(this[this.tableWestSales.SalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sales\' in table \'WestSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWestSales.SalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToDate {
                get {
                    try {
                        return ((string)(this[this.tableWestSales.ToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToDate\' in table \'WestSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWestSales.ToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableWestSales.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'WestSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWestSales.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoidNull() {
                return this.IsNull(this.tableWestSales.BoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoidNull() {
                this[this.tableWestSales.BoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableWestSales.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableWestSales.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableWestSales.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableWestSales.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNull() {
                return this.IsNull(this.tableWestSales.SalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNull() {
                this[this.tableWestSales.SalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToDateNull() {
                return this.IsNull(this.tableWestSales.ToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToDateNull() {
                this[this.tableWestSales.ToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableWestSales.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableWestSales.FromDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NorthEastSalesRow : global::System.Data.DataRow {
            
            private NorthEastSalesDataTable tableNorthEastSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NorthEastSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNorthEastSales = ((NorthEastSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Boid {
                get {
                    try {
                        return ((string)(this[this.tableNorthEastSales.BoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Boid\' in table \'NorthEastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNorthEastSales.BoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableNorthEastSales.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'NorthEastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNorthEastSales.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableNorthEastSales.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'NorthEastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNorthEastSales.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sales {
                get {
                    try {
                        return ((string)(this[this.tableNorthEastSales.SalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sales\' in table \'NorthEastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNorthEastSales.SalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Todate {
                get {
                    try {
                        return ((string)(this[this.tableNorthEastSales.TodateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Todate\' in table \'NorthEastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNorthEastSales.TodateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableNorthEastSales.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'NorthEastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNorthEastSales.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoidNull() {
                return this.IsNull(this.tableNorthEastSales.BoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoidNull() {
                this[this.tableNorthEastSales.BoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableNorthEastSales.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableNorthEastSales.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableNorthEastSales.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableNorthEastSales.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNull() {
                return this.IsNull(this.tableNorthEastSales.SalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNull() {
                this[this.tableNorthEastSales.SalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTodateNull() {
                return this.IsNull(this.tableNorthEastSales.TodateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTodateNull() {
                this[this.tableNorthEastSales.TodateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableNorthEastSales.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableNorthEastSales.FromDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NepalSalesRow : global::System.Data.DataRow {
            
            private NepalSalesDataTable tableNepalSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NepalSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNepalSales = ((NepalSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Boid {
                get {
                    try {
                        return ((string)(this[this.tableNepalSales.BoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Boid\' in table \'NepalSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNepalSales.BoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableNepalSales.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'NepalSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNepalSales.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableNepalSales.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'NepalSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNepalSales.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sales {
                get {
                    try {
                        return ((string)(this[this.tableNepalSales.SalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sales\' in table \'NepalSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNepalSales.SalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToDate {
                get {
                    try {
                        return ((string)(this[this.tableNepalSales.ToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToDate\' in table \'NepalSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNepalSales.ToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableNepalSales.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'NepalSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNepalSales.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Totalsales {
                get {
                    try {
                        return ((string)(this[this.tableNepalSales.TotalsalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Totalsales\' in table \'NepalSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNepalSales.TotalsalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoidNull() {
                return this.IsNull(this.tableNepalSales.BoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoidNull() {
                this[this.tableNepalSales.BoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableNepalSales.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableNepalSales.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableNepalSales.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableNepalSales.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNull() {
                return this.IsNull(this.tableNepalSales.SalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNull() {
                this[this.tableNepalSales.SalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToDateNull() {
                return this.IsNull(this.tableNepalSales.ToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToDateNull() {
                this[this.tableNepalSales.ToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableNepalSales.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableNepalSales.FromDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalsalesNull() {
                return this.IsNull(this.tableNepalSales.TotalsalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalsalesNull() {
                this[this.tableNepalSales.TotalsalesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class L_NorthSalesRow : global::System.Data.DataRow {
            
            private L_NorthSalesDataTable tableL_NorthSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal L_NorthSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableL_NorthSales = ((L_NorthSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Boid {
                get {
                    try {
                        return ((string)(this[this.tableL_NorthSales.BoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Boid\' in table \'L_NorthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NorthSales.BoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableL_NorthSales.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'L_NorthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NorthSales.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableL_NorthSales.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'L_NorthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NorthSales.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sales {
                get {
                    try {
                        return ((string)(this[this.tableL_NorthSales.SalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sales\' in table \'L_NorthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NorthSales.SalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToDate {
                get {
                    try {
                        return ((string)(this[this.tableL_NorthSales.ToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToDate\' in table \'L_NorthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NorthSales.ToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableL_NorthSales.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'L_NorthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NorthSales.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoidNull() {
                return this.IsNull(this.tableL_NorthSales.BoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoidNull() {
                this[this.tableL_NorthSales.BoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableL_NorthSales.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableL_NorthSales.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableL_NorthSales.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableL_NorthSales.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNull() {
                return this.IsNull(this.tableL_NorthSales.SalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNull() {
                this[this.tableL_NorthSales.SalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToDateNull() {
                return this.IsNull(this.tableL_NorthSales.ToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToDateNull() {
                this[this.tableL_NorthSales.ToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableL_NorthSales.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableL_NorthSales.FromDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class L_UPSalesRow : global::System.Data.DataRow {
            
            private L_UPSalesDataTable tableL_UPSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal L_UPSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableL_UPSales = ((L_UPSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Boid {
                get {
                    try {
                        return ((string)(this[this.tableL_UPSales.BoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Boid\' in table \'L_UPSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_UPSales.BoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableL_UPSales.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'L_UPSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_UPSales.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableL_UPSales.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'L_UPSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_UPSales.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sales {
                get {
                    try {
                        return ((string)(this[this.tableL_UPSales.SalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sales\' in table \'L_UPSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_UPSales.SalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToDate {
                get {
                    try {
                        return ((string)(this[this.tableL_UPSales.ToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToDate\' in table \'L_UPSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_UPSales.ToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableL_UPSales.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'L_UPSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_UPSales.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoidNull() {
                return this.IsNull(this.tableL_UPSales.BoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoidNull() {
                this[this.tableL_UPSales.BoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableL_UPSales.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableL_UPSales.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableL_UPSales.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableL_UPSales.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNull() {
                return this.IsNull(this.tableL_UPSales.SalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNull() {
                this[this.tableL_UPSales.SalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToDateNull() {
                return this.IsNull(this.tableL_UPSales.ToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToDateNull() {
                this[this.tableL_UPSales.ToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableL_UPSales.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableL_UPSales.FromDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class L_SouthSalesRow : global::System.Data.DataRow {
            
            private L_SouthSalesDataTable tableL_SouthSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal L_SouthSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableL_SouthSales = ((L_SouthSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Boid {
                get {
                    try {
                        return ((string)(this[this.tableL_SouthSales.BoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Boid\' in table \'L_SouthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_SouthSales.BoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableL_SouthSales.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'L_SouthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_SouthSales.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableL_SouthSales.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'L_SouthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_SouthSales.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sales {
                get {
                    try {
                        return ((string)(this[this.tableL_SouthSales.SalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sales\' in table \'L_SouthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_SouthSales.SalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToDate {
                get {
                    try {
                        return ((string)(this[this.tableL_SouthSales.ToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToDate\' in table \'L_SouthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_SouthSales.ToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableL_SouthSales.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'L_SouthSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_SouthSales.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoidNull() {
                return this.IsNull(this.tableL_SouthSales.BoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoidNull() {
                this[this.tableL_SouthSales.BoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableL_SouthSales.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableL_SouthSales.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableL_SouthSales.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableL_SouthSales.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNull() {
                return this.IsNull(this.tableL_SouthSales.SalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNull() {
                this[this.tableL_SouthSales.SalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToDateNull() {
                return this.IsNull(this.tableL_SouthSales.ToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToDateNull() {
                this[this.tableL_SouthSales.ToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableL_SouthSales.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableL_SouthSales.FromDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class L_EastSalesRow : global::System.Data.DataRow {
            
            private L_EastSalesDataTable tableL_EastSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal L_EastSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableL_EastSales = ((L_EastSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Boid {
                get {
                    try {
                        return ((string)(this[this.tableL_EastSales.BoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Boid\' in table \'L_EastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_EastSales.BoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableL_EastSales.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'L_EastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_EastSales.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableL_EastSales.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'L_EastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_EastSales.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sales {
                get {
                    try {
                        return ((string)(this[this.tableL_EastSales.SalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sales\' in table \'L_EastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_EastSales.SalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToDate {
                get {
                    try {
                        return ((string)(this[this.tableL_EastSales.ToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToDate\' in table \'L_EastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_EastSales.ToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableL_EastSales.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'L_EastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_EastSales.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoidNull() {
                return this.IsNull(this.tableL_EastSales.BoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoidNull() {
                this[this.tableL_EastSales.BoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableL_EastSales.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableL_EastSales.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableL_EastSales.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableL_EastSales.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNull() {
                return this.IsNull(this.tableL_EastSales.SalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNull() {
                this[this.tableL_EastSales.SalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToDateNull() {
                return this.IsNull(this.tableL_EastSales.ToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToDateNull() {
                this[this.tableL_EastSales.ToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableL_EastSales.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableL_EastSales.FromDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class L_CenteralSalesRow : global::System.Data.DataRow {
            
            private L_CenteralSalesDataTable tableL_CenteralSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal L_CenteralSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableL_CenteralSales = ((L_CenteralSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Boid {
                get {
                    try {
                        return ((string)(this[this.tableL_CenteralSales.BoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Boid\' in table \'L_CenteralSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_CenteralSales.BoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableL_CenteralSales.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'L_CenteralSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_CenteralSales.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableL_CenteralSales.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'L_CenteralSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_CenteralSales.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sales {
                get {
                    try {
                        return ((string)(this[this.tableL_CenteralSales.SalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sales\' in table \'L_CenteralSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_CenteralSales.SalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Todate {
                get {
                    try {
                        return ((string)(this[this.tableL_CenteralSales.TodateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Todate\' in table \'L_CenteralSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_CenteralSales.TodateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableL_CenteralSales.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'L_CenteralSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_CenteralSales.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoidNull() {
                return this.IsNull(this.tableL_CenteralSales.BoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoidNull() {
                this[this.tableL_CenteralSales.BoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableL_CenteralSales.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableL_CenteralSales.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableL_CenteralSales.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableL_CenteralSales.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNull() {
                return this.IsNull(this.tableL_CenteralSales.SalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNull() {
                this[this.tableL_CenteralSales.SalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTodateNull() {
                return this.IsNull(this.tableL_CenteralSales.TodateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTodateNull() {
                this[this.tableL_CenteralSales.TodateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableL_CenteralSales.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableL_CenteralSales.FromDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class L_WestSalesRow : global::System.Data.DataRow {
            
            private L_WestSalesDataTable tableL_WestSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal L_WestSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableL_WestSales = ((L_WestSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Boid {
                get {
                    try {
                        return ((string)(this[this.tableL_WestSales.BoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Boid\' in table \'L_WestSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_WestSales.BoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableL_WestSales.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'L_WestSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_WestSales.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableL_WestSales.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'L_WestSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_WestSales.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sales {
                get {
                    try {
                        return ((string)(this[this.tableL_WestSales.SalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sales\' in table \'L_WestSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_WestSales.SalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToDate {
                get {
                    try {
                        return ((string)(this[this.tableL_WestSales.ToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToDate\' in table \'L_WestSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_WestSales.ToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableL_WestSales.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'L_WestSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_WestSales.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoidNull() {
                return this.IsNull(this.tableL_WestSales.BoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoidNull() {
                this[this.tableL_WestSales.BoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableL_WestSales.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableL_WestSales.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableL_WestSales.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableL_WestSales.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNull() {
                return this.IsNull(this.tableL_WestSales.SalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNull() {
                this[this.tableL_WestSales.SalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToDateNull() {
                return this.IsNull(this.tableL_WestSales.ToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToDateNull() {
                this[this.tableL_WestSales.ToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableL_WestSales.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableL_WestSales.FromDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class L_NorthEastSalesRow : global::System.Data.DataRow {
            
            private L_NorthEastSalesDataTable tableL_NorthEastSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal L_NorthEastSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableL_NorthEastSales = ((L_NorthEastSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Boid {
                get {
                    try {
                        return ((string)(this[this.tableL_NorthEastSales.BoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Boid\' in table \'L_NorthEastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NorthEastSales.BoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableL_NorthEastSales.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'L_NorthEastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NorthEastSales.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableL_NorthEastSales.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'L_NorthEastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NorthEastSales.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sales {
                get {
                    try {
                        return ((string)(this[this.tableL_NorthEastSales.SalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sales\' in table \'L_NorthEastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NorthEastSales.SalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Todate {
                get {
                    try {
                        return ((string)(this[this.tableL_NorthEastSales.TodateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Todate\' in table \'L_NorthEastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NorthEastSales.TodateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableL_NorthEastSales.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'L_NorthEastSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NorthEastSales.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoidNull() {
                return this.IsNull(this.tableL_NorthEastSales.BoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoidNull() {
                this[this.tableL_NorthEastSales.BoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableL_NorthEastSales.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableL_NorthEastSales.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableL_NorthEastSales.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableL_NorthEastSales.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNull() {
                return this.IsNull(this.tableL_NorthEastSales.SalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNull() {
                this[this.tableL_NorthEastSales.SalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTodateNull() {
                return this.IsNull(this.tableL_NorthEastSales.TodateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTodateNull() {
                this[this.tableL_NorthEastSales.TodateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableL_NorthEastSales.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableL_NorthEastSales.FromDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class L_NepalSalesRow : global::System.Data.DataRow {
            
            private L_NepalSalesDataTable tableL_NepalSales;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal L_NepalSalesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableL_NepalSales = ((L_NepalSalesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Boid {
                get {
                    try {
                        return ((string)(this[this.tableL_NepalSales.BoidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Boid\' in table \'L_NepalSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NepalSales.BoidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableL_NepalSales.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'L_NepalSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NepalSales.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableL_NepalSales.RegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Region\' in table \'L_NepalSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NepalSales.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sales {
                get {
                    try {
                        return ((string)(this[this.tableL_NepalSales.SalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sales\' in table \'L_NepalSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NepalSales.SalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToDate {
                get {
                    try {
                        return ((string)(this[this.tableL_NepalSales.ToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToDate\' in table \'L_NepalSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NepalSales.ToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromDate {
                get {
                    try {
                        return ((string)(this[this.tableL_NepalSales.FromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDate\' in table \'L_NepalSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NepalSales.FromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Totalsales {
                get {
                    try {
                        return ((string)(this[this.tableL_NepalSales.TotalsalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Totalsales\' in table \'L_NepalSales\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableL_NepalSales.TotalsalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoidNull() {
                return this.IsNull(this.tableL_NepalSales.BoidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoidNull() {
                this[this.tableL_NepalSales.BoidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableL_NepalSales.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableL_NepalSales.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableL_NepalSales.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableL_NepalSales.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNull() {
                return this.IsNull(this.tableL_NepalSales.SalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNull() {
                this[this.tableL_NepalSales.SalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToDateNull() {
                return this.IsNull(this.tableL_NepalSales.ToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToDateNull() {
                this[this.tableL_NepalSales.ToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDateNull() {
                return this.IsNull(this.tableL_NepalSales.FromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDateNull() {
                this[this.tableL_NepalSales.FromDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalsalesNull() {
                return this.IsNull(this.tableL_NepalSales.TotalsalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalsalesNull() {
                this[this.tableL_NepalSales.TotalsalesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NorthSalesRowChangeEvent : global::System.EventArgs {
            
            private NorthSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NorthSalesRowChangeEvent(NorthSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NorthSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UPSalesRowChangeEvent : global::System.EventArgs {
            
            private UPSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UPSalesRowChangeEvent(UPSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UPSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SouthSalesRowChangeEvent : global::System.EventArgs {
            
            private SouthSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SouthSalesRowChangeEvent(SouthSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SouthSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EastSalesRowChangeEvent : global::System.EventArgs {
            
            private EastSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EastSalesRowChangeEvent(EastSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EastSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CenteralSalesRowChangeEvent : global::System.EventArgs {
            
            private CenteralSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CenteralSalesRowChangeEvent(CenteralSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CenteralSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WestSalesRowChangeEvent : global::System.EventArgs {
            
            private WestSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WestSalesRowChangeEvent(WestSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WestSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NorthEastSalesRowChangeEvent : global::System.EventArgs {
            
            private NorthEastSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NorthEastSalesRowChangeEvent(NorthEastSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NorthEastSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NepalSalesRowChangeEvent : global::System.EventArgs {
            
            private NepalSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NepalSalesRowChangeEvent(NepalSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NepalSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class L_NorthSalesRowChangeEvent : global::System.EventArgs {
            
            private L_NorthSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NorthSalesRowChangeEvent(L_NorthSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NorthSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class L_UPSalesRowChangeEvent : global::System.EventArgs {
            
            private L_UPSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_UPSalesRowChangeEvent(L_UPSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_UPSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class L_SouthSalesRowChangeEvent : global::System.EventArgs {
            
            private L_SouthSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_SouthSalesRowChangeEvent(L_SouthSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_SouthSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class L_EastSalesRowChangeEvent : global::System.EventArgs {
            
            private L_EastSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_EastSalesRowChangeEvent(L_EastSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_EastSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class L_CenteralSalesRowChangeEvent : global::System.EventArgs {
            
            private L_CenteralSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_CenteralSalesRowChangeEvent(L_CenteralSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_CenteralSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class L_WestSalesRowChangeEvent : global::System.EventArgs {
            
            private L_WestSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_WestSalesRowChangeEvent(L_WestSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_WestSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class L_NorthEastSalesRowChangeEvent : global::System.EventArgs {
            
            private L_NorthEastSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NorthEastSalesRowChangeEvent(L_NorthEastSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NorthEastSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class L_NepalSalesRowChangeEvent : global::System.EventArgs {
            
            private L_NepalSalesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NepalSalesRowChangeEvent(L_NepalSalesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public L_NepalSalesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591